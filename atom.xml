<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端技術紀錄</title>
  
  <subtitle>紀錄前端技術以及筆記的地方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://s95050937.github.io/"/>
  <updated>2021-10-15T12:39:57.665Z</updated>
  <id>https://s95050937.github.io/</id>
  
  <author>
    <name>wuuu4280</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>為啥天然氣庫存長那樣的紀錄</title>
    <link href="https://s95050937.github.io/%E7%82%BA%E5%95%A5%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98%E9%95%B7%E9%82%A3%E6%A8%A3%E7%9A%84%E7%B4%80%E9%8C%84.html"/>
    <id>https://s95050937.github.io/%E7%82%BA%E5%95%A5%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98%E9%95%B7%E9%82%A3%E6%A8%A3%E7%9A%84%E7%B4%80%E9%8C%84.html</id>
    <published>2021-10-14T04:14:18.000Z</published>
    <updated>2021-10-15T12:39:57.665Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="696cad514cfbf0e78292e36145283696aab12d7841bba7078de4ec31aa13b38f">bf9f898d6aa72323bf2ed6e74fb654d108d45f29e0da03390551288d2af2de0f9b89e8c4f1ea093cb6fd3a5b659a1ece7f04f89305c02ad1fa1adaacf191ff170f2d79efb3d57a71561c45eea7a4936372330856d72cd8242ed6c2126c4112232bee2ec8a7920cc8ca24b94755f47963e7a311af694cbcff2b08e35a26b494c8f9ed571f8f593a0282a93d8b0dbdb79a1d080c4b3a7345c5ee7e6e6cd10b56e03ccf96f7ece0322a0d0c98f874cd24f0c0a63ef8e143cf63aad5622b957df3c923f32789f81e99e0f9202955dbfdea0fa836229fc946d786beb9749f7fcb4810f316ca5da1eaf52c54b45d1ea08b85597edb311e8fe4bc94ebdc4ede0f5beb3f6e921971137688abd90d8321b605ad7574049fd8899f410145dc8d237a2a1970aa41efcf1904851096c625ad59d7083a7da6ed2ca6a28ef83cdff14421b1849b277b1b0db600c5ac1a2a9f36b088066e7118c37a6a639716b9d47a15304b801e77af8f0ce5949023fbbfa5e3dc7a51d3bb6a930c6603544f42027d3e2fddc9ab02d23b4a0e9fd33b671c7fd930974d26dea3ecff69c45c66f8281d7a4108eef8197719fe92c0d6a7715b37112512645b291b37f132825a6eccd2af14e0127e4c55041805c26a13e919b7e144d8eae23d71d2d4cbb580e10698d6752c53ef8c127502362fee3643dccd7ba96d69ef8bca91aa51403c5269b1bbbe6e270093bc6cc266b88fc0bb9d8fc3086cb1ff3e167f22c2a20ac2f62b18daabdb48a6731f9750413cd435af4d9b5faed9fbffc895e8f4b0ede1269786a61f3271177ffe15bff0fa1fc5f2cc43b15a14691b6220a0cedbb0505731ed88d7d7a0681526722d5f5c98f38a8a898e85b627aa51996d788c1bf002a34b4f2dfdf0d21bd0384f5fdae40c89590ced4e39271cf83a256b5b95cd51e42937f1de8b6a76f4dad7695d057f6ade67691f5d4b5213e67c27f3d3562e82b30883df7ec93bcd147104ddfca8b27fa79fdbda4afd3eae292f04b8d5d3c9290543d995e20c48cbf2081a835aa5618aaf9f0d55e4a5f9e5727bcacda9502d677d459a46e1a07c2c6438707ca2b61ba282b9a8abba312d01dafc7484e31e0c5e055d02ebfd26fb03e2b4cd38dba281b077806330d3b674ff87961063a5fcd78ed5c58e5c05bfb7104fe34d0e6c44143e3682ef46b0c9faa952a5eb984dee5757238439757e01459437f5b812c689d4651cf382825592214788fd1f44531f5b080ed6e51956d71dfb7056cbd60c0c68b96b589621001c3b86d18707c4df084b3b0cc615df80f3a3d12bbd120890e0934d5354a03c04a834536c7f04e15e1a102d63d6c210b7eb18b32c2390062fca53cea690dca4aceedc17d8e4e777b002056052bdc6918f1ab3da5628d1ffbcdac5529c30b14eb163f18f65d8314f5b7ae25840cd4afc55c96555f2c7e7995ae02db1696face4ff3e1a71da68e7bd591fe26819ffa05c6e4546bcf766f5628d05c9a345ee13a5cbba474f076a08dcf74b48fcbef5f785317a0329f26b6257481b546d28ef1c91daff2b1af2f298a98b9e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">輸入密碼查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      私人文章
    
    </summary>
    
    
      <category term="天然氣" scheme="https://s95050937.github.io/categories/%E5%A4%A9%E7%84%B6%E6%B0%A3/"/>
    
    
      <category term="天然氣" scheme="https://s95050937.github.io/tags/%E5%A4%A9%E7%84%B6%E6%B0%A3/"/>
    
      <category term="天然氣庫存" scheme="https://s95050937.github.io/tags/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>天然氣庫存</title>
    <link href="https://s95050937.github.io/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98.html"/>
    <id>https://s95050937.github.io/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98.html</id>
    <published>2021-10-14T04:14:18.000Z</published>
    <updated>2021-10-14T04:33:13.233Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="efc613459918f4e54f1c3d219900503242b1bd11c2cfd37b4ec3caf1b8f53dc9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">輸入密碼查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      私人文章
    
    </summary>
    
    
      <category term="天然氣" scheme="https://s95050937.github.io/categories/%E5%A4%A9%E7%84%B6%E6%B0%A3/"/>
    
    
      <category term="天然氣" scheme="https://s95050937.github.io/tags/%E5%A4%A9%E7%84%B6%E6%B0%A3/"/>
    
      <category term="天然氣庫存" scheme="https://s95050937.github.io/tags/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>this、apply、call、bind (轉載)</title>
    <link href="https://s95050937.github.io/juejin04.html"/>
    <id>https://s95050937.github.io/juejin04.html</id>
    <published>2020-08-14T08:38:36.000Z</published>
    <updated>2020-08-14T08:42:30.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this、apply、call、bind"><a href="#this、apply、call、bind" class="headerlink" title="this、apply、call、bind"></a>this、apply、call、bind</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903496253177863" target="_blank" rel="noopener">https://juejin.im/post/6844903496253177863</a></p></blockquote><h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><blockquote><p>this 永遠指向最後調用他的對象</p></blockquote><p>我常拿來判斷的想法</p><blockquote><p>看他是被當作對象內的方法調用還是全局函數</p></blockquote><p>直接來看例子比較好懂 </p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Mike'</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    name: <span class="string">'Mary'</span>,</span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.getName() <span class="comment">// 很明顯是Mary，因為this指向的是最後調用他的對象</span></span><br><span class="line"><span class="built_in">window</span>.foo.getName() <span class="comment">// 這也很明顯是Mary，因為會是最後調用的對象(即foo)</span></span><br><span class="line"><span class="keyword">let</span> bar = foo.getName <span class="comment">// 記住這是賦與內存地址給他，執行的時候並不會變成 window.foo.getName</span></span><br><span class="line">bar() <span class="comment">// Mike (window.bar())</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>這句超級重要</p><blockquote><p>// 記住這是賦與內存地址給他，執行的時候並不會變成 window.foo.getName</p></blockquote><p>題外話: </p><p>​    不知道大家有沒有發現我這裡第一行定義是用var來定義，因為如果用let 來定義的話，並不會變成全局變量(window.name)，還有這裡如果用嚴格模式會報錯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span> </span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Mike'</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    ... <span class="comment">// 底下都一樣</span></span><br></pre></td></tr></table></figure><p><img src="/images/juejin04/1.png" alt=""></p><h2 id="如何改變this指向"><a href="#如何改變this指向" class="headerlink" title="如何改變this指向"></a>如何改變this指向</h2><h3 id="箭頭函數-之後會開一篇出來講先pass"><a href="#箭頭函數-之後會開一篇出來講先pass" class="headerlink" title="箭頭函數(之後會開一篇出來講先pass)"></a>箭頭函數(之後會開一篇出來講先pass)</h3><p>可以避免很多坑this指向最後調用對象的坑，</p><blockquote><p>箭頭函數的this始終指向函數定義時的this，而非執行時。</p></blockquote><p>​    箭頭函數中沒有this綁定，必須通過查找作用域鏈來決定其值，如果箭頭函數被非箭頭函數包含，則this綁定的是最近一層非箭頭函數的this，否則，this為undefined</p><p>例子: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"windowsName"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是全局函數!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()</span><br><span class="line">    &#125;, <span class="number">100</span>);                <span class="comment">// Cherry </span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()</span><br><span class="line">    &#125;, <span class="number">100</span>);                <span class="comment">// 我是全局函數!(因為setTimeout會被window調用)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()</span><br></pre></td></tr></table></figure><p>注意: </p><blockquote><p><code>setTimeout</code>中使用普通函數，1秒後函數執行時，這時函數其實是在全局作用域執行</p></blockquote><h3 id="在函數內部使用-this-this"><a href="#在函數內部使用-this-this" class="headerlink" title="在函數內部使用 _this = this"></a>在函數內部使用 _this = this</h3><p>這裡用了一個很聰明的辦法，就是：</p><blockquote><p>利用_this變量去紀錄調用過程的this對象</p></blockquote><p>例子: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ar name = <span class="string">"windowsName"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"></span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>; <span class="comment">// 這裡在調用時會是a這個對象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;name: "Cherry", func1: ƒ, func2: ƒ&#125;</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      _this.func1() </span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()       <span class="comment">// Cherry</span></span><br></pre></td></tr></table></figure><p><img src="/images/juejin04/2.png" alt=""></p><h3 id="使用apply、call、bind"><a href="#使用apply、call、bind" class="headerlink" title="使用apply、call、bind"></a>使用apply、call、bind</h3><p>先來看例子晚點講原理</p><p>可以發現其實三個的用法幾乎一樣，只有bind要再執行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// apply</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.apply(a), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.call(a), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.bind(a)(), <span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()</span><br></pre></td></tr></table></figure><h2 id="apply、call、bind-區別"><a href="#apply、call、bind-區別" class="headerlink" title="apply、call、bind 區別"></a>apply、call、bind 區別</h2><h3 id="apply以及call差別"><a href="#apply以及call差別" class="headerlink" title="apply以及call差別"></a>apply以及call差別</h3><blockquote><p>基本上是沒差，只是傳遞參數apply是用array而call是分批傳入</p></blockquote><p>定義: </p><blockquote><p>fun.apply (thisArg，[argsArray])</p><p>fun.call (thisArg[, arg1[, arg2[, …]]])</p></blockquote><p>看起來有夠複雜，其實就是最上面講得那句。直接看例子就懂了</p><p>例子： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">    name : <span class="string">"Cherry"</span>,</span><br><span class="line">    fn : <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.apply(a,[<span class="number">1</span>,<span class="number">2</span>])     <span class="comment">// 3</span></span><br><span class="line">b.call(a,<span class="number">1</span>,<span class="number">2</span>)   <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="bind-和apply、call-區別"><a href="#bind-和apply、call-區別" class="headerlink" title="bind 和apply、call 區別"></a>bind 和apply、call 區別</h3><p>bind跟他們兩個的最大區別就是</p><blockquote><p>bind是創建函數，還需要手動調用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">    name : <span class="string">"Cherry"</span>,</span><br><span class="line">    fn : <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( a + b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.bind(a,<span class="number">1</span>,<span class="number">2</span>)()           <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;this、apply、call、bind&quot;&gt;&lt;a href=&quot;#this、apply、call、bind&quot; class=&quot;headerlink&quot; title=&quot;this、apply、call、bind&quot;&gt;&lt;/a&gt;this、apply、call、bind&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/6844903496253177863&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/6844903496253177863&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;this-的指向&quot;&gt;&lt;a href=&quot;#this-的指向&quot; class=&quot;headerlink&quot; title=&quot;this 的指向&quot;&gt;&lt;/a&gt;this 的指向&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;this 永遠指向最後調用他的對象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我常拿來判斷的想法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看他是被當作對象內的方法調用還是全局函數&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接來看例子比較好懂 &lt;/p&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;Mike&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; foo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;Mary&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getName() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.getName() &lt;span class=&quot;comment&quot;&gt;// 很明顯是Mary，因為this指向的是最後調用他的對象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.foo.getName() &lt;span class=&quot;comment&quot;&gt;// 這也很明顯是Mary，因為會是最後調用的對象(即foo)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bar = foo.getName &lt;span class=&quot;comment&quot;&gt;// 記住這是賦與內存地址給他，執行的時候並不會變成 window.foo.getName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar() &lt;span class=&quot;comment&quot;&gt;// Mike (window.bar())&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="juejin" scheme="https://s95050937.github.io/tags/juejin/"/>
    
  </entry>
  
  <entry>
    <title>淺談instanceof 和typeof 的實現原理 (轉載)</title>
    <link href="https://s95050937.github.io/juejin03.html"/>
    <id>https://s95050937.github.io/juejin03.html</id>
    <published>2020-08-13T15:23:49.000Z</published>
    <updated>2020-08-13T16:54:34.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="淺談instanceof-和typeof-的實現原理-轉載"><a href="#淺談instanceof-和typeof-的實現原理-轉載" class="headerlink" title="淺談instanceof 和typeof 的實現原理 (轉載)"></a>淺談instanceof 和typeof 的實現原理 (轉載)</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903613584654344" target="_blank" rel="noopener">https://juejin.im/post/6844903613584654344</a></p></blockquote><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>一般被用於判斷一個變量的類型，可判斷七種類型</p><blockquote><p>number<code>,</code>string<code>,</code>object<code>,</code>boolean<code>,</code>function<code>,</code>undefined<code>,</code>symbol</p></blockquote><p>但有一個很麻煩的事情，只能知道那個變量是object不能知道更精確的類型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>  s === <span class="string">'object'</span>  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 還必須靠instanceof</span></span><br><span class="line">s <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>而且還有一個老梗，就是null也會顯示object (上古bug)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>所以typeof通常只被用來檢查基本類型</p><p>附註: 有一個不錯的方法</p><a id="more"></a><h3 id="不錯的方法-Object-prototype-toString-call-element"><a href="#不錯的方法-Object-prototype-toString-call-element" class="headerlink" title="不錯的方法: Object.prototype.toString.call(element)"></a>不錯的方法: Object.prototype.toString.call(element)</h3><p>可以利用這個做出更精銳的判斷</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>) <span class="comment">// "[object Number]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">'hi'</span>) <span class="comment">// "[object String]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;<span class="attr">a</span>:<span class="string">'hi'</span>&#125;) <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>,<span class="string">'a'</span>]) <span class="comment">// "[object Array]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) <span class="comment">// "[object Boolean]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="comment">// "[object Function]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) <span class="comment">// "[object Null]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">// "[object Undefined]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>(<span class="number">1</span>)) <span class="comment">// "[object Symbol]"</span></span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在此之前要先知道，JS在底層儲存變量的時候時候，會在變量的機器碼的低位1-3位存儲其類型信息(二進制)</p><blockquote><ul><li>000：對象</li><li>010：浮點數</li><li>100：字符串</li><li>110：布爾</li><li>1：整數</li></ul></blockquote><p>那我們也就知道為啥null會跑出object了，因為null的所有機器碼全部都是0</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>在講這個之前請務必先看以下文章，因為要先建立原型鍊的概念，講解也會用該文的概念去解釋</p><blockquote><p><a href="https://s95050937.github.io/zhihu02.html#more">https://s95050937.github.io/zhihu02.html#more</a></p></blockquote><h3 id="這做啥用的"><a href="#這做啥用的" class="headerlink" title="這做啥用的"></a>這做啥用的</h3><p>主要的作用是判斷一個實例是否屬於某種類型 (也可以是父類型或者祖先類型)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> Person()</span><br><span class="line">nicole <span class="keyword">instanceof</span> Person <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Programmer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Programmer.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> Programmer()</span><br><span class="line">nicole <span class="keyword">instanceof</span> person <span class="comment">// true</span></span><br><span class="line">nicole <span class="keyword">instanceof</span> Programmer <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="整理出來的偽代碼"><a href="#整理出來的偽代碼" class="headerlink" title="整理出來的偽代碼"></a>整理出來的偽代碼</h3><blockquote><p>其實就是先找右邊的prototype( 因為機器的prototype會等於實例的__ proto __ )</p><p> 然後跟左邊的p比較如果不相等就再往上找直到取到null 並 return false</p></blockquote><p>代碼: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不難就上面提到的概念看一下應該就會懂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new_instance_of</span>(<span class="params">leftVaule, rightVaule</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> rightProto = rightVaule.prototype; <span class="comment">// 取右表达式的 prototype 值</span></span><br><span class="line">    leftVaule = leftVaule.__proto__; <span class="comment">// 取左表达式的__proto__值</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftVaule === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftVaule === rightProto) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        leftVaule = leftVaule.__proto__ </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>既然知道到底再比較甚麼就好辦啦，直接看例子吧</p><h4 id="Object-instanceof-Object"><a href="#Object-instanceof-Object" class="headerlink" title="Object instanceof Object"></a>Object instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object 的 prototype 是 NO1</p><p>左邊: Object的p往上找會有NO1 </p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/1.png" alt=""></p><h3 id="Function-instanceof-Function"><a href="#Function-instanceof-Function" class="headerlink" title="Function instanceof Function"></a>Function instanceof Function</h3><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Function的prototype是NO2</p><p>左邊: Function的p往上就是NO2</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/2.png" alt=""></p><h4 id="Function-instanceof-Object"><a href="#Function-instanceof-Object" class="headerlink" title="Function instanceof Object"></a>Function instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object的prototype指向NO1</p><p>左邊: Function的p往上找會有NO1</p></blockquote><p>示意圖(因為右邊只需要prototype是啥，所以我在這裡沒畫Object的proto): </p><p><img src="/images/juejin03/3.png" alt=""></p><h4 id="Foo-instanceof-Foo"><a href="#Foo-instanceof-Foo" class="headerlink" title="Foo instanceof Foo"></a>Foo instanceof Foo</h4><p>答案: </p><blockquote><p>false</p></blockquote><p>解析: </p><blockquote><p>右邊: Foo.prototype 指向某一個prototype</p><p>左邊: 但Foo的p往上找找不到prototype</p></blockquote><p>示意圖:</p><p>附註: </p><p>​    因為右邊僅需要找到prototype所以我沒畫Foo.prototype.__ proto __指向誰(NO1)，從這張圖可以發現從Foo往上找會直接找到根本找不到 Foo.prototype，因此會返回 false</p><p><img src="/images/juejin03/4.png" alt=""></p><h4 id="Foo-instanceof-Object"><a href="#Foo-instanceof-Object" class="headerlink" title="Foo instanceof Object"></a>Foo instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object.prototype 指向NO1</p><p>左邊: Foo的p往上找找的到NO1</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/5.png" alt=""></p><h4 id="Foo-instanceof-Function"><a href="#Foo-instanceof-Function" class="headerlink" title="Foo instanceof Function"></a>Foo instanceof Function</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Function.prototype 指向NO2</p><p>左邊: 但Foo的p往上找的到NO2</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;淺談instanceof-和typeof-的實現原理-轉載&quot;&gt;&lt;a href=&quot;#淺談instanceof-和typeof-的實現原理-轉載&quot; class=&quot;headerlink&quot; title=&quot;淺談instanceof 和typeof 的實現原理 (轉載)&quot;&gt;&lt;/a&gt;淺談instanceof 和typeof 的實現原理 (轉載)&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/6844903613584654344&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/6844903613584654344&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;typeof&quot;&gt;&lt;a href=&quot;#typeof&quot; class=&quot;headerlink&quot; title=&quot;typeof&quot;&gt;&lt;/a&gt;typeof&lt;/h2&gt;&lt;p&gt;一般被用於判斷一個變量的類型，可判斷七種類型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;number&lt;code&gt;,&lt;/code&gt;string&lt;code&gt;,&lt;/code&gt;object&lt;code&gt;,&lt;/code&gt;boolean&lt;code&gt;,&lt;/code&gt;function&lt;code&gt;,&lt;/code&gt;undefined&lt;code&gt;,&lt;/code&gt;symbol&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但有一個很麻煩的事情，只能知道那個變量是object不能知道更精確的類型&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;  s === &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 還必須靠instanceof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;而且還有一個老梗，就是null也會顯示object (上古bug)&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以typeof通常只被用來檢查基本類型&lt;/p&gt;
&lt;p&gt;附註: 有一個不錯的方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="juejin" scheme="https://s95050937.github.io/tags/juejin/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 閉包</title>
    <link href="https://s95050937.github.io/JS06.html"/>
    <id>https://s95050937.github.io/JS06.html</id>
    <published>2020-08-12T12:24:05.000Z</published>
    <updated>2020-08-12T12:28:48.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-閉包"><a href="#JavaScript-閉包" class="headerlink" title="JavaScript 閉包"></a>JavaScript 閉包</h1><h2 id="先來看一下各個不同地方的閉包說法"><a href="#先來看一下各個不同地方的閉包說法" class="headerlink" title="先來看一下各個不同地方的閉包說法"></a>先來看一下各個不同地方的閉包說法</h2><blockquote><ol><li>你不知道的JavaScript: 當函數可以記住並訪問所在的詞法作用域時及形成閉包，即使不是在該函數的詞法作用域內</li><li>JavaScript高级程序设计: 閉包是指有權訪問令一個函數作用域變量的函數</li><li>MDN: 閉包（Closure）是函式以及該函式被宣告時所在的作用域環境（lexical environment）的組合。</li></ol></blockquote><h2 id="我自己的理解"><a href="#我自己的理解" class="headerlink" title="我自己的理解"></a>我自己的理解</h2><p>如果我們把函數作用域想像成一個書包(從外面是看不到裡面的內容的)，那閉包就很像一個超一流扒手，可以偷窺到你書包的東西。</p><a id="more"></a><h2 id="先來個情境"><a href="#先來個情境" class="headerlink" title="先來個情境"></a>先來個情境</h2><p>聲明一個背包函數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">package</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pencilCase = &#123;</span><br><span class="line">    <span class="string">'原子筆'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'橡皮擦'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'水壺'</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(pencilCase); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外界的人看起來會長怎樣(那整個黃黃的一塊講的艱澀一點就是package函數的詞法作用域)</p><p><img src="/images/JS06/1.png" alt=""></p><p>假設今天有一個扒手函數可以調用到鉛筆盒那就形成閉包(如同先前定義的)</p><p>附註: 這裡我對package裡面改寫成這樣:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">package</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pencilCase = &#123;</span><br><span class="line">    <span class="string">'原子筆'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'橡皮擦'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'水壺'</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getPencilCase() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(pencilCase);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之後扒手開扒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pickpocket = package() <span class="comment">// 通常函數執行完該作用域的東西就該銷毀了</span></span><br><span class="line">pickpocket.getPencilCase()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/2.png" alt=""><br>可以發現確實成功獲得書包裡面的鉛筆盒!!!!</p><h2 id="其實這跟棧內存有關"><a href="#其實這跟棧內存有關" class="headerlink" title="其實這跟棧內存有關"></a>其實這跟棧內存有關</h2><h3 id="擷取"><a href="#擷取" class="headerlink" title="擷取"></a>擷取</h3><blockquote><p><a href="https://juejin.im/post/6844904099771580423" target="_blank" rel="noopener">https://juejin.im/post/6844904099771580423</a></p></blockquote><blockquote><p>棧內存銷毀：</p><ul><li>全局棧內存：關掉頁面的時候才會銷毀</li><li>私有棧內存：<ul><li>1.一般情況下，函數只要執行完成，形成的私有棧內存就會被銷毀釋放掉（排除出現無限極遞歸、出現死循環的模式）</li><li>2.但是一旦棧內存中的某個東西（一般都是堆地址）被私有作用域以外的事物給佔用了，則當前私有棧內存不能立即被釋放銷毀（特點：私有作用域中的私有變量等信息也保留下來了=&gt;這種函數執行形成不能被釋放的私有棧內存，也叫做閉包）</li></ul></li></ul></blockquote><p>從上面兩個可以得出函數作用域裡面確實不會被立即銷毀</p><h3 id="到此我們可以知道"><a href="#到此我們可以知道" class="headerlink" title="到此我們可以知道"></a>到此我們可以知道</h3><blockquote><p>只要外面有任何事物佔據了私有作用域裡面的東西就會產生閉包(保存該函數作用域)</p></blockquote><p>所以其實我們要產生閉包的核心觀念是要讓外界竊聽到函數內部，這才是為何我們在函數內要return函數的原因(讓外界卡住內存)的原因</p><p>所以下面講幾個例子吧!</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="範例一-最基本閉包"><a href="#範例一-最基本閉包" class="headerlink" title="範例一 最基本閉包"></a>範例一 最基本閉包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baz</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = foo(<span class="number">5</span>) <span class="comment">// bar卡住了內存</span></span><br><span class="line">bar(<span class="number">4</span>) <span class="comment">// 這個4其實啥意義都沒有</span></span><br><span class="line">bar(<span class="number">5</span>) <span class="comment">// 這個5也沒啥意義</span></span><br></pre></td></tr></table></figure><p><img src="/images/JS06/3.png" alt=""></p><h3 id="改一下範例一看會長怎樣"><a href="#改一下範例一看會長怎樣" class="headerlink" title="改一下範例一看會長怎樣"></a>改一下範例一看會長怎樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baz</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar1 = foo(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> bar2 = foo(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">bar1()</span><br><span class="line">bar1()</span><br><span class="line"></span><br><span class="line">bar2()</span><br><span class="line">bar2()</span><br></pre></td></tr></table></figure><p>可以發現確實可以訪問到num，且我們這邊可以發現會產生不同的值，代表這兩個都會儲存內存，因此我們要小心使用，不然可能會一直浪費內存<br><img src="/images/JS06/4.png" alt=""></p><h3 id="還可以這樣"><a href="#還可以這樣" class="headerlink" title="還可以這樣"></a>還可以這樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  spy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">5</span>)</span><br><span class="line">spy()</span><br><span class="line">spy()</span><br><span class="line">spy()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/5.png" alt=""></p><h3 id="或是這樣"><a href="#或是這樣" class="headerlink" title="或是這樣"></a>或是這樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bar =&#123;</span><br><span class="line">    geta() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(a++);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baz1 = foo(<span class="number">2</span>)</span><br><span class="line">baz1.geta() </span><br><span class="line">baz1.geta()</span><br><span class="line"><span class="keyword">let</span> baz2 = foo(<span class="number">5</span>)</span><br><span class="line">baz2.geta()</span><br><span class="line">baz2.geta()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-閉包&quot;&gt;&lt;a href=&quot;#JavaScript-閉包&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 閉包&quot;&gt;&lt;/a&gt;JavaScript 閉包&lt;/h1&gt;&lt;h2 id=&quot;先來看一下各個不同地方的閉包說法&quot;&gt;&lt;a href=&quot;#先來看一下各個不同地方的閉包說法&quot; class=&quot;headerlink&quot; title=&quot;先來看一下各個不同地方的閉包說法&quot;&gt;&lt;/a&gt;先來看一下各個不同地方的閉包說法&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;你不知道的JavaScript: 當函數可以記住並訪問所在的詞法作用域時及形成閉包，即使不是在該函數的詞法作用域內&lt;/li&gt;
&lt;li&gt;JavaScript高级程序设计: 閉包是指有權訪問令一個函數作用域變量的函數&lt;/li&gt;
&lt;li&gt;MDN: 閉包（Closure）是函式以及該函式被宣告時所在的作用域環境（lexical environment）的組合。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;我自己的理解&quot;&gt;&lt;a href=&quot;#我自己的理解&quot; class=&quot;headerlink&quot; title=&quot;我自己的理解&quot;&gt;&lt;/a&gt;我自己的理解&lt;/h2&gt;&lt;p&gt;如果我們把函數作用域想像成一個書包(從外面是看不到裡面的內容的)，那閉包就很像一個超一流扒手，可以偷窺到你書包的東西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript面試" scheme="https://s95050937.github.io/tags/JavaScript%E9%9D%A2%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 世界万物诞生记 (原型鍊) (轉載)</title>
    <link href="https://s95050937.github.io/zhihu02.html"/>
    <id>https://s95050937.github.io/zhihu02.html</id>
    <published>2020-08-12T09:11:47.000Z</published>
    <updated>2020-08-13T16:52:32.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-世界万物诞生记-原型鍊-轉載"><a href="#JavaScript-世界万物诞生记-原型鍊-轉載" class="headerlink" title="JavaScript 世界万物诞生记 (原型鍊) (轉載)"></a>JavaScript 世界万物诞生记 (原型鍊) (轉載)</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/22989691" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22989691</a></p></blockquote><p>可以把prototype想像成那台機器會幹啥(有點像繼承會做的事情)</p><p>而<strong>proto</strong>(p) 則可以想像特性繼承(有點像繼承個性或是特徵)</p><p>看完全部再回來</p><blockquote><ol><li>比方說Object的prototype會是NO1是因為他在模仿神創造對象</li><li>Function是一台機器所以他被歸類在NO2(繼承NO2是機器的特性)，他會創造機器，因此他的prototype是NO2</li><li>機器會做甚麼是一定是根據prototype(Animal會吃跟移動，魚會游泳)</li><li>靜態特性則是proto(大家都是機器因此proto往上找必定會有NO2)</li></ol></blockquote><h2 id="最終圖"><a href="#最終圖" class="headerlink" title="最終圖"></a>最終圖</h2><p><img src="/images/zhihu02/1.png" alt=""></p><a id="more"></a><ol><li><p>起初JS世界只有null(只存在虛無)</p><p><img src="/images/zhihu02/2.png" alt=""></p></li></ol><ol start="2"><li><p>從無中誕生了神NO1</p><p><img src="/images/zhihu02/3.png" alt=""></p></li><li><p>神創造了Object機器開始生產Object(開始有生物)</p><p><img src="/images/zhihu02/4.png" alt=""></p></li><li><p>久了之後，他覺得只創造一些Object生物好像有點太單調了，於是用特徵分類出了創造String機器的String，創造Number機器的Number…</p><p><img src="/images/zhihu02/5.png" alt=""></p></li><li><p>他覺得這些機器不是也可以統整成一個機器嗎，於是創造了NO2代表了這個東西是機器</p><blockquote><p>題外話: 這些機器當然也像Object一樣也需要各自的模板對象，也就是它们的prototype属性指向的那个对象。显然它们的模板对象应该是继承自No. 1对象的，但後面太麻煩先暫時不記錄</p></blockquote><p><img src="/images/zhihu02/6.png" alt=""></p></li><li><p>造物者HEN滿意，有了Object機器創造Object，有String創造String。但她很快發現他缺少了一個關鍵，就是創造機器的機器！於是他創造了Function</p><blockquote><p>Function 是一台機器所以他的 p 是 NO2，他是根據NO2模板創造的，因此他的prototype也是NO2</p></blockquote><p><img src="/images/zhihu02/7.png" alt=""></p><p>一個很酷的事</p><blockquote><p>Object作为一个机器可以看做是有由Function制造出来的，而Function作为一个对象可以看做是由Object制造出来的。這就是雞生蛋還是蛋生雞</p></blockquote></li><li><p>這時候已經有函數可以創造機器(一個類的概念)，於是將可以創造那個類的機器稱為構造函數，可以讓該類做甚麼事情的稱為普通函數</p><p>比方說以下: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 構造函數</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bird</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> redBird = <span class="keyword">new</span> Bird(<span class="string">'#FF0000'</span>);</span><br><span class="line"><span class="comment">// 这是一台通过晃动鸟的翅膀，让鸟飞起来的简陋的机器(普通函數)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeBirdFly</span>(<span class="params">bird</span>) </span>&#123;</span><br><span class="line">    shakeBirdWing(bird);</span><br><span class="line">&#125;</span><br><span class="line">makeBirdFly(redBird);</span><br></pre></td></tr></table></figure></li><li><p>這裡有點複雜</p><ol><li><p>NO1覺得所有機器都都p都是NO2讓這個世界好像有點扁，且他發現機器跟機器有關係不能像之前一樣(第五點的圖片) ，比方說此圖，Fish跟Bird明明都是動物可是如果照圖這樣分看不出關係，而且他們的模板對象有重疊，有夠浪費空間</p><p><img src="/images/zhihu02/8.png" alt=""></p></li><li><p>於是NO1想到那我就讓Bird的模板對象繼承(p)自Animal的模板對象不就得了</p><p><img src="/images/zhihu02/9.png" alt=""></p></li><li><p>現在這樣好多了，世界變得有規律一些了，但發現機器跟機器之間還是沒啥關係(Fish機器，Aniaml機器，Bird機器看似都沒關係)，我們解決的只是他們的行為關係。</p><p><img src="/images/zhihu02/10.png" alt=""></p></li><li><p>其實很簡單用剛剛的方式就好</p><p><img src="/images/zhihu02/11.png" alt=""></p></li></ol></li><li><p>最終樣子</p><p><img src="/images/zhihu02/12.png" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-世界万物诞生记-原型鍊-轉載&quot;&gt;&lt;a href=&quot;#JavaScript-世界万物诞生记-原型鍊-轉載&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 世界万物诞生记 (原型鍊) (轉載)&quot;&gt;&lt;/a&gt;JavaScript 世界万物诞生记 (原型鍊) (轉載)&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22989691&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/22989691&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以把prototype想像成那台機器會幹啥(有點像繼承會做的事情)&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;proto&lt;/strong&gt;(p) 則可以想像特性繼承(有點像繼承個性或是特徵)&lt;/p&gt;
&lt;p&gt;看完全部再回來&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;比方說Object的prototype會是NO1是因為他在模仿神創造對象&lt;/li&gt;
&lt;li&gt;Function是一台機器所以他被歸類在NO2(繼承NO2是機器的特性)，他會創造機器，因此他的prototype是NO2&lt;/li&gt;
&lt;li&gt;機器會做甚麼是一定是根據prototype(Animal會吃跟移動，魚會游泳)&lt;/li&gt;
&lt;li&gt;靜態特性則是proto(大家都是機器因此proto往上找必定會有NO2)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最終圖&quot;&gt;&lt;a href=&quot;#最終圖&quot; class=&quot;headerlink&quot; title=&quot;最終圖&quot;&gt;&lt;/a&gt;最終圖&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/zhihu02/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="zhihu" scheme="https://s95050937.github.io/tags/zhihu/"/>
    
  </entry>
  
  <entry>
    <title>js隱式轉換相關知識(轉載)</title>
    <link href="https://s95050937.github.io/zhihu01.html"/>
    <id>https://s95050937.github.io/zhihu01.html</id>
    <published>2020-08-11T10:25:00.000Z</published>
    <updated>2020-08-11T10:28:23.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js隱式轉換相關知識"><a href="#js隱式轉換相關知識" class="headerlink" title="js隱式轉換相關知識"></a>js隱式轉換相關知識</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/38976424" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38976424</a></p></blockquote><h2 id="轉換"><a href="#轉換" class="headerlink" title="!轉換"></a>!轉換</h2><p><img src="/images/zhihu01/1.png" alt=""></p><p>轉換成Boolean然後取反，沒啥特別的</p><a id="more"></a><h2 id="轉換-1"><a href="#轉換-1" class="headerlink" title="== 轉換"></a>== 轉換</h2><h3 id="兩邊都是引用類型"><a href="#兩邊都是引用類型" class="headerlink" title="兩邊都是引用類型"></a>兩邊都是引用類型</h3><p>直接比較內存中的地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([]==[]) <span class="comment">//false，指针指向的地址不同</span></span><br></pre></td></tr></table></figure><h3 id="如果兩邊類型不一致，則兩邊都轉成number類型"><a href="#如果兩邊類型不一致，則兩邊都轉成number類型" class="headerlink" title="如果兩邊類型不一致，則兩邊都轉成number類型"></a><strong>如果兩邊類型不一致，則兩邊都轉成number類型</strong></h3><blockquote><p>引用類型先調用valueOf()方法，如果能轉成數字就OK</p><p>不能轉成數字的話，就調用toString()轉成字符串。</p><p>再轉換成數字</p></blockquote><p>一些例子</p><ol><li><pre><code class="js"><span class="keyword">var</span> a = <span class="string">'123'</span><span class="built_in">console</span>.log(a==<span class="literal">false</span>)  <span class="comment">//false,'123'转成数字是123,右侧转成数字是0,最终比较123==0</span><span class="built_in">console</span>.log(a == <span class="number">123</span>)  <span class="comment">//true,右边是数字，直接转换左右即可</span>&lt;!--￼<span class="number">1</span>--&gt;</code></pre></li><li><pre><code class="js"><span class="keyword">var</span> a = {} <span class="built_in">console</span>.log(a == <span class="number">1</span>)<span class="comment">//上面a==1在js解释引擎中的执行过程如下:</span><span class="comment">//a.valueOf()获取到的不是基本类型，调用a.toString()得到'[object Object]'</span><span class="string">'[object Object]'</span> == <span class="number">1</span>;<span class="comment">//两边类型不致，左侧转成数字</span><span class="literal">NaN</span> == <span class="number">1</span>;<span class="comment">//false,NaN跟任何类型比较都为false</span>&lt;!--￼<span class="number">2</span>--&gt;</code></pre></li></ol><p>思想構成:</p><blockquote><p><strong>一個中心(左右兩邊轉換成number為中心)，兩個基本點（轉換條件：1.類型不同時才轉換2.兩邊都是引用類型時直接比較地址），一國兩制(null、NaN、undefined使用一套製作，其它的使用另一套制度)</strong></p></blockquote><h2 id="大於或小於符"><a href="#大於或小於符" class="headerlink" title="大於或小於符"></a>大於或小於符</h2><blockquote><p><strong>字符串類型比較大小時，不進行類型轉換，而是逐位比較ascii碼</strong></p><p><strong>第1位不同則返回結果，否則繼續比較第2位，直到某一位不同為止</strong></p></blockquote><h2 id="號規則"><a href="#號規則" class="headerlink" title="+號規則"></a>+號規則</h2><p>+號運算符即可以對兩個數相加，也可以連接字符串，那如果是[1,2,3]+4這種情況下又會發生什麼呢？這就需要我們了解相應的規則，為了方便描述，我們把+號左側的值叫做A，右側的叫做B：</p><ol><li>如果A和B都是number類型，直接相加；</li><li>接下來看A或B中是否有一個是否為string類型，如果有，則將另一個也轉成字符串，然後連接；</li><li>既不是number,也不是string,則按如下規則轉換：<br>1.能轉換成數字，返回之<br>2.否則調用valueOf()，如果執行結果是基本類型，返回之；<br>3.否則調用toString()，如果執行結果是基礎類型，返回之；<br>4.無法得到原始值，拋異常。<br><img src="/images/zhihu01/2.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js隱式轉換相關知識&quot;&gt;&lt;a href=&quot;#js隱式轉換相關知識&quot; class=&quot;headerlink&quot; title=&quot;js隱式轉換相關知識&quot;&gt;&lt;/a&gt;js隱式轉換相關知識&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38976424&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/38976424&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;轉換&quot;&gt;&lt;a href=&quot;#轉換&quot; class=&quot;headerlink&quot; title=&quot;!轉換&quot;&gt;&lt;/a&gt;!轉換&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/zhihu01/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;轉換成Boolean然後取反，沒啥特別的&lt;/p&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="zhihu" scheme="https://s95050937.github.io/tags/zhihu/"/>
    
  </entry>
  
  <entry>
    <title>(譯) 送你 43 道 JavaScript 面试题 (轉載)</title>
    <link href="https://s95050937.github.io/juejin02.html"/>
    <id>https://s95050937.github.io/juejin02.html</id>
    <published>2020-08-10T13:14:22.000Z</published>
    <updated>2020-08-11T10:27:40.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="译-送你-43-道-JavaScript-面试题"><a href="#译-送你-43-道-JavaScript-面试题" class="headerlink" title="[译] 送你 43 道 JavaScript 面试题"></a>[译] 送你 43 道 JavaScript 面试题</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903869378461710" target="_blank" rel="noopener">https://juejin.im/post/6844903869378461710</a></p></blockquote><h2 id="第三題"><a href="#第三題" class="headerlink" title="第三題"></a>第三題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  radius: <span class="number">10</span>,</span><br><span class="line">  diameter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.radius * <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  perimeter: <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">shape.diameter()</span><br><span class="line">shape.perimeter()</span><br></pre></td></tr></table></figure><a id="more"></a><p>我的答案: </p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 and 62.83185307179586</span><br></pre></td></tr></table></figure></blockquote><p>正確答案</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 and NaN</span><br></pre></td></tr></table></figure></blockquote><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><blockquote><p>对于箭头函数，<code>this</code>关键字指向是它所在上下文（定义时的位置）的环境，与普通函数不同！ 这意味着当我们调用<code>perimeter</code>时，它不是指向<code>shape</code>对象，而是指其定义时的环境（window）。没有值<code>radius</code>属性，返回<code>undefined</code>。</p></blockquote><h2 id="第五題-我覺得滿酷的"><a href="#第五題-我覺得滿酷的" class="headerlink" title="第五題 (我覺得滿酷的)"></a>第五題 (我覺得滿酷的)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;</span><br><span class="line">  size: <span class="string">"small"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mouse = &#123;</span><br><span class="line">  name: <span class="string">"Mickey"</span>,</span><br><span class="line">  small: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">mouse[bird.size] <span class="comment">// true </span></span><br><span class="line">mouse[bird[<span class="string">"size"</span>]] <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="第七題-不會錯的小概念"><a href="#第七題-不會錯的小概念" class="headerlink" title="第七題(不會錯的小概念)"></a>第七題(不會錯的小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(b === c); <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因為b是對象，用===不會隱式轉型</span></span><br></pre></td></tr></table></figure><h2 id="第12題"><a href="#第12題" class="headerlink" title="第12題"></a>第12題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> Person(<span class="string">"Lydia"</span>, <span class="string">"Hallie"</span>);</span><br><span class="line"><span class="keyword">const</span> sarah = Person(<span class="string">"Sarah"</span>, <span class="string">"Smith"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lydia);</span><br><span class="line"><span class="built_in">console</span>.log(sarah);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>Person {firstName: “Lydia”, lastName: “Hallie”}<code>and</code>undefined</p></blockquote><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>new創造構造函數，然後sarah執行函數會定義全局的firstName以及lastName</p><h2 id="第16題"><a href="#第16題" class="headerlink" title="第16題"></a>第16題</h2><p>詭異的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonInfo</span>(<span class="params">one, two, three</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(one);</span><br><span class="line">  <span class="built_in">console</span>.log(two);</span><br><span class="line">  <span class="built_in">console</span>.log(three);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">"Lydia"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br></pre></td></tr></table></figure><p>答案</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">""</span>, <span class="string">"is"</span>, <span class="string">"years old"</span>] </span><br><span class="line">Lydia</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="第25題-小概念"><a href="#第25題-小概念" class="headerlink" title="第25題(小概念)"></a>第25題(小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">"one"</span>, <span class="attr">b</span>: <span class="string">"two"</span>, <span class="attr">a</span>: <span class="string">"three"</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>{ a: “three”, b: “two” }</p></blockquote><h2 id="第29題"><a href="#第29題" class="headerlink" title="第29題"></a>第29題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; </span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>456</p></blockquote><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>利用[??]， 記得裡面要設成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; <span class="comment">// 這樣會把他當成變量</span></span><br><span class="line"><span class="comment">// 如果要設定a對象鑑b的值 : a['b']</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;[object Object]: 123&#125;</span></span><br></pre></td></tr></table></figure><p>所以那一題其實是這樣</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; </span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;[object Object]: 123&#125;</span></span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;[object Object]: 456&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><h2 id="第35題-小概念"><a href="#第35題-小概念" class="headerlink" title="第35題(小概念)"></a>第35題(小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>); <span class="comment">// 因為是對象所以為真值</span></span><br></pre></td></tr></table></figure><h2 id="第43題"><a href="#第43題" class="headerlink" title="第43題"></a>第43題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([...<span class="string">"Lydia"</span>];)</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>[“L”, “y”, “d”, “i”, “a”]</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;译-送你-43-道-JavaScript-面试题&quot;&gt;&lt;a href=&quot;#译-送你-43-道-JavaScript-面试题&quot; class=&quot;headerlink&quot; title=&quot;[译] 送你 43 道 JavaScript 面试题&quot;&gt;&lt;/a&gt;[译] 送你 43 道 JavaScript 面试题&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/6844903869378461710&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/6844903869378461710&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第三題&quot;&gt;&lt;a href=&quot;#第三題&quot; class=&quot;headerlink&quot; title=&quot;第三題&quot;&gt;&lt;/a&gt;第三題&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; shape = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  radius: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  diameter() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.radius * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  perimeter: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.radius&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shape.diameter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shape.perimeter()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="juejin" scheme="https://s95050937.github.io/tags/juejin/"/>
    
  </entry>
  
  <entry>
    <title>juejin_編寫高質量可維護的代碼之優化邏輯判斷(轉載)</title>
    <link href="https://s95050937.github.io/juejin01.html"/>
    <id>https://s95050937.github.io/juejin01.html</id>
    <published>2020-08-10T09:04:22.000Z</published>
    <updated>2020-08-11T10:27:38.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="編寫高質量可維護的代碼之優化邏輯判斷"><a href="#編寫高質量可維護的代碼之優化邏輯判斷" class="headerlink" title="編寫高質量可維護的代碼之優化邏輯判斷"></a>編寫高質量可維護的代碼之優化邏輯判斷</h1><blockquote><p>這篇主要是看不同寫法，不一定真的好</p></blockquote><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6859125809655840776" target="_blank" rel="noopener">https://juejin.im/post/6859125809655840776</a></p></blockquote><h2 id="嵌套優化"><a href="#嵌套優化" class="headerlink" title="嵌套優化"></a>嵌套優化</h2><blockquote><p>製造一個函數當他是紅色水果時打印出紅色水果，如果他是紅色水果數量又大於10打印數量大於10</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">supply</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">    <span class="comment">// 条件 1: 水果存在</span></span><br><span class="line">    <span class="keyword">if</span>(fruit) &#123;</span><br><span class="line">        <span class="comment">// 条件 2: 属于红色水果</span></span><br><span class="line">        <span class="keyword">if</span>(redFruits.includes(fruit)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'红色水果'</span>);</span><br><span class="line">            <span class="comment">// 条件 3: 水果数量大于 10 个</span></span><br><span class="line">            <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'数量大于 10 个'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有水果啦!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>由於嵌套層級有三層，維護可能會很困難且不直觀，我們可以想辦法把嵌套變成一級</p><blockquote><p>附註: 個人覺得這個指示在提供想法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">supply</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有水果啦'</span>); <span class="comment">// 条件 1: 当 fruit 无效时，提前处理错误</span></span><br><span class="line">    <span class="keyword">if</span>(!redFruits.includes(fruit)) <span class="keyword">return</span>; <span class="comment">// 条件 2: 当不是红色水果时，提前 return</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'红色水果'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 条件 3: 水果数量大于 10 个</span></span><br><span class="line">    <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'数量大于 10 个'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多條件分支的優化處理"><a href="#多條件分支的優化處理" class="headerlink" title="多條件分支的優化處理"></a>多條件分支的優化處理</h2><blockquote><p>多種條件判斷</p></blockquote><ol><li><p>最直覺且最冗的寫法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据颜色选择水果</span></span><br><span class="line">  <span class="keyword">if</span>(color === <span class="string">'red'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>]; </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'yellow'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'purple'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用switch優化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">      <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">return</span> []  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="可讀性"><a href="#可讀性" class="headerlink" title="可讀性"></a>可讀性</h3><blockquote><p>這裡利用 return fruitObj[color] || []  創造else </p></blockquote><ol><li><p>透過Object key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fruitObj = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fruitObj[color] || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>透過Map</p><p>使用Map 數據結構，真正的(key, value) 鍵值對結構；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fruitColor = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    .set(<span class="string">'red'</span>, [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>])</span><br><span class="line">    .set(<span class="string">'yellow'</span>, [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>])</span><br><span class="line">    .set(<span class="string">'purple'</span>, [<span class="string">'grape'</span>, <span class="string">'plum'</span>])</span><br><span class="line">  <span class="keyword">return</span> fruitColor.get(color) || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>甚至可以透過filter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'strawberry'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'pineapple'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'plum'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">f</span> =&gt;</span> f.color == color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判斷數組所有元素是否都符合某個條件"><a href="#判斷數組所有元素是否都符合某個條件" class="headerlink" title="判斷數組所有元素是否都符合某個條件"></a>判斷數組所有元素是否都符合某個條件</h2><p>如果沒看這篇文章我可能會用filter</p><blockquote><p>全部的水果都要是紅色</p></blockquote><ol><li><p>透過外人監視</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>; <span class="comment">// 外人</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断条件：所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color === <span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用數組新特性every</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：所有水果都必须是红色</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判斷數組是否有某一項滿足條件"><a href="#判斷數組是否有某一項滿足條件" class="headerlink" title="判斷數組是否有某一項滿足條件"></a>判斷數組是否有某一項滿足條件</h2><blockquote><p>只需一種水果紅色</p></blockquote><p>使用some</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件：是否有红色水果 </span></span><br><span class="line"><span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br></pre></td></tr></table></figure><h2 id="函數默認參數"><a href="#函數默認參數" class="headerlink" title="函數默認參數"></a>函數默認參數</h2><ol><li><p>不知道有默認參數的設定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buyFruit = <span class="function">(<span class="params">fruit,amount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fruit)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  amount = amount || <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(amount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用默認</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buyFruit = <span class="function">(<span class="params">fruit,amount = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fruit)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(amount,<span class="string">'amount'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意!! : </p><blockquote><p>兩種方式不一樣，使用第二種只有undefined才是1</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buyFruit1(<span class="string">'apple'</span>, <span class="string">''</span>);  <span class="comment">// 1</span></span><br><span class="line">buyFruit1(<span class="string">'apple'</span>, <span class="literal">null</span>);  <span class="comment">// 1</span></span><br><span class="line">buyFruit1(<span class="string">'apple'</span>);  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>, <span class="string">''</span>);  <span class="comment">// ''</span></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>, <span class="literal">null</span>);  <span class="comment">//null </span></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;編寫高質量可維護的代碼之優化邏輯判斷&quot;&gt;&lt;a href=&quot;#編寫高質量可維護的代碼之優化邏輯判斷&quot; class=&quot;headerlink&quot; title=&quot;編寫高質量可維護的代碼之優化邏輯判斷&quot;&gt;&lt;/a&gt;編寫高質量可維護的代碼之優化邏輯判斷&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;這篇主要是看不同寫法，不一定真的好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/6859125809655840776&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/6859125809655840776&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;嵌套優化&quot;&gt;&lt;a href=&quot;#嵌套優化&quot; class=&quot;headerlink&quot; title=&quot;嵌套優化&quot;&gt;&lt;/a&gt;嵌套優化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;製造一個函數當他是紅色水果時打印出紅色水果，如果他是紅色水果數量又大於10打印數量大於10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;supply&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fruit, quantity&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; redFruits = [&lt;span class=&quot;string&quot;&gt;&#39;apple&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;strawberry&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cherry&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cranberries&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 条件 1: 水果存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fruit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 条件 2: 属于红色水果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(redFruits.includes(fruit)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;红色水果&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 条件 3: 水果数量大于 10 个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (quantity &amp;gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;数量大于 10 个&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;没有水果啦!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="juejin" scheme="https://s95050937.github.io/tags/juejin/"/>
    
  </entry>
  
  <entry>
    <title>JS30-D01 JavaScript Drum Kit</title>
    <link href="https://s95050937.github.io/JS05.html"/>
    <id>https://s95050937.github.io/JS05.html</id>
    <published>2020-08-06T17:44:10.000Z</published>
    <updated>2020-08-06T18:57:46.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-JavaScript-Drum-Kit"><a href="#01-JavaScript-Drum-Kit" class="headerlink" title="01 - JavaScript Drum Kit"></a>01 - JavaScript Drum Kit</h1><blockquote><p>本文的代碼是看了Alex大大的JS30系列並搭配一些自身想法完成有興趣可以去yt搜尋Alex宅幹嘛</p></blockquote><h2 id="最終程式碼"><a href="#最終程式碼" class="headerlink" title="最終程式碼"></a>最終程式碼</h2><iframe src="https://codepen.io/Wuuu4280/embed/NWNPNMx?theme-id=light&default-tab=html,result" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><a id="more"></a><blockquote><p>附註: 因為codepen沒有放入聲音資源所以點擊會沒有聲音</p></blockquote><h2 id="思考流程"><a href="#思考流程" class="headerlink" title="思考流程"></a>思考流程</h2><h3 id="核心目標"><a href="#核心目標" class="headerlink" title="核心目標:"></a>核心目標:</h3><blockquote><p>點擊會有鼓聲，放開即停</p></blockquote><p>解決: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">從滑鼠事件，配合DOM元素上設置的data-key獲取點擊的DOM以及audioDOM</span><br><span class="line">並利用audioDOM撥放聲音</span><br></pre></td></tr></table></figure><h3 id="其餘考量的因素"><a href="#其餘考量的因素" class="headerlink" title="其餘考量的因素:"></a>其餘考量的因素:</h3><ol><li><p>點了之後按鈕會亮，放開會按掉</p><p>解決: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用點擊獲得的DOM操作classList添加<span class="class"><span class="keyword">class</span>並透過<span class="title">mouseup</span>事件調用的<span class="title">function</span>移除<span class="title">class</span></span></span><br></pre></td></tr></table></figure></li><li><p>按住會一直響</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在撥聲音前先將要撥的audio.currentTime 設成 <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>按其他按鍵不會報錯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在使用DOM方法時先確定該DOM是否存在: </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">... </span><br><span class="line">    <span class="keyword">if</span> (clickedDOM) &#123;</span><br><span class="line">        clickedDOM.classList.add(<span class="string">'playing'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> ( audioClicked ) &#123;</span><br><span class="line">        audioClicked.currentTime = <span class="number">0</span></span><br><span class="line">        audioClicked.play()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finishHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">    <span class="keyword">if</span>( finishedDOM ) &#123;</span><br><span class="line">        finishedDOM.classList.remove(<span class="string">'playing'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="我複習了甚麼"><a href="#我複習了甚麼" class="headerlink" title="我複習了甚麼"></a>我複習了甚麼</h2><h3 id="1-立即執行函數"><a href="#1-立即執行函數" class="headerlink" title="1. 立即執行函數"></a>1. 立即執行函數</h3><p>用途: 避免寫的代碼汙染全部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// document.addEventListener('keyup', keyup)</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, playHandler)</span><br><span class="line">...</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure><h3 id="2-addEventListener"><a href="#2-addEventListener" class="headerlink" title="2. addEventListener"></a>2. addEventListener</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addEventListener(事件， 發生時執行的函數)</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, playHandler)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, finishHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 題外話</span></span><br><span class="line"><span class="comment">// 因為playHandler沒有傳入東西，所以傳入的會是事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finishHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// e 打印是事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-屬性選擇器"><a href="#3-屬性選擇器" class="headerlink" title="3. 屬性選擇器"></a>3. 屬性選擇器</h3><p>一個小坑: 非==是= </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clickedDOM = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key = "<span class="subst">$&#123;e.keyCode&#125;</span>"]`</span>)</span><br></pre></td></tr></table></figure><h3 id="4-classList"><a href="#4-classList" class="headerlink" title="4. classList"></a>4. classList</h3><p>用法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em.classList</span><br></pre></td></tr></table></figure><p>他的一些實用API</p><ol><li><p>移除 class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.classList.remove(<span class="string">"foo"</span>);</span><br></pre></td></tr></table></figure></li><li><p>增加class </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.classList.add(<span class="string">"anotherclass"</span>);</span><br><span class="line"><span class="comment">// 也可以一群</span></span><br><span class="line">div.classList.add(<span class="string">"foo"</span>,<span class="string">"bar"</span>);</span><br></pre></td></tr></table></figure></li><li><p>沒有就添加有就移除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.classList.toggle(<span class="string">"visible"</span>);</span><br><span class="line"></span><br><span class="line">i要小於<span class="number">10</span>才生效</span><br><span class="line">div.classList.toggle(<span class="string">"visible"</span>, i &lt; <span class="number">10</span> );</span><br></pre></td></tr></table></figure></li><li><p>元素是否有該class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.classList.contains(<span class="string">"foo"</span>) <span class="comment">// true or false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-audio-play-以及currentTime"><a href="#5-audio-play-以及currentTime" class="headerlink" title="5. audio play( )以及currentTime"></a>5. audio play( )以及currentTime</h3><p>撥放聲音，設定撥放時間</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01-JavaScript-Drum-Kit&quot;&gt;&lt;a href=&quot;#01-JavaScript-Drum-Kit&quot; class=&quot;headerlink&quot; title=&quot;01 - JavaScript Drum Kit&quot;&gt;&lt;/a&gt;01 - JavaScript Drum Kit&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文的代碼是看了Alex大大的JS30系列並搭配一些自身想法完成有興趣可以去yt搜尋Alex宅幹嘛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最終程式碼&quot;&gt;&lt;a href=&quot;#最終程式碼&quot; class=&quot;headerlink&quot; title=&quot;最終程式碼&quot;&gt;&lt;/a&gt;最終程式碼&lt;/h2&gt;&lt;iframe src=&quot;https://codepen.io/Wuuu4280/embed/NWNPNMx?theme-id=light&amp;default-tab=html,result&quot; width=&quot;100%&quot; height=&quot;300&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; allowfullscreen&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="JavaScript30" scheme="https://s95050937.github.io/categories/JavaScript30/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript30" scheme="https://s95050937.github.io/tags/JavaScript30/"/>
    
  </entry>
  
  <entry>
    <title>webapck 打包文件解析</title>
    <link href="https://s95050937.github.io/webpack01.html"/>
    <id>https://s95050937.github.io/webpack01.html</id>
    <published>2020-08-05T15:45:53.000Z</published>
    <updated>2020-08-05T15:47:16.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webapck-打包出的文件解析"><a href="#webapck-打包出的文件解析" class="headerlink" title="webapck 打包出的文件解析"></a>webapck 打包出的文件解析</h2><h3 id="原始程式碼"><a href="#原始程式碼" class="headerlink" title="原始程式碼"></a>原始程式碼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js的內容</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'HAHAHA'</span></span><br><span class="line"><span class="comment">// index.js的內容</span></span><br><span class="line"><span class="keyword">let</span> aExports  = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello"</span> + aExports);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="打包後程式碼"><a href="#打包後程式碼" class="headerlink" title="打包後程式碼"></a>打包後程式碼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">// 2.The module cache (定義了一個緩存)</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.the require function 配置了一個require方法(因為瀏覽器不能運行require)</span></span><br><span class="line">  <span class="comment">// 甚麼時候調用呢(27行會return)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123; <span class="comment">// 5."./src/index.js"傳入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if module is in cache (6.不在緩存中)</span></span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="comment">// 7.定義了一個新的module把入口模塊傳進來</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId,</span><br><span class="line">      l: <span class="literal">false</span>,</span><br><span class="line">      exports: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    <span class="comment">// 執行(call)並把下面這些傳入(跑到第39行)</span></span><br><span class="line">    modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line">    <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="comment">// 4.把index傳進來了</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./src/index.js"</span>); <span class="comment">//入口模塊</span></span><br><span class="line">&#125;)</span><br><span class="line">(&#123;   <span class="comment">// 1. 傳入一個對象給modules</span></span><br><span class="line">  <span class="string">"./src/a.js"</span>:  <span class="comment">// key </span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;   <span class="comment">//value</span></span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">"module.exports = 'HAHAHA'\r\n\n\n//# sourceURL=webpack:///./src/a.js?"</span>);</span><br><span class="line">      <span class="comment">// 9.最後跑到這的時候發現我們把module.exports 定義成了'HAHAHA'，因此回到第30行回傳了一個module.exports給aExports然後回到8.aExports  = module.exports 就是HAHAHA並執行console.log(\"Hello\" + aExports);n所以生成出HelloHAHAHA</span></span><br><span class="line">    &#125;),</span><br><span class="line">  <span class="string">"./src/index.js"</span>:</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">"let aExports  = __webpack_require__(/*! ./a */ \"./src/a.js\");\r\nconsole.log(\"Hello\" + aExports);\r\n\r\n\n\n//# sourceURL=webpack:///./src/index.js?"</span>); </span><br><span class="line">      <span class="comment">// 8. __webpack_require__(/*! ./a */ \"./src/a.js\") </span></span><br><span class="line">        <span class="comment">//執行了 __webpack_require__("./src/a.js\")，因為遞歸原因所以又跑了上面跑過的流程</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自"><a href="#自" class="headerlink" title="自"></a>自</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webapck-打包出的文件解析&quot;&gt;&lt;a href=&quot;#webapck-打包出的文件解析&quot; class=&quot;headerlink&quot; title=&quot;webapck 打包出的文件解析&quot;&gt;&lt;/a&gt;webapck 打包出的文件解析&lt;/h2&gt;&lt;h3 id=&quot;原始程式碼&quot;&gt;&lt;a href=&quot;#原始程式碼&quot; class=&quot;headerlink&quot; title=&quot;原始程式碼&quot;&gt;&lt;/a&gt;原始程式碼&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a.js的內容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;string&quot;&gt;&#39;HAHAHA&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// index.js的內容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; aExports  = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./a&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt; + aExports);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://s95050937.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://s95050937.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>JS作用域&amp;值類型與引用類型</title>
    <link href="https://s95050937.github.io/JS04.html"/>
    <id>https://s95050937.github.io/JS04.html</id>
    <published>2020-08-05T15:40:22.000Z</published>
    <updated>2020-08-05T15:43:30.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01作用域以及值類型與引用類型"><a href="#01作用域以及值類型與引用類型" class="headerlink" title="01作用域以及值類型與引用類型"></a>01作用域以及值類型與引用類型</h1><h2 id="主題目-一"><a href="#主題目-一" class="headerlink" title="主題目(一)"></a>主題目(一)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">55</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num, foo</span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line">  foo = <span class="number">100</span></span><br><span class="line">  bar = <span class="number">100</span></span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baz(foo, bar)</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="詳解"><a href="#詳解" class="headerlink" title="詳解"></a>詳解</h3><p>上面那幾行都只是在聲明變量以及函數，直到第13行。</p><p>在執行時，開始在全局作用域查找，找到之後把foo以及bar傳入參數內部，相當於</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num = foo = <span class="number">55</span> , foo = bar = <span class="number">66</span></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果對值引用不懂得可以看我這篇文章</p><blockquote><p><a href="https://s95050937.github.io/2020/08/02/JS-post03/">https://s95050937.github.io/2020/08/02/JS-post03/</a></p></blockquote><p>從那篇文章可以知道絕對沒有一個變量指向另一個變量的情況發生，因此其實接下來對基本類型來說基本上不管怎麼改變引用的東西對外部也沒什麼改變，(當然引用對象會把指針賦值給他有可能藉由參數改變影響外部)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num, foo</span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span>  <span class="comment">// 因為已經有參數num當然改變的是num</span></span><br><span class="line">  foo = <span class="number">100</span>  <span class="comment">// 因為已經有參數foo當然改變的是foo</span></span><br><span class="line">  bar = <span class="number">100</span> <span class="comment">// 這裡可以發現在函數作用域裡面沒有bar因此到外部查找變量bar並改變他</span></span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">// 100</span></span><br><span class="line">  <span class="built_in">console</span>.log(foo); <span class="comment">// 100</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar); <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從上面第四行的註解可想而知外部已經發生改變</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 55</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p>可以發現若是函數沒有在自己的作用域定義自身的變量，很容易發生意想不到的結果</p><h2 id="主題目二"><a href="#主題目二" class="headerlink" title="主題目二"></a>主題目二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name </span><br><span class="line">  <span class="keyword">this</span>.age = age </span><br><span class="line">  <span class="keyword">this</span>.height  = height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  person.name = <span class="string">'foo'</span></span><br><span class="line">  person = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">15</span>, <span class="number">1.85</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> Student1 = <span class="keyword">new</span> Person(<span class="string">'Banny'</span>, <span class="number">25</span>, <span class="number">1.75</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Student1.name);</span><br><span class="line">baz(Student1)</span><br><span class="line"><span class="built_in">console</span>.log(Student1.name);</span><br></pre></td></tr></table></figure><h3 id="詳解-1"><a href="#詳解-1" class="headerlink" title="詳解"></a>詳解</h3><p>基本上如果有看過上面我寫的那篇文章這題也是秒解</p><p>當第12行對象創建，接下來打印Student1.name 可以很直觀的知道會打印出Banny，也與事實相符<br><img src="/images/JS04/1.png" alt=""></p><h4 id="第14行"><a href="#第14行" class="headerlink" title="第14行"></a>第14行</h4><p>調用函數並把該對象轉給了baz裡面的參數baz(注意這時候傳入的是引用對象)</p><p>到這裡先看一下是內部的值是怎麼引用的</p><p><img src="/images/JS04/2.png" alt=""></p><h4 id="第八行"><a href="#第八行" class="headerlink" title="第八行"></a>第八行</h4><p>改寫name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.name = <span class="string">'foo'</span></span><br></pre></td></tr></table></figure><p>可以發現下圖的Banny已經被改寫了，所以最後打印student.name才會變foo<br><img src="/images/JS04/3.png" alt=""></p><h4 id="第九行"><a href="#第九行" class="headerlink" title="第九行"></a>第九行</h4><p>改寫 person</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">15</span>, <span class="number">1.85</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/4.png" alt=""></p><h2 id="題外話-基本上開發也不會這樣搞"><a href="#題外話-基本上開發也不會這樣搞" class="headerlink" title="題外話(基本上開發也不會這樣搞)"></a>題外話(基本上開發也不會這樣搞)</h2><h3 id="函數若定義變量跟自身一樣情況"><a href="#函數若定義變量跟自身一樣情況" class="headerlink" title="函數若定義變量跟自身一樣情況"></a>函數若定義變量跟自身一樣情況</h3><p>例子: </p><p>如果用let的話會報錯: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bar = <span class="string">'haha'</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/5.png" alt=""></p><p>但假如用var則不會，甚至會改變參數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="string">'haha'</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01作用域以及值類型與引用類型&quot;&gt;&lt;a href=&quot;#01作用域以及值類型與引用類型&quot; class=&quot;headerlink&quot; title=&quot;01作用域以及值類型與引用類型&quot;&gt;&lt;/a&gt;01作用域以及值類型與引用類型&lt;/h1&gt;&lt;h2 id=&quot;主題目-一&quot;&gt;&lt;a href=&quot;#主題目-一&quot; class=&quot;headerlink&quot; title=&quot;主題目(一)&quot;&gt;&lt;/a&gt;主題目(一)&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num, foo&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  foo = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bar = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz(foo, bar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript面試" scheme="https://s95050937.github.io/tags/JavaScript%E9%9D%A2%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>CSS文字懸停</title>
    <link href="https://s95050937.github.io/CSS02.html"/>
    <id>https://s95050937.github.io/CSS02.html</id>
    <published>2020-08-04T09:20:51.000Z</published>
    <updated>2020-08-05T15:47:54.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文字懸停"><a href="#文字懸停" class="headerlink" title="文字懸停"></a>文字懸停</h1><blockquote><p>參考自 <a href="https://blog.csdn.net/qq449245884/article/details/105326186" target="_blank" rel="noopener">https://blog.csdn.net/qq449245884/article/details/105326186</a></p></blockquote><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/CSS02/1.gif" alt=""></p><a id="more"></a><h2 id="代碼"><a href="#代碼" class="headerlink" title="代碼"></a>代碼</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/400/300?random=1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>LoremLorem<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/400/300?random=2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>LoremLorem<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Arial"</span>, <span class="string">"Microsoft"</span>, <span class="string">"YaHei"</span>, <span class="string">"黑體"</span>, <span class="string">"宋體"</span>, <span class="string">"sans-serif"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">background-origin</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">1200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span> ;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 變成從上到下 */</span></span><br><span class="line">  <span class="comment">/* transform: scaleY(0);</span></span><br><span class="line"><span class="comment">  transform-origin: bottom; */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: left;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 變成從上到下 */</span></span><br><span class="line">  <span class="comment">/* transform: scaleY(1);</span></span><br><span class="line"><span class="comment">  transform-origin: top; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-box</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.content</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.content</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS講解"><a href="#CSS講解" class="headerlink" title="CSS講解"></a>CSS講解</h2><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><p>透過在box定義相對定位，並在content-box以及img-box設定絕對定位來讓它們重和</p><p><img src="/images/CSS02/2.png" alt=""></p><h3 id="重要代碼塊"><a href="#重要代碼塊" class="headerlink" title="重要代碼塊"></a>重要代碼塊</h3><ol><li><p>當hover到box時要讓content-box營造從左到右出現並在消失是從右邊收合</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="comment">/*將元素以開窗戶的方式顯現(如果沒有設定origin的話)*/</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">/*消失是在右邊*/</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: right; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="comment">/*將元素以開窗戶的方式顯現(如果沒有設定origin的話)*/</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">1</span>); </span><br><span class="line">  <span class="comment">/*消失是在左邊*/</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>當hover到的時候再讓文字塊顯現(使用opacity)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">設置延遲時間，讓用戶產生打開才顯現的感覺<span class="selector-class">.content-box</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/*設置延遲時間，讓用戶產生打開才顯現的感覺*/</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="number">0.3s</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文字懸停&quot;&gt;&lt;a href=&quot;#文字懸停&quot; class=&quot;headerlink&quot; title=&quot;文字懸停&quot;&gt;&lt;/a&gt;文字懸停&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;參考自 &lt;a href=&quot;https://blog.csdn.net/qq449245884/article/details/105326186&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq449245884/article/details/105326186&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/CSS02/1.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://s95050937.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://s95050937.github.io/tags/CSS/"/>
    
      <category term="CSS特效" scheme="https://s95050937.github.io/tags/CSS%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>HTTP與HTTPS</title>
    <link href="https://s95050937.github.io/HTTP-post08.html"/>
    <id>https://s95050937.github.io/HTTP-post08.html</id>
    <published>2020-08-03T15:57:32.000Z</published>
    <updated>2020-08-03T16:03:57.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP與HTTPS"><a href="#HTTP與HTTPS" class="headerlink" title="HTTP與HTTPS"></a>HTTP與HTTPS</h1><h2 id="HTTPS較安全"><a href="#HTTPS較安全" class="headerlink" title="HTTPS較安全"></a>HTTPS較安全</h2><p>因為HTTP並未進行加密，在網路上形同裸體，有人心懷不軌很容易被竊取或竄改</p><h3 id="情況一"><a href="#情況一" class="headerlink" title="情況一"></a>情況一</h3><p>假如今天小明以及小美在聊天，假如甚麼密碼都不設的話，訊息可能會被竄改</p><p><img src="/images/HTTP08/1.png" alt=""></p><a id="more"></a><h3 id="情況二"><a href="#情況二" class="headerlink" title="情況二"></a>情況二</h3><p>這次小名跟小美學聰明了，他們學會加密，討論出一個加密方式(比方說AES)並有一個密鑰可以解密，所以現在他們聊天變成這樣(對稱加密)</p><p><img src="/images/HTTP08/2.png" alt=""></p><p>但駭客當然也不是省油的燈，但是假如第一次通信就被攔截，則壞分子還是可以獲得密鑰</p><p><img src="/images/HTTP08/4.png" alt=""></p><h3 id="情況三"><a href="#情況三" class="headerlink" title="情況三"></a>情況三</h3><p>小美跟小明又變更聰明了，選擇了不對稱加密(有公鑰有私鑰，私鑰可以解開公鑰)</p><ol><li><p>小美先把公鑰傳遞給小明</p><p><img src="/images/HTTP08/5.png" alt=""></p></li><li><p>將之後進行對稱加密的keyB用公鑰keyA加密傳給小美，小美再通過自己的私鑰解密獲得key2，接下來就能和上次一樣用key2加密聊天</p><p><img src="/images/HTTP08/6.png" alt=""></p></li><li><p>結論: </p><blockquote><p>這樣假如壞分子獲得公鑰也沒有私鑰解密獲得key2</p></blockquote></li><li><p>但壞分子也不是省油的燈他想到下面這個方法</p><ol><li><p>獲得公鑰之後把它掉包成自己的公鑰<br><img src="/images/HTTP08/7.png" alt=""></p></li><li><p>之後小明利用key1加密keyB傳給小美val4，被壞分子攔截用key1的私鑰解密獲取keyB再用第一從小美獲取的公鑰keyA加密回傳給小美<br><img src="/images/HTTP08/8.png" alt=""></p></li></ol></li></ol><h3 id="開大招"><a href="#開大招" class="headerlink" title="開大招"></a>開大招</h3><p>透過權威機構獲得認證</p><ol><li><p>小美(服務端)先向權威機構申請證書<br><img src="/images/HTTP08/9.png" alt=""></p></li><li><p>小明之後想像小美聊天，小美就會給他證書並他會交給權威機構解密獲得證書<br><img src="/images/HTTP08/10.png" alt=""></p></li><li><p>獲得公鑰A的小明跟情況三一樣(第二點: 將之後進行對稱加密的keyB用公鑰keyA加密傳給小美，小美再通過自己的私鑰解密獲得key2，接下來就能和上次一樣用key2加密聊天)<br><img src="/images/HTTP08/11.png" alt=""></p></li><li><p>就算今天壞分子自行向權威機構獲取證，然後把證書掉包成自己的傳給小明，然而小明再向權威機構驗證證書的時候會發現，請求證書時的人並非小美(權威機構會自行認證)，理所當然不會通過</p><p>附註: 申請人並不能改寫，在申請時就會附上</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP與HTTPS&quot;&gt;&lt;a href=&quot;#HTTP與HTTPS&quot; class=&quot;headerlink&quot; title=&quot;HTTP與HTTPS&quot;&gt;&lt;/a&gt;HTTP與HTTPS&lt;/h1&gt;&lt;h2 id=&quot;HTTPS較安全&quot;&gt;&lt;a href=&quot;#HTTPS較安全&quot; class=&quot;headerlink&quot; title=&quot;HTTPS較安全&quot;&gt;&lt;/a&gt;HTTPS較安全&lt;/h2&gt;&lt;p&gt;因為HTTP並未進行加密，在網路上形同裸體，有人心懷不軌很容易被竊取或竄改&lt;/p&gt;
&lt;h3 id=&quot;情況一&quot;&gt;&lt;a href=&quot;#情況一&quot; class=&quot;headerlink&quot; title=&quot;情況一&quot;&gt;&lt;/a&gt;情況一&lt;/h3&gt;&lt;p&gt;假如今天小明以及小美在聊天，假如甚麼密碼都不設的話，訊息可能會被竄改&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/HTTP08/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP內容協商機制</title>
    <link href="https://s95050937.github.io/HTTP-post07.html"/>
    <id>https://s95050937.github.io/HTTP-post07.html</id>
    <published>2020-08-03T06:30:36.000Z</published>
    <updated>2020-08-03T06:32:01.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP內容協商機制"><a href="#HTTP內容協商機制" class="headerlink" title="HTTP內容協商機制"></a>HTTP內容協商機制</h1><h2 id="懶人包"><a href="#懶人包" class="headerlink" title="懶人包"></a>懶人包</h2><blockquote><p>比方說有很多不同的國家訪問同一個URL，法國人瀏覽需要加載法與資源，美國人需要加載英語，而解決這些就是透過內容協商機制</p></blockquote><h2 id="內容協商方式"><a href="#內容協商方式" class="headerlink" title="內容協商方式"></a>內容協商方式</h2><h3 id="客戶端驅動"><a href="#客戶端驅動" class="headerlink" title="客戶端驅動"></a>客戶端驅動</h3><blockquote><p>客戶端發起請求，服務器返回選項提供客戶端選擇後再二次請求</p></blockquote><p>優點: 容易實現，且較精準</p><p>缺點: 使用者初次訪問無法直接查看內容，且需要多請求一次</p><a id="more"></a><h3 id="服務器驅動-最廣泛"><a href="#服務器驅動-最廣泛" class="headerlink" title="服務器驅動(最廣泛)"></a>服務器驅動(最廣泛)</h3><blockquote><p>服務器檢查客戶端請求頭來決定提供甚麼資源</p></blockquote><p>優點: 可以直接查看內容， 具有近似匹配</p><p>缺點: 請求投如果沒有協代可能得用猜的提供資源</p><h3 id="透明協商"><a href="#透明協商" class="headerlink" title="透明協商"></a>透明協商</h3><blockquote><p>中間設備(通常為緩存代理)代表客戶端進行協商</p></blockquote><p>優點: 請求快速</p><p>缺點: 因為非標準HTTP方式，因此沒有標準規範</p><h2 id="服務器驅動"><a href="#服務器驅動" class="headerlink" title="服務器驅動"></a>服務器驅動</h2><h3 id="請求頭"><a href="#請求頭" class="headerlink" title="請求頭"></a>請求頭</h3><ol><li>Accept: 告知服務器發送何種媒體類型(mp3)</li><li>Accept-Language: 告知服務器發送何種語言</li><li>Accept-Charset: 告知服務器發送何種字符集(Unicode)</li><li>Accept-Encoding: 告知服務器發送何種編碼(UTF-8)</li></ol><h3 id="響應頭"><a href="#響應頭" class="headerlink" title="響應頭"></a>響應頭</h3><p>跟請求頭一一對應(跟上面索引一一對應)</p><ol><li>Content-Type</li><li>Content-Language</li><li>Content-Type</li><li>Content-Encoding</li></ol><h3 id="近似匹配-Q值"><a href="#近似匹配-Q值" class="headerlink" title="近似匹配(Q值)"></a>近似匹配(Q值)</h3><p>拿Accept-Language(所有都一樣)當例子</p><blockquote><p>Accept-Language: en;q=0.5,fr ;q=0.0, nl;q=1.0,tr;q=0.0</p></blockquote><p>​    註: nl:荷蘭語，en: 英語， fr: 法語, tr: 土耳其語</p><p>看q值大小(從0到1)，不是加起來等於1，只是代表優先級</p><p>比方說上面那個例子按照降冪排列會變下面</p><blockquote><p>Accept-Language: nl;q=1.0, en;q=0.5, fr ;q=0.0, tr;q=0.0</p></blockquote><p>假如客戶端請求西班牙語，但服務器端沒有西班牙語，因此服務器會找Q值最大，在此例優先優先發送荷蘭語(q=1.0)，假如服務器也沒有荷蘭語，則回傳英語(q=0.5) 。</p><p>假如服務器既沒有nl也沒有en會產生問題，所以服務器通常會設置默認回傳，即便沒有沒有上傳任何編號也會給默認的語言</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP內容協商機制&quot;&gt;&lt;a href=&quot;#HTTP內容協商機制&quot; class=&quot;headerlink&quot; title=&quot;HTTP內容協商機制&quot;&gt;&lt;/a&gt;HTTP內容協商機制&lt;/h1&gt;&lt;h2 id=&quot;懶人包&quot;&gt;&lt;a href=&quot;#懶人包&quot; class=&quot;headerlink&quot; title=&quot;懶人包&quot;&gt;&lt;/a&gt;懶人包&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;比方說有很多不同的國家訪問同一個URL，法國人瀏覽需要加載法與資源，美國人需要加載英語，而解決這些就是透過內容協商機制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;內容協商方式&quot;&gt;&lt;a href=&quot;#內容協商方式&quot; class=&quot;headerlink&quot; title=&quot;內容協商方式&quot;&gt;&lt;/a&gt;內容協商方式&lt;/h2&gt;&lt;h3 id=&quot;客戶端驅動&quot;&gt;&lt;a href=&quot;#客戶端驅動&quot; class=&quot;headerlink&quot; title=&quot;客戶端驅動&quot;&gt;&lt;/a&gt;客戶端驅動&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;客戶端發起請求，服務器返回選項提供客戶端選擇後再二次請求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;優點: 容易實現，且較精準&lt;/p&gt;
&lt;p&gt;缺點: 使用者初次訪問無法直接查看內容，且需要多請求一次&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>CSS文字波浪特效</title>
    <link href="https://s95050937.github.io/CSS01.html"/>
    <id>https://s95050937.github.io/CSS01.html</id>
    <published>2020-08-02T10:51:18.000Z</published>
    <updated>2021-10-14T04:32:19.164Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="daec943c0549c905128a7bfec3556b4e0e585d09d2bcb499985829ee7f714306"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">輸入密碼查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      密码：test
    
    </summary>
    
    
      <category term="CSS" scheme="https://s95050937.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://s95050937.github.io/tags/CSS/"/>
    
      <category term="CSS特效" scheme="https://s95050937.github.io/tags/CSS%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>JS之變量如何賦值</title>
    <link href="https://s95050937.github.io/JS-post03.html"/>
    <id>https://s95050937.github.io/JS-post03.html</id>
    <published>2020-08-02T07:48:25.000Z</published>
    <updated>2020-08-02T07:51:41.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS之變量如何賦值"><a href="#JS之變量如何賦值" class="headerlink" title="JS之變量如何賦值"></a>JS之變量如何賦值</h1><h2 id="變量有甚麼類型"><a href="#變量有甚麼類型" class="headerlink" title="變量有甚麼類型"></a>變量有甚麼類型</h2><ol><li><p>基本類型</p><blockquote><p>Undefine，String，Boolean，Null，Number</p></blockquote></li><li><p>引用類型</p><blockquote><p>Object包括它的延伸</p></blockquote></li></ol><h2 id="探討的問題"><a href="#探討的問題" class="headerlink" title="探討的問題"></a>探討的問題</h2><blockquote><p>當我們給變量賦值另一個變量，會發生發生甚麼</p></blockquote><p>注意: </p><p>​    在JS裡面，一個變量的值絕對不會指向另一個變量，而是指向內存</p><a id="more"></a><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="情況一-基本類型"><a href="#情況一-基本類型" class="headerlink" title="情況一: 基本類型"></a>情況一: 基本類型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br></pre></td></tr></table></figure><p>我們用num1這個變量初始化了num2，技術上來說會指向同一個內存地址</p><p><img src="/images/JS03/1.png" alt=""></p><p>如果今天對num2 進行操作，num1會因此改變嗎? </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br><span class="line">num2 + <span class="string">'bar'</span></span><br></pre></td></tr></table></figure><p>答案是不會的，因為基本類型是不可變的，所以num2會自行指向自身的內存地址</p><p><img src="/images/JS03/2.png" alt=""></p><p>這時候可以打印看看num1是否真的不會變</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br><span class="line">num2 + <span class="string">'bar'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num1:'</span>,num1)</span><br></pre></td></tr></table></figure><p>結果: </p><p><img src="/images/JS03/3.png" alt=""></p><h3 id="情況二-引用類型"><a href="#情況二-引用類型" class="headerlink" title="情況二: 引用類型"></a>情況二: 引用類型</h3><h4 id="預先知識"><a href="#預先知識" class="headerlink" title="預先知識"></a>預先知識</h4><p>引用類型賦值時的情況比較特別，會先引用到stack的某一個地址，再透過那個地址的值(heap的地址)查找到heap的值，比方說下面這樣</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">// false</span></span><br><span class="line">obj1.bar = <span class="number">2</span> <span class="comment">// 為了證明那兩個是不同(相同的話obj2會被obj1影響)</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123;foo: 1&#125;</span></span><br></pre></td></tr></table></figure><p>示意圖: </p><p><img src="/images/JS03/4.png" alt=""></p><h4 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h4><p>假如把一個變量用另一個變量賦值會怎麼樣?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1 <span class="comment">// 把obj1的內存地址給了他</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">// 這個就變成true</span></span><br><span class="line">obj1.bar = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// 這個也會受到obj1的操作影響</span></span><br></pre></td></tr></table></figure><h4 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h4><p><img src="/images/JS03/5.png" alt=""></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p>上面之所以沒變，是因為我們都是對heap進行操作，所以obj2當然會被影響，假設我對下面對象這樣操作結果就會不一樣!!!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1 <span class="comment">// 內存複製</span></span><br><span class="line"></span><br><span class="line">obj1.bar = <span class="number">2</span> <span class="comment">// 將heap內的值改變(因為obj2指向的stack部變所以也會受到影響)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 這裡非常關鍵，obj2在stack裡指向的地址發生改變，所以之後假設對這個對象操作，已經不是obj1指向的那個對象，obj1理所當然不會改變</span></span><br><span class="line">obj2 = &#123;  </span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj2.baz = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//&#123;foo: 1, bar: 2&#125; 沒有baz!!</span></span><br></pre></td></tr></table></figure><h4 id="示意圖-1"><a href="#示意圖-1" class="headerlink" title="示意圖"></a>示意圖</h4><ol><li><p>內存賦值完成(  let obj2 = obj1  )</p><p><img src="/images/JS03/6.png" alt=""></p></li><li><p>將heap內的值改變(  obj1.bar = 2  )</p><p><img src="/images/JS03/7.png" alt=""></p></li><li><p>obj2被賦予新的值(  obj2= {foo: 1,bar: 2}  )</p><p><img src="/images/JS03/8.png" alt=""></p></li><li><p>操作obj2對應的對象(  obj2.baz = 3  )</p><p><img src="/images/JS03/9.png" alt=""></p></li><li><p>結論</p><p>所以最後打印obj1的時候跑出來的是{foo:1, bar: 2} !!!!!</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS之變量如何賦值&quot;&gt;&lt;a href=&quot;#JS之變量如何賦值&quot; class=&quot;headerlink&quot; title=&quot;JS之變量如何賦值&quot;&gt;&lt;/a&gt;JS之變量如何賦值&lt;/h1&gt;&lt;h2 id=&quot;變量有甚麼類型&quot;&gt;&lt;a href=&quot;#變量有甚麼類型&quot; class=&quot;headerlink&quot; title=&quot;變量有甚麼類型&quot;&gt;&lt;/a&gt;變量有甚麼類型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基本類型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Undefine，String，Boolean，Null，Number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用類型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Object包括它的延伸&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;探討的問題&quot;&gt;&lt;a href=&quot;#探討的問題&quot; class=&quot;headerlink&quot; title=&quot;探討的問題&quot;&gt;&lt;/a&gt;探討的問題&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;當我們給變量賦值另一個變量，會發生發生甚麼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意: &lt;/p&gt;
&lt;p&gt;​    在JS裡面，一個變量的值絕對不會指向另一個變量，而是指向內存&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP緩存</title>
    <link href="https://s95050937.github.io/HTTP-post06.html"/>
    <id>https://s95050937.github.io/HTTP-post06.html</id>
    <published>2020-07-30T12:48:18.000Z</published>
    <updated>2020-07-30T12:53:55.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP緩存"><a href="#HTTP緩存" class="headerlink" title="HTTP緩存"></a>HTTP緩存</h1><ol><li><p>原因: </p><blockquote><p>頻繁請求非常類費流量，且一直刷新使用者體驗相當不佳</p></blockquote></li><li><p>緩存內容</p><blockquote><p>主要是一些靜態資源(比如CSS，JS)</p></blockquote></li></ol><h2 id="HTTP緩存頭部-後面會詳談"><a href="#HTTP緩存頭部-後面會詳談" class="headerlink" title="HTTP緩存頭部(後面會詳談)"></a>HTTP緩存頭部(後面會詳談)</h2><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>請求/響應頭，緩存控制<br><img src="/images/HTTP06/1.png" alt=""></p><a id="more"></a><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>表資源過期時間，與max-age共存情況下優先級較低</p><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><p>資源最新修改時間，由服務器響應給瀏覽器</p><h3 id="if-Modified-Since"><a href="#if-Modified-Since" class="headerlink" title="if-Modified-Since"></a>if-Modified-Since</h3><p>與Last-Modified一組，瀏覽器請求服務器協帶，服務器會比對這個確認版本是否更新</p><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><p>資源標籤，服務器響應給瀏覽器</p><h3 id="if-None-Match"><a href="#if-None-Match" class="headerlink" title="if-None-Match"></a>if-None-Match</h3><p>與Etag一組，瀏覽器請求服務器協帶，服務器會比對這個確認版本是否更新</p><h2 id="HTTP-緩存工作方式"><a href="#HTTP-緩存工作方式" class="headerlink" title="HTTP 緩存工作方式"></a>HTTP 緩存工作方式</h2><p>現在開始假設服務器在跟瀏覽器對話</p><h2 id="情境一-服務器與瀏覽器約定一個文件過期時間-Expires"><a href="#情境一-服務器與瀏覽器約定一個文件過期時間-Expires" class="headerlink" title="情境一 服務器與瀏覽器約定一個文件過期時間(Expires)"></a>情境一 服務器與瀏覽器約定一個文件過期時間(Expires)</h2><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧!</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><blockquote><p>Expires(透過響應頭)主要是約定一個過期時間，在過期時間前客戶端不會向服務器要資源</p></blockquote><h3 id="延伸情況二"><a href="#延伸情況二" class="headerlink" title="延伸情況二"></a>延伸情況二</h3><blockquote><p>上面情況，假如文件過期後，該文件在服務器端沒有更新，就代表客戶端請求道的文件不就一模一樣，因此出了情境二</p></blockquote><h2 id="情境二-在Expires基礎上再加上Last-Modified以及if-Modified-Since"><a href="#情境二-在Expires基礎上再加上Last-Modified以及if-Modified-Since" class="headerlink" title="情境二 在Expires基礎上再加上Last-Modified以及if-Modified-Since"></a>情境二 在Expires基礎上再加上Last-Modified以及if-Modified-Since</h2><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧! 啊還有我怕到時候文件沒更新你又要我找給你，所以我回傳一個Last-Modified喔</span><br></pre></td></tr></table></figure></li><li><p>瀏覽器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">好，那等文件過期後我再回傳if-Modified-Since給你喔，方便你核對版本</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結-1"><a href="#總結-1" class="headerlink" title="總結:"></a>總結:</h3><p>if-Modified-Since與Last-Modified回傳樣子是</p><p><img src="/images/HTTP06/2.png" alt=""></p><blockquote><ol><li>如果Expires還沒過期，則瀏覽器聰明的使用緩存</li><li>過期了之後，瀏覽器請求時附上if-Modified-Since， 假如文件在服務器端有更新，服務器回傳304 Not Modified</li></ol></blockquote><h3 id="延伸情況三"><a href="#延伸情況三" class="headerlink" title="延伸情況三"></a>延伸情況三</h3><blockquote><p>情況二可以發現，if-Modified-Since與Last-Modified這兩個最小單位是秒，如果今天更新的時間與那兩個相差不到1秒文件就不會更新。假如今天我服務器的平台過大，比方說FB，總是會有這個情況發生</p></blockquote><h2 id="情況三-在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match-然後在加入max-age"><a href="#情況三-在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match-然後在加入max-age" class="headerlink" title="情況三 在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match, 然後在加入max-age"></a>情況三 在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match, 然後在加入max-age</h2><ol><li>max-age優先度比Expires高，因此這裡expires會被取代，單位是秒，表幾秒後緩存過期</li><li>Etag與if-None_Match的關係就像是Last-Modified以及if-Modified-Since</li><li>所以在這個情況Expires與Last-Modified其實沒啥用</li></ol><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧! 啊還有我怕到時候文件沒更新你又要我找給你，所以我回傳一個Last-Modified喔，但好像不夠精準，算了我再傳一個Etag以及max-age給你好了</span><br></pre></td></tr></table></figure></li><li><p>瀏覽器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">好，既然有更精準的Etag以及max-age那我當然看這個囉，那我之後再回傳if-None-Match給你做核對版本</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結-2"><a href="#總結-2" class="headerlink" title="總結:"></a>總結:</h3><blockquote><p>到這裡瀏覽器已經可以精準確定緩存時間以及緩存文件是否相同</p></blockquote><h2 id="CDN緩存"><a href="#CDN緩存" class="headerlink" title="CDN緩存"></a>CDN緩存</h2><p>CDN自己也有緩存，並將緩存的靜態資源傳給瀏覽器，跟瀏覽器的行為也很像</p><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">別找我，找我老弟CDN吧</span><br></pre></td></tr></table></figure></li></ul><h2 id="瀏覽器對緩存的影響"><a href="#瀏覽器對緩存的影響" class="headerlink" title="瀏覽器對緩存的影響"></a>瀏覽器對緩存的影響</h2><p><img src="/images/HTTP06/3.png" alt=""></p><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP緩存&quot;&gt;&lt;a href=&quot;#HTTP緩存&quot; class=&quot;headerlink&quot; title=&quot;HTTP緩存&quot;&gt;&lt;/a&gt;HTTP緩存&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;原因: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;頻繁請求非常類費流量，且一直刷新使用者體驗相當不佳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;緩存內容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是一些靜態資源(比如CSS，JS)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;HTTP緩存頭部-後面會詳談&quot;&gt;&lt;a href=&quot;#HTTP緩存頭部-後面會詳談&quot; class=&quot;headerlink&quot; title=&quot;HTTP緩存頭部(後面會詳談)&quot;&gt;&lt;/a&gt;HTTP緩存頭部(後面會詳談)&lt;/h2&gt;&lt;h3 id=&quot;Cache-Control&quot;&gt;&lt;a href=&quot;#Cache-Control&quot; class=&quot;headerlink&quot; title=&quot;Cache-Control&quot;&gt;&lt;/a&gt;Cache-Control&lt;/h3&gt;&lt;p&gt;請求/響應頭，緩存控制&lt;br&gt;&lt;img src=&quot;/images/HTTP06/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP代理</title>
    <link href="https://s95050937.github.io/HTTP-post05.html"/>
    <id>https://s95050937.github.io/HTTP-post05.html</id>
    <published>2020-07-30T10:51:45.000Z</published>
    <updated>2020-07-30T10:54:46.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-代理"><a href="#HTTP-代理" class="headerlink" title="HTTP 代理"></a>HTTP 代理</h1><p>像是中間人的概念，對待裡來說既可以當服務端也可以當客戶端</p><h2 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h2><p><img src="/images/HTTP05/1.png" alt=""></p><a id="more"></a><h2 id="為何需要代理"><a href="#為何需要代理" class="headerlink" title="為何需要代理"></a>為何需要代理</h2><h3 id="1-抓包"><a href="#1-抓包" class="headerlink" title="1. 抓包"></a>1. 抓包</h3><p>能更好分析請求與安全測試</p><h3 id="2-FQ"><a href="#2-FQ" class="headerlink" title="2. FQ"></a>2. FQ</h3><p>俗稱的翻牆</p><p><img src="/images/HTTP05/2.png" alt=""></p><h3 id="3-匿名訪問"><a href="#3-匿名訪問" class="headerlink" title="3. 匿名訪問"></a>3. 匿名訪問</h3><p>刪除客戶端HTTP報文中的私人資料，比方說Cookie或是IP地址，</p><h3 id="4-過濾器"><a href="#4-過濾器" class="headerlink" title="4. 過濾器"></a>4. 過濾器</h3><p>比方說不希望孩童從網路上看到非該年齡層的內容，因此可以透過代理過慮服務端回傳的內容</p><p><img src="/images/HTTP05/3.png" alt=""></p><h2 id="補充-網關"><a href="#補充-網關" class="headerlink" title="補充(網關)"></a>補充(網關)</h2><p>又稱作協議轉換器，為資源與應用程序的黏合器</p><h3 id="示意圖-1"><a href="#示意圖-1" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="/images/HTTP05/4.png" alt=""></p><h3 id="講解"><a href="#講解" class="headerlink" title="講解"></a>講解</h3><p>從上圖可以發現和代理很類似，最關鍵的一點就是我們可以透過網關轉換協議，比方說上圖客戶端向網關發起HTTP協議，而後經過網觀象服務器端發起POP。</p><h3 id="分類"><a href="#分類" class="headerlink" title="分類"></a>分類</h3><p>Web在一端使用HTTP，另一端採用另一種協議可以這樣標示</p><ol><li><p>(/HTTP) 客戶端網關: 與客戶端採用其他協議，與服務端採用HTTP</p><p>記憶點: 叫客戶端網關可想像成他是幫客戶端轉換成HTTP協議的方式</p></li><li><p>(HTTP/) 服務端網關: 與服務端端採用其他協議，與客戶端採用HTTP</p><p>記憶點: 與客戶端相反</p></li></ol><h3 id="常見網關"><a href="#常見網關" class="headerlink" title="常見網關"></a>常見網關</h3><ol><li><p>(HTTP/ *) 服務器端Web網關</p></li><li><p>(HTTP/HTTPS) 服務器端安全網關</p><p> (將客戶端傳來的HTTP協議加密成HTTPS)</p></li><li><p>(HTTPS/HTTP) 客戶端安全網關 </p></li></ol><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP-代理&quot;&gt;&lt;a href=&quot;#HTTP-代理&quot; class=&quot;headerlink&quot; title=&quot;HTTP 代理&quot;&gt;&lt;/a&gt;HTTP 代理&lt;/h1&gt;&lt;p&gt;像是中間人的概念，對待裡來說既可以當服務端也可以當客戶端&lt;/p&gt;
&lt;h2 id=&quot;示意圖&quot;&gt;&lt;a href=&quot;#示意圖&quot; class=&quot;headerlink&quot; title=&quot;示意圖&quot;&gt;&lt;/a&gt;示意圖&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/HTTP05/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JS靜態與動態作用域</title>
    <link href="https://s95050937.github.io/JS-post02.html"/>
    <id>https://s95050937.github.io/JS-post02.html</id>
    <published>2020-07-29T14:27:49.000Z</published>
    <updated>2020-07-29T14:30:49.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS靜態與動態作用域"><a href="#JS靜態與動態作用域" class="headerlink" title="JS靜態與動態作用域"></a>JS靜態與動態作用域</h2><p>JavaScript使用的是靜態作用域，非動態這件事要先提前知道</p><h3 id="靜態作用域"><a href="#靜態作用域" class="headerlink" title="靜態作用域"></a>靜態作用域</h3><ol><li><p>懶人包 : </p><blockquote><p>會主動去尋找函數與變量定義時的狀況</p></blockquote></li><li><p>例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'靜態作用域'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">'動態作用域'</span></span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// '靜態作用域'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>分析 :</p><p>如果沒有作用域鏈的概念可以參考下面思維</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 前面都很正常的順順執行下來直到bar()</span><br><span class="line"><span class="number">2.</span> 當執行bar時候，會從全局作用域(因為bar執行的地方在全局作用域)裡面尋找bar聲明的地方</span><br><span class="line"><span class="number">3.</span> 進到bar函數作用域裡面(壓棧) <span class="comment">// 所在第六行</span></span><br><span class="line"><span class="number">4.</span> 在bar函數作用域裡面執行foo()，但在該函數作用域裡面沒有聲明foo，因此跑到上一層尋找，就是全局作用域</span><br><span class="line"><span class="number">5.</span> 找到foo聲明的地方，並進入foo作用域裡面</span><br><span class="line"><span class="number">5.</span> 試圖打印出a <span class="comment">// 此時所在是第四行</span></span><br><span class="line"><span class="number">6.</span> 因為foo作用域裡面沒有聲明變量a，因此又跑到全局作用域</span><br><span class="line"><span class="number">7.</span> 找到a(靜態作用域)並打印出來</span><br></pre></td></tr></table></figure></li></ol><h3 id="動態作用域"><a href="#動態作用域" class="headerlink" title="動態作用域"></a>動態作用域</h3><ol><li><p>懶人包: </p><blockquote><p>會到執行時的環境尋找</p></blockquote></li><li><p>例子(跟靜態相同): </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'靜態作用域'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">'動態作用域'</span></span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// '動態作用域'</span></span><br></pre></td></tr></table></figure><p>分析: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">前面五點都一模一樣直到第六點</span><br><span class="line"><span class="number">1.</span> 前面都很正常的順順執行下來直到bar()</span><br><span class="line"><span class="number">2.</span> 當執行bar時候，會從全局作用域(因為bar執行的地方在全局作用域)裡面尋找bar聲明的地方</span><br><span class="line"><span class="number">3.</span> 進到bar函數作用域裡面(壓棧) <span class="comment">// 所在第六行</span></span><br><span class="line"><span class="number">4.</span> 在bar函數作用域裡面執行foo()，但在該函數作用域裡面沒有聲明foo，因此跑到上一層尋找，就是全局作用域</span><br><span class="line"><span class="number">5.</span> 找到foo聲明的地方，並進入foo作用域裡面</span><br><span class="line"><span class="number">5.</span> 試圖打印出a </span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 這時候找不到a並不會跑到上一層作用域鏈查找，而是回到執行時的環境也就是第八行所在的作用域查找</span><br><span class="line"><span class="number">7.</span> 這時候就會發現a是動態作用域並打印出</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS靜態與動態作用域&quot;&gt;&lt;a href=&quot;#JS靜態與動態作用域&quot; class=&quot;headerlink&quot; title=&quot;JS靜態與動態作用域&quot;&gt;&lt;/a&gt;JS靜態與動態作用域&lt;/h2&gt;&lt;p&gt;JavaScript使用的是靜態作用域，非動態這件事要先提前知道&lt;/p&gt;
&lt;h3 id=&quot;靜態作用域&quot;&gt;&lt;a href=&quot;#靜態作用域&quot; class=&quot;headerlink&quot; title=&quot;靜態作用域&quot;&gt;&lt;/a&gt;靜態作用域&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;懶人包 : &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;會主動去尋找函數與變量定義時的狀況&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例子:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;靜態作用域&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;動態作用域&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar() &lt;span class=&quot;comment&quot;&gt;// &#39;靜態作用域&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
