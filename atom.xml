<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端技術紀錄</title>
  
  <subtitle>紀錄前端技術以及筆記的地方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://s95050937.github.io/"/>
  <updated>2021-10-14T04:20:43.556Z</updated>
  <id>https://s95050937.github.io/</id>
  
  <author>
    <name>wuuu4280</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>天然氣庫存</title>
    <link href="https://s95050937.github.io/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98.html"/>
    <id>https://s95050937.github.io/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98.html</id>
    <published>2021-10-14T04:13:56.542Z</published>
    <updated>2021-10-14T04:20:43.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天然氣庫存"><a href="#天然氣庫存" class="headerlink" title="天然氣庫存"></a>天然氣庫存</h1><h2 id="資料簡介"><a href="#資料簡介" class="headerlink" title="資料簡介"></a>資料簡介</h2><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211011152718321-16341850578945.png" alt="image-20211011152718321"></p><h2 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a>基本分析</h2><h3 id="星期圖"><a href="#星期圖" class="headerlink" title="星期圖"></a>星期圖</h3><p>將星期分散，weekDay2 表示星期二 PnL (星期一收盤進場)</p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009173718313-16341850597916.png" alt="image-20211009173718313"></p><h3 id="庫存公布值月份平均"><a href="#庫存公布值月份平均" class="headerlink" title="庫存公布值月份平均"></a>庫存公布值月份平均</h3><blockquote><p>庫存主要都是在夏天增加 冬天庫存一直減少</p></blockquote><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009173856292-16341850610887.png" alt="image-20211009173856292"></p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211011150929885-16341846977732.png" alt="image-20211011150929885"></p><h3 id="距離公告日進場"><a href="#距離公告日進場" class="headerlink" title="距離公告日進場"></a>距離公告日進場</h3><p>距離公告日 0 天指公告日前一天收盤進場公告日當天出場。通常公告日為星期四晚上 10.30 (台灣時間美國時間早上10.30)。距公告日一天不一定是禮拜五有可能禮拜五放假所以距公告日一天變成禮拜一。</p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009174141561-16341850655158.png" alt="image-20211009174141561"></p><h3 id="距離公告日與星期比較"><a href="#距離公告日與星期比較" class="headerlink" title="距離公告日與星期比較"></a>距離公告日與星期比較</h3><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009185441732-16341850669039.png" alt="image-20211009185441732"></p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009185458410-163418506841710.png" alt="image-20211009185458410"></p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009185508545-163418506981411.png" alt="image-20211009185508545"></p><img src="images/天然氣庫存/image-20211009185519353-163418507111612.png" alt="image-20211009185519353" style="zoom:67%;" /><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009185532791-163418507265013.png" alt="image-20211009185532791"></p><h2 id="距離公告日三天"><a href="#距離公告日三天" class="headerlink" title="距離公告日三天"></a>距離公告日三天</h2><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009195602098-163418507447114.png" alt="image-20211009195602098"></p><h3 id="月報酬熱圖"><a href="#月報酬熱圖" class="headerlink" title="月報酬熱圖"></a>月報酬熱圖</h3><blockquote><p>可以發現大部分報酬會落在 1～３月，以及八月十月</p></blockquote><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009195654100-163418507591415.png" alt="image-20211009195654100"></p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211009200019578-163418507726316.png" alt="image-20211009200019578"></p><h2 id="庫存預期比較"><a href="#庫存預期比較" class="headerlink" title="庫存預期比較"></a>庫存預期比較</h2><h3 id="庫存大於預期做多-庫存小於預期做空"><a href="#庫存大於預期做多-庫存小於預期做空" class="headerlink" title="庫存大於預期做多 庫存小於預期做空"></a>庫存大於預期做多 庫存小於預期做空</h3><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211010173949822-163418507873917.png" alt="image-20211010173949822"></p><h4 id="做空"><a href="#做空" class="headerlink" title="做空"></a>做空</h4><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211010174022488-163418507994518.png" alt="image-20211010174022488"></p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211010174032245-163418508119019.png" alt="image-20211010174032245"></p><h4 id="做多"><a href="#做多" class="headerlink" title="做多"></a>做多</h4><p>WeekDay 1 指星期一進場，星期二收盤出場，所以等價上面距離公告日三天的 WeekDay 2。</p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211010174944457-163418508253920.png" alt="image-20211010174944457"></p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211010174057923-163418508390621.png" alt="image-20211010174057923"></p><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211010174106432-163418508522922.png" alt="image-20211010174106432"></p><h2 id="天然氣估計"><a href="#天然氣估計" class="headerlink" title="天然氣估計"></a>天然氣估計</h2><h3 id="庫存最高減最低月平均"><a href="#庫存最高減最低月平均" class="headerlink" title="庫存最高減最低月平均"></a>庫存最高減最低月平均</h3><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211012162958476-16341847281693.png" alt="image-20211012162958476"></p><h1 id="單因子"><a href="#單因子" class="headerlink" title="單因子"></a>單因子</h1><h3 id="做多-1"><a href="#做多-1" class="headerlink" title="做多"></a>做多</h3><h4 id="明天距離公告日三天且為星期二"><a href="#明天距離公告日三天且為星期二" class="headerlink" title="明天距離公告日三天且為星期二"></a>明天距離公告日三天且為星期二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_condition[<span class="string">'明天距離公告日三天且為星期二'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'距公告日天數等級'</span>].shift(<span class="number">-1</span>) == <span class="number">4</span>) &amp; (</span><br><span class="line">    df_trade[<span class="string">'星期'</span>].shift(<span class="number">-1</span>) == <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014120338769.png" alt="image-20211014120338769"></p><h4 id="公告大於預期"><a href="#公告大於預期" class="headerlink" title="公告大於預期"></a>公告大於預期</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_condition[<span class="string">'公告大於預期'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'昨天公告減掉預期'</span>] &gt; <span class="number">0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014120351254.png" alt="image-20211014120351254"></p><h4 id="公告在區間裡面"><a href="#公告在區間裡面" class="headerlink" title="公告在區間裡面"></a>公告在區間裡面</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_condition[<span class="string">'公告在區間裡面'</span>] = (</span><br><span class="line">    (df_trade[<span class="string">'昨天公布值'</span>] &lt; df_trade[<span class="string">'昨天BN_SURVEY_HIGH'</span>]) &amp; (</span><br><span class="line">        df_trade[<span class="string">'昨天公布值'</span>] &gt; df_trade[<span class="string">'昨天BN_SURVEY_LOW'</span>])</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014120402577.png" alt="image-20211014120402577"></p><h3 id="做空-1"><a href="#做空-1" class="headerlink" title="做空"></a>做空</h3><h4 id="明天不為距離公告日三天且不為星期二"><a href="#明天不為距離公告日三天且不為星期二" class="headerlink" title="明天不為距離公告日三天且不為星期二"></a>明天不為距離公告日三天且不為星期二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_condition[<span class="string">'明天不為距離公告日三天且不為星期二'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'距公告日天數等級'</span>].shift(<span class="number">-1</span>) != <span class="number">4</span>) &amp; (</span><br><span class="line">    df_trade[<span class="string">'星期'</span>].shift(<span class="number">-1</span>) != <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014120412089.png" alt="image-20211014120412089"></p><h4 id="較去年同期高"><a href="#較去年同期高" class="headerlink" title="較去年同期高"></a>較去年同期高</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_condition[<span class="string">'較去年同期高'</span>] = (</span><br><span class="line">    (df_trade[<span class="string">'昨天公布值'</span>] - df_trade[<span class="string">'昨天去年公布值'</span>]) &gt; <span class="number">0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014120422861.png" alt="image-20211014120422861"></p><h4 id="公告小於預期"><a href="#公告小於預期" class="headerlink" title="公告小於預期"></a>公告小於預期</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df_condition[<span class="string">'公告小於預期'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'昨天公告減掉預期'</span>] &lt; <span class="number">0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014120433561.png" alt="image-20211014120433561"></p><h4 id="偏差跟去年同方向"><a href="#偏差跟去年同方向" class="headerlink" title="偏差跟去年同方向"></a>偏差跟去年同方向</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_condition[<span class="string">'偏差跟去年同方向'</span>] = (</span><br><span class="line">    ((df_trade[<span class="string">'昨天公告減掉預期'</span>] &lt; <span class="number">0</span>) &amp; (df_trade[<span class="string">'昨天去年公告減掉預期'</span>] &lt; <span class="number">0</span>)) |</span><br><span class="line">    ((df_trade[<span class="string">'昨天公告減掉預期'</span>] &gt; <span class="number">0</span>) &amp; (df_trade[<span class="string">'昨天去年公告減掉預期'</span>] &gt; <span class="number">0</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014120443232.png" alt="image-20211014120443232"></p><h1 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h1><h2 id="做多-2"><a href="#做多-2" class="headerlink" title="做多"></a>做多</h2><h3 id="01-距到期日加上庫存預期"><a href="#01-距到期日加上庫存預期" class="headerlink" title="01 距到期日加上庫存預期"></a>01 距到期日加上庫存預期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 近遠月</span></span><br><span class="line">df_trade[<span class="string">'做多交易'</span>] = <span class="number">0</span></span><br><span class="line">df_trade[<span class="string">'做多報酬'</span>] = df_trade[<span class="string">'RetWithoutCost(%)'</span>].shift(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">df_condition = pd.DataFrame(index=df_trade.index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df_condition[<span class="string">'公告大於預期'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'昨天公告減掉預期'</span>] &gt; <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">df_condition[<span class="string">'明天距離公告日三天且為星期二'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'距公告日天數等級'</span>].shift(<span class="number">-1</span>) == <span class="number">4</span>) &amp; (</span><br><span class="line">    df_trade[<span class="string">'星期'</span>].shift(<span class="number">-1</span>) == <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">condition = (</span><br><span class="line">    df_condition[<span class="string">'明天距離公告日三天且為星期二'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'公告大於預期'</span>]) </span><br><span class="line"></span><br><span class="line">df_trade.loc[condition, <span class="string">'做多交易'</span>] = <span class="number">1</span></span><br><span class="line">df_profit2 = df_trade[df_trade[<span class="string">'做多交易'</span>] == <span class="number">1</span>][<span class="string">'做多報酬'</span>]</span><br><span class="line">bt.plotCumProAndDD(df_profit2)</span><br><span class="line">bt.getReturnInfo(df_profit2)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211010180341586.png" alt="image-20211010180341586"></p><h3 id="02-公告值在區間且庫存大於預期"><a href="#02-公告值在區間且庫存大於預期" class="headerlink" title="02 公告值在區間且庫存大於預期"></a>02 公告值在區間且庫存大於預期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 近遠月</span></span><br><span class="line">df_trade[<span class="string">'做多交易'</span>] = <span class="number">0</span></span><br><span class="line">df_trade[<span class="string">'做多報酬'</span>] = df_trade[<span class="string">'RetWithoutCost(%)'</span>].shift(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">df_condition = pd.DataFrame(index=df_trade.index)</span><br><span class="line">df_condition[<span class="string">'放在最後用'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">df_condition[<span class="string">'公告在區間裡面'</span>] = (</span><br><span class="line">    (df_trade[<span class="string">'昨天公布值'</span>] &lt; df_trade[<span class="string">'昨天BN_SURVEY_HIGH'</span>]) &amp; (df_trade[<span class="string">'昨天公布值'</span>] &gt; df_trade[<span class="string">'昨天BN_SURVEY_LOW'</span>])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df_condition[<span class="string">'公告大於預期'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'昨天公告減掉預期'</span>] &gt; <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">condition = (</span><br><span class="line">    df_condition[<span class="string">'公告在區間裡面'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'公告大於預期'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'放在最後用'</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df_trade.loc[condition, <span class="string">'做多交易'</span>] = <span class="number">1</span></span><br><span class="line">df_profit2 = df_trade[df_trade[<span class="string">'做多交易'</span>] == <span class="number">1</span>][<span class="string">'做多報酬'</span>]</span><br><span class="line">bt.plotCumProAndDD(df_profit2, benchmark=df_trade[<span class="string">'2005-01-01'</span>:][<span class="string">'RetWithoutCost(%)'</span>].cumsum())</span><br><span class="line">bt.getReturnInfo(df_profit2)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211012150052252.png" alt="image-20211012150052252"></p><h3 id="03-公告值在區間且庫存大於預期加上隔天不為公告日"><a href="#03-公告值在區間且庫存大於預期加上隔天不為公告日" class="headerlink" title="03 公告值在區間且庫存大於預期加上隔天不為公告日"></a>03 公告值在區間且庫存大於預期加上隔天不為公告日</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 近遠月</span></span><br><span class="line">df_trade[<span class="string">'做多交易'</span>] = <span class="number">0</span></span><br><span class="line">df_trade[<span class="string">'做多報酬'</span>] = df_trade[<span class="string">'RetWithoutCost(%)'</span>].shift(<span class="number">-1</span>)</span><br><span class="line">df_trade[<span class="string">'做空報酬'</span>] = -df_trade[<span class="string">'RetWithoutCost(%)'</span>].shift(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">df_condition = pd.DataFrame(index=df_trade.index)</span><br><span class="line">df_condition[<span class="string">'放在最後用'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">df_condition[<span class="string">'公告在區間裡面'</span>] = (</span><br><span class="line">    (df_trade[<span class="string">'昨天公布值'</span>] &lt; df_trade[<span class="string">'昨天BN_SURVEY_HIGH'</span>]) &amp; (df_trade[<span class="string">'昨天公布值'</span>] &gt; df_trade[<span class="string">'昨天BN_SURVEY_LOW'</span>])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df_condition[<span class="string">'公告大於預期'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'昨天公告減掉預期'</span>] &gt; <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">df_condition[<span class="string">'明天距離公告日不為0'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'距公告日天數等級'</span>].shift(<span class="number">-1</span>) != <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">condition = (</span><br><span class="line">    df_condition[<span class="string">'明天距離公告日不為0'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'公告在區間裡面'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'公告大於預期'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'放在最後用'</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df_trade.loc[condition, <span class="string">'做多交易'</span>] = <span class="number">1</span></span><br><span class="line">df_profit2 = df_trade[df_trade[<span class="string">'做多交易'</span>] == <span class="number">1</span>][<span class="string">'做多報酬'</span>]</span><br><span class="line">bt.plotCumProAndDD(df_profit2, benchmark=df_trade[<span class="string">'2005-01-01'</span>:][<span class="string">'RetWithoutCost(%)'</span>].cumsum())</span><br><span class="line">bt.getReturnInfo(df_profit2)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211012150543745.png" alt="image-20211012150543745"></p><h2 id="做空-2"><a href="#做空-2" class="headerlink" title="做空"></a>做空</h2><h3 id="01-距離到期日-庫存預期-較去年同期"><a href="#01-距離到期日-庫存預期-較去年同期" class="headerlink" title="01 距離到期日 + 庫存預期 + 較去年同期"></a>01 距離到期日 + 庫存預期 + 較去年同期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 近遠月</span></span><br><span class="line">df_trade[<span class="string">'交易'</span>] = <span class="number">0</span></span><br><span class="line">df_trade[<span class="string">'做多報酬'</span>] = df_trade[<span class="string">'RetWithoutCost(%)'</span>].shift(<span class="number">-1</span>)</span><br><span class="line">df_trade[<span class="string">'做空報酬'</span>] = -df_trade[<span class="string">'RetWithoutCost(%)'</span>].shift(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">df_condition = pd.DataFrame(index=df_trade.index)</span><br><span class="line">df_condition[<span class="string">'放在最後用'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">df_condition[<span class="string">'較去年同期高'</span>] = (</span><br><span class="line">    (df_trade[<span class="string">'昨天公布值'</span>] - df_trade[<span class="string">'昨天去年公布值'</span>]) &gt; <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">df_condition[<span class="string">'明天不為距離公告日三天且不為星期二'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'距公告日天數等級'</span>].shift(<span class="number">-1</span>) != <span class="number">4</span>) &amp; (</span><br><span class="line">    df_trade[<span class="string">'星期'</span>].shift(<span class="number">-1</span>) != <span class="number">2</span>)</span><br><span class="line">df_condition[<span class="string">'公告小於預期'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'昨天公告減掉預期'</span>] &lt; <span class="number">0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">condition = (</span><br><span class="line">    df_condition[<span class="string">'明天不為距離公告日三天且不為星期二'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'較去年同期高'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'公告小於預期'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'放在最後用'</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df_trade.loc[condition, <span class="string">'交易'</span>] = <span class="number">1</span></span><br><span class="line">df_profit2 = df_trade[df_trade[<span class="string">'交易'</span>] == <span class="number">1</span>][<span class="string">'做空報酬'</span>]</span><br><span class="line">bt.plotCumProAndDD(df_profit2, benchmark=-df_trade[<span class="string">'2005-01-01'</span>:][<span class="string">'RetWithoutCost(%)'</span>].cumsum())</span><br><span class="line">bt.getReturnInfo(df_profit2)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211013002317754.png" alt="image-20211013002317754"></p><h3 id="02-公告小於預期-偏差跟去年同方向"><a href="#02-公告小於預期-偏差跟去年同方向" class="headerlink" title="02 公告小於預期 + 偏差跟去年同方向"></a>02 公告小於預期 + 偏差跟去年同方向</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df_condition = pd.DataFrame(index=df_trade.index)</span><br><span class="line"></span><br><span class="line">df_condition[<span class="string">'偏差跟去年同方向'</span>] = (</span><br><span class="line">    ((df_trade[<span class="string">'昨天公告減掉預期'</span>] &lt; <span class="number">0</span>) &amp; (df_trade[<span class="string">'昨天去年公告減掉預期'</span>] &lt; <span class="number">0</span>)) | </span><br><span class="line">    ((df_trade[<span class="string">'昨天公告減掉預期'</span>] &gt; <span class="number">0</span>) &amp; (df_trade[<span class="string">'昨天去年公告減掉預期'</span>] &gt; <span class="number">0</span>))</span><br><span class="line">)</span><br><span class="line">df_condition[<span class="string">'公告小於預期'</span>] = (</span><br><span class="line">    df_trade[<span class="string">'昨天公告減掉預期'</span>] &lt; <span class="number">0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">condition = (</span><br><span class="line">    df_condition[<span class="string">'偏差跟去年同方向'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'公告小於預期'</span>]) &amp; (</span><br><span class="line">    df_condition[<span class="string">'放在最後用'</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014093624735.png" alt="image-20211014093624735"></p><h2 id="多空合併"><a href="#多空合併" class="headerlink" title="多空合併"></a>多空合併</h2><h3 id="方法概覽"><a href="#方法概覽" class="headerlink" title="方法概覽"></a>方法概覽</h3><table><thead><tr><th></th><th>做多</th><th>做空</th></tr></thead><tbody><tr><td>01</td><td>距到期日加上庫存預期</td><td>距離到期日 + 庫存預期 + 較去年同期</td></tr><tr><td>02</td><td>公告值在區間且庫存大於預期</td><td>公告小於預期 + 偏差跟去年同方向</td></tr><tr><td>03</td><td>公告值在區間且庫存大於預期加上隔天不為公告日</td><td></td></tr></tbody></table><h3 id="挑選因子原因"><a href="#挑選因子原因" class="headerlink" title="挑選因子原因"></a>挑選因子原因</h3><p>做多</p><h3 id="做多-01-做空-01"><a href="#做多-01-做空-01" class="headerlink" title="做多 01 + 做空 01"></a>做多 01 + 做空 01</h3><blockquote><p>做多：公告值在區間且庫存大於預期加上隔天不為公告日</p><p>做空：距離到期日 + 庫存預期 + 較去年同期</p></blockquote><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014112100080.png" alt="image-20211014112100080"></p><h3 id="做多-01-做空-02"><a href="#做多-01-做空-02" class="headerlink" title="做多 01 + 做空 02"></a>做多 01 + 做空 02</h3><blockquote><p>做多：公告值在區間且庫存大於預期加上隔天不為公告日</p><p>做空：距離到期日 + 庫存預期 + 較去年同期</p></blockquote><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014112121366.png" alt="image-20211014112121366"></p><h3 id="做多-02-做空-01"><a href="#做多-02-做空-01" class="headerlink" title="做多 02 + 做空 01"></a>做多 02 + 做空 01</h3><blockquote><p>做多：公告值在區間且庫存大於預期加上隔天不為公告日</p><p>做空：距離到期日 + 庫存預期 + 較去年同期</p></blockquote><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014112130606.png" alt="image-20211014112130606"></p><h3 id="做多-02-做空-02"><a href="#做多-02-做空-02" class="headerlink" title="做多 02 + 做空 02"></a>做多 02 + 做空 02</h3><blockquote><p>做多：公告值在區間且庫存大於預期加上隔天不為公告日</p><p>做空：距離到期日 + 庫存預期 + 較去年同期</p></blockquote><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014112147872.png" alt="image-20211014112147872"></p><h3 id="做多-03-做空-01"><a href="#做多-03-做空-01" class="headerlink" title="做多 03 + 做空 01"></a>做多 03 + 做空 01</h3><blockquote><p>做多：公告值在區間且庫存大於預期加上隔天不為公告日</p><p>做空：距離到期日 + 庫存預期 + 較去年同期</p></blockquote><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014112202613.png" alt="image-20211014112202613"></p><h3 id="做多-03-做空-01-1"><a href="#做多-03-做空-01-1" class="headerlink" title="做多 03 + 做空 01"></a>做多 03 + 做空 01</h3><blockquote><p>做多：公告值在區間且庫存大於預期加上隔天不為公告日</p><p>做空：距離到期日 + 庫存預期 + 較去年同期</p></blockquote><p><img src="images/%E5%A4%A9%E7%84%B6%E6%B0%A3%E5%BA%AB%E5%AD%98/image-20211014112212287.png" alt="image-20211014112212287"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;天然氣庫存&quot;&gt;&lt;a href=&quot;#天然氣庫存&quot; class=&quot;headerlink&quot; title=&quot;天然氣庫存&quot;&gt;&lt;/a&gt;天然氣庫存&lt;/h1&gt;&lt;h2 id=&quot;資料簡介&quot;&gt;&lt;a href=&quot;#資料簡介&quot; class=&quot;headerlink&quot; title=&quot;資料簡介&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>this、apply、call、bind (轉載)</title>
    <link href="https://s95050937.github.io/juejin04.html"/>
    <id>https://s95050937.github.io/juejin04.html</id>
    <published>2020-08-14T08:38:36.000Z</published>
    <updated>2020-08-14T08:42:30.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this、apply、call、bind"><a href="#this、apply、call、bind" class="headerlink" title="this、apply、call、bind"></a>this、apply、call、bind</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903496253177863" target="_blank" rel="noopener">https://juejin.im/post/6844903496253177863</a></p></blockquote><h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><blockquote><p>this 永遠指向最後調用他的對象</p></blockquote><p>我常拿來判斷的想法</p><blockquote><p>看他是被當作對象內的方法調用還是全局函數</p></blockquote><p>直接來看例子比較好懂 </p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Mike'</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    name: <span class="string">'Mary'</span>,</span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.getName() <span class="comment">// 很明顯是Mary，因為this指向的是最後調用他的對象</span></span><br><span class="line"><span class="built_in">window</span>.foo.getName() <span class="comment">// 這也很明顯是Mary，因為會是最後調用的對象(即foo)</span></span><br><span class="line"><span class="keyword">let</span> bar = foo.getName <span class="comment">// 記住這是賦與內存地址給他，執行的時候並不會變成 window.foo.getName</span></span><br><span class="line">bar() <span class="comment">// Mike (window.bar())</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>這句超級重要</p><blockquote><p>// 記住這是賦與內存地址給他，執行的時候並不會變成 window.foo.getName</p></blockquote><p>題外話: </p><p>​    不知道大家有沒有發現我這裡第一行定義是用var來定義，因為如果用let 來定義的話，並不會變成全局變量(window.name)，還有這裡如果用嚴格模式會報錯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span> </span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Mike'</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    ... <span class="comment">// 底下都一樣</span></span><br></pre></td></tr></table></figure><p><img src="/images/juejin04/1.png" alt=""></p><h2 id="如何改變this指向"><a href="#如何改變this指向" class="headerlink" title="如何改變this指向"></a>如何改變this指向</h2><h3 id="箭頭函數-之後會開一篇出來講先pass"><a href="#箭頭函數-之後會開一篇出來講先pass" class="headerlink" title="箭頭函數(之後會開一篇出來講先pass)"></a>箭頭函數(之後會開一篇出來講先pass)</h3><p>可以避免很多坑this指向最後調用對象的坑，</p><blockquote><p>箭頭函數的this始終指向函數定義時的this，而非執行時。</p></blockquote><p>​    箭頭函數中沒有this綁定，必須通過查找作用域鏈來決定其值，如果箭頭函數被非箭頭函數包含，則this綁定的是最近一層非箭頭函數的this，否則，this為undefined</p><p>例子: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"windowsName"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是全局函數!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()</span><br><span class="line">    &#125;, <span class="number">100</span>);                <span class="comment">// Cherry </span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()</span><br><span class="line">    &#125;, <span class="number">100</span>);                <span class="comment">// 我是全局函數!(因為setTimeout會被window調用)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()</span><br></pre></td></tr></table></figure><p>注意: </p><blockquote><p><code>setTimeout</code>中使用普通函數，1秒後函數執行時，這時函數其實是在全局作用域執行</p></blockquote><h3 id="在函數內部使用-this-this"><a href="#在函數內部使用-this-this" class="headerlink" title="在函數內部使用 _this = this"></a>在函數內部使用 _this = this</h3><p>這裡用了一個很聰明的辦法，就是：</p><blockquote><p>利用_this變量去紀錄調用過程的this對象</p></blockquote><p>例子: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ar name = <span class="string">"windowsName"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"></span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>; <span class="comment">// 這裡在調用時會是a這個對象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;name: "Cherry", func1: ƒ, func2: ƒ&#125;</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      _this.func1() </span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()       <span class="comment">// Cherry</span></span><br></pre></td></tr></table></figure><p><img src="/images/juejin04/2.png" alt=""></p><h3 id="使用apply、call、bind"><a href="#使用apply、call、bind" class="headerlink" title="使用apply、call、bind"></a>使用apply、call、bind</h3><p>先來看例子晚點講原理</p><p>可以發現其實三個的用法幾乎一樣，只有bind要再執行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// apply</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.apply(a), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.call(a), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.bind(a)(), <span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()</span><br></pre></td></tr></table></figure><h2 id="apply、call、bind-區別"><a href="#apply、call、bind-區別" class="headerlink" title="apply、call、bind 區別"></a>apply、call、bind 區別</h2><h3 id="apply以及call差別"><a href="#apply以及call差別" class="headerlink" title="apply以及call差別"></a>apply以及call差別</h3><blockquote><p>基本上是沒差，只是傳遞參數apply是用array而call是分批傳入</p></blockquote><p>定義: </p><blockquote><p>fun.apply (thisArg，[argsArray])</p><p>fun.call (thisArg[, arg1[, arg2[, …]]])</p></blockquote><p>看起來有夠複雜，其實就是最上面講得那句。直接看例子就懂了</p><p>例子： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">    name : <span class="string">"Cherry"</span>,</span><br><span class="line">    fn : <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.apply(a,[<span class="number">1</span>,<span class="number">2</span>])     <span class="comment">// 3</span></span><br><span class="line">b.call(a,<span class="number">1</span>,<span class="number">2</span>)   <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="bind-和apply、call-區別"><a href="#bind-和apply、call-區別" class="headerlink" title="bind 和apply、call 區別"></a>bind 和apply、call 區別</h3><p>bind跟他們兩個的最大區別就是</p><blockquote><p>bind是創建函數，還需要手動調用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">    name : <span class="string">"Cherry"</span>,</span><br><span class="line">    fn : <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( a + b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.bind(a,<span class="number">1</span>,<span class="number">2</span>)()           <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;this、apply、call、bind&quot;&gt;&lt;a href=&quot;#this、apply、call、bind&quot; class=&quot;headerlink&quot; title=&quot;this、apply、call、bind&quot;&gt;&lt;/a&gt;this、apply、call、bind&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/6844903496253177863&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/6844903496253177863&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;this-的指向&quot;&gt;&lt;a href=&quot;#this-的指向&quot; class=&quot;headerlink&quot; title=&quot;this 的指向&quot;&gt;&lt;/a&gt;this 的指向&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;this 永遠指向最後調用他的對象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我常拿來判斷的想法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看他是被當作對象內的方法調用還是全局函數&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接來看例子比較好懂 &lt;/p&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;Mike&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; foo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &lt;span class=&quot;string&quot;&gt;&#39;Mary&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getName() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.getName() &lt;span class=&quot;comment&quot;&gt;// 很明顯是Mary，因為this指向的是最後調用他的對象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.foo.getName() &lt;span class=&quot;comment&quot;&gt;// 這也很明顯是Mary，因為會是最後調用的對象(即foo)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bar = foo.getName &lt;span class=&quot;comment&quot;&gt;// 記住這是賦與內存地址給他，執行的時候並不會變成 window.foo.getName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar() &lt;span class=&quot;comment&quot;&gt;// Mike (window.bar())&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="juejin" scheme="https://s95050937.github.io/tags/juejin/"/>
    
  </entry>
  
  <entry>
    <title>淺談instanceof 和typeof 的實現原理 (轉載)</title>
    <link href="https://s95050937.github.io/juejin03.html"/>
    <id>https://s95050937.github.io/juejin03.html</id>
    <published>2020-08-13T15:23:49.000Z</published>
    <updated>2020-08-13T16:54:34.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="淺談instanceof-和typeof-的實現原理-轉載"><a href="#淺談instanceof-和typeof-的實現原理-轉載" class="headerlink" title="淺談instanceof 和typeof 的實現原理 (轉載)"></a>淺談instanceof 和typeof 的實現原理 (轉載)</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903613584654344" target="_blank" rel="noopener">https://juejin.im/post/6844903613584654344</a></p></blockquote><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>一般被用於判斷一個變量的類型，可判斷七種類型</p><blockquote><p>number<code>,</code>string<code>,</code>object<code>,</code>boolean<code>,</code>function<code>,</code>undefined<code>,</code>symbol</p></blockquote><p>但有一個很麻煩的事情，只能知道那個變量是object不能知道更精確的類型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>  s === <span class="string">'object'</span>  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 還必須靠instanceof</span></span><br><span class="line">s <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>而且還有一個老梗，就是null也會顯示object (上古bug)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>所以typeof通常只被用來檢查基本類型</p><p>附註: 有一個不錯的方法</p><a id="more"></a><h3 id="不錯的方法-Object-prototype-toString-call-element"><a href="#不錯的方法-Object-prototype-toString-call-element" class="headerlink" title="不錯的方法: Object.prototype.toString.call(element)"></a>不錯的方法: Object.prototype.toString.call(element)</h3><p>可以利用這個做出更精銳的判斷</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>) <span class="comment">// "[object Number]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">'hi'</span>) <span class="comment">// "[object String]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;<span class="attr">a</span>:<span class="string">'hi'</span>&#125;) <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>,<span class="string">'a'</span>]) <span class="comment">// "[object Array]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) <span class="comment">// "[object Boolean]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="comment">// "[object Function]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) <span class="comment">// "[object Null]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">// "[object Undefined]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>(<span class="number">1</span>)) <span class="comment">// "[object Symbol]"</span></span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在此之前要先知道，JS在底層儲存變量的時候時候，會在變量的機器碼的低位1-3位存儲其類型信息(二進制)</p><blockquote><ul><li>000：對象</li><li>010：浮點數</li><li>100：字符串</li><li>110：布爾</li><li>1：整數</li></ul></blockquote><p>那我們也就知道為啥null會跑出object了，因為null的所有機器碼全部都是0</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>在講這個之前請務必先看以下文章，因為要先建立原型鍊的概念，講解也會用該文的概念去解釋</p><blockquote><p><a href="https://s95050937.github.io/zhihu02.html#more">https://s95050937.github.io/zhihu02.html#more</a></p></blockquote><h3 id="這做啥用的"><a href="#這做啥用的" class="headerlink" title="這做啥用的"></a>這做啥用的</h3><p>主要的作用是判斷一個實例是否屬於某種類型 (也可以是父類型或者祖先類型)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> Person()</span><br><span class="line">nicole <span class="keyword">instanceof</span> Person <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Programmer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Programmer.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> Programmer()</span><br><span class="line">nicole <span class="keyword">instanceof</span> person <span class="comment">// true</span></span><br><span class="line">nicole <span class="keyword">instanceof</span> Programmer <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="整理出來的偽代碼"><a href="#整理出來的偽代碼" class="headerlink" title="整理出來的偽代碼"></a>整理出來的偽代碼</h3><blockquote><p>其實就是先找右邊的prototype( 因為機器的prototype會等於實例的__ proto __ )</p><p> 然後跟左邊的p比較如果不相等就再往上找直到取到null 並 return false</p></blockquote><p>代碼: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不難就上面提到的概念看一下應該就會懂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new_instance_of</span>(<span class="params">leftVaule, rightVaule</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> rightProto = rightVaule.prototype; <span class="comment">// 取右表达式的 prototype 值</span></span><br><span class="line">    leftVaule = leftVaule.__proto__; <span class="comment">// 取左表达式的__proto__值</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftVaule === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftVaule === rightProto) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        leftVaule = leftVaule.__proto__ </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>既然知道到底再比較甚麼就好辦啦，直接看例子吧</p><h4 id="Object-instanceof-Object"><a href="#Object-instanceof-Object" class="headerlink" title="Object instanceof Object"></a>Object instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object 的 prototype 是 NO1</p><p>左邊: Object的p往上找會有NO1 </p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/1.png" alt=""></p><h3 id="Function-instanceof-Function"><a href="#Function-instanceof-Function" class="headerlink" title="Function instanceof Function"></a>Function instanceof Function</h3><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Function的prototype是NO2</p><p>左邊: Function的p往上就是NO2</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/2.png" alt=""></p><h4 id="Function-instanceof-Object"><a href="#Function-instanceof-Object" class="headerlink" title="Function instanceof Object"></a>Function instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object的prototype指向NO1</p><p>左邊: Function的p往上找會有NO1</p></blockquote><p>示意圖(因為右邊只需要prototype是啥，所以我在這裡沒畫Object的proto): </p><p><img src="/images/juejin03/3.png" alt=""></p><h4 id="Foo-instanceof-Foo"><a href="#Foo-instanceof-Foo" class="headerlink" title="Foo instanceof Foo"></a>Foo instanceof Foo</h4><p>答案: </p><blockquote><p>false</p></blockquote><p>解析: </p><blockquote><p>右邊: Foo.prototype 指向某一個prototype</p><p>左邊: 但Foo的p往上找找不到prototype</p></blockquote><p>示意圖:</p><p>附註: </p><p>​    因為右邊僅需要找到prototype所以我沒畫Foo.prototype.__ proto __指向誰(NO1)，從這張圖可以發現從Foo往上找會直接找到根本找不到 Foo.prototype，因此會返回 false</p><p><img src="/images/juejin03/4.png" alt=""></p><h4 id="Foo-instanceof-Object"><a href="#Foo-instanceof-Object" class="headerlink" title="Foo instanceof Object"></a>Foo instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object.prototype 指向NO1</p><p>左邊: Foo的p往上找找的到NO1</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/5.png" alt=""></p><h4 id="Foo-instanceof-Function"><a href="#Foo-instanceof-Function" class="headerlink" title="Foo instanceof Function"></a>Foo instanceof Function</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Function.prototype 指向NO2</p><p>左邊: 但Foo的p往上找的到NO2</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;淺談instanceof-和typeof-的實現原理-轉載&quot;&gt;&lt;a href=&quot;#淺談instanceof-和typeof-的實現原理-轉載&quot; class=&quot;headerlink&quot; title=&quot;淺談instanceof 和typeof 的實現原理 (轉載)&quot;&gt;&lt;/a&gt;淺談instanceof 和typeof 的實現原理 (轉載)&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/6844903613584654344&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/6844903613584654344&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;typeof&quot;&gt;&lt;a href=&quot;#typeof&quot; class=&quot;headerlink&quot; title=&quot;typeof&quot;&gt;&lt;/a&gt;typeof&lt;/h2&gt;&lt;p&gt;一般被用於判斷一個變量的類型，可判斷七種類型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;number&lt;code&gt;,&lt;/code&gt;string&lt;code&gt;,&lt;/code&gt;object&lt;code&gt;,&lt;/code&gt;boolean&lt;code&gt;,&lt;/code&gt;function&lt;code&gt;,&lt;/code&gt;undefined&lt;code&gt;,&lt;/code&gt;symbol&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但有一個很麻煩的事情，只能知道那個變量是object不能知道更精確的類型&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;  s === &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 還必須靠instanceof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;而且還有一個老梗，就是null也會顯示object (上古bug)&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以typeof通常只被用來檢查基本類型&lt;/p&gt;
&lt;p&gt;附註: 有一個不錯的方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="juejin" scheme="https://s95050937.github.io/tags/juejin/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 閉包</title>
    <link href="https://s95050937.github.io/JS06.html"/>
    <id>https://s95050937.github.io/JS06.html</id>
    <published>2020-08-12T12:24:05.000Z</published>
    <updated>2020-08-12T12:28:48.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-閉包"><a href="#JavaScript-閉包" class="headerlink" title="JavaScript 閉包"></a>JavaScript 閉包</h1><h2 id="先來看一下各個不同地方的閉包說法"><a href="#先來看一下各個不同地方的閉包說法" class="headerlink" title="先來看一下各個不同地方的閉包說法"></a>先來看一下各個不同地方的閉包說法</h2><blockquote><ol><li>你不知道的JavaScript: 當函數可以記住並訪問所在的詞法作用域時及形成閉包，即使不是在該函數的詞法作用域內</li><li>JavaScript高级程序设计: 閉包是指有權訪問令一個函數作用域變量的函數</li><li>MDN: 閉包（Closure）是函式以及該函式被宣告時所在的作用域環境（lexical environment）的組合。</li></ol></blockquote><h2 id="我自己的理解"><a href="#我自己的理解" class="headerlink" title="我自己的理解"></a>我自己的理解</h2><p>如果我們把函數作用域想像成一個書包(從外面是看不到裡面的內容的)，那閉包就很像一個超一流扒手，可以偷窺到你書包的東西。</p><a id="more"></a><h2 id="先來個情境"><a href="#先來個情境" class="headerlink" title="先來個情境"></a>先來個情境</h2><p>聲明一個背包函數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">package</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pencilCase = &#123;</span><br><span class="line">    <span class="string">'原子筆'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'橡皮擦'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'水壺'</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(pencilCase); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外界的人看起來會長怎樣(那整個黃黃的一塊講的艱澀一點就是package函數的詞法作用域)</p><p><img src="/images/JS06/1.png" alt=""></p><p>假設今天有一個扒手函數可以調用到鉛筆盒那就形成閉包(如同先前定義的)</p><p>附註: 這裡我對package裡面改寫成這樣:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">package</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pencilCase = &#123;</span><br><span class="line">    <span class="string">'原子筆'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'橡皮擦'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'水壺'</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getPencilCase() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(pencilCase);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之後扒手開扒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pickpocket = package() <span class="comment">// 通常函數執行完該作用域的東西就該銷毀了</span></span><br><span class="line">pickpocket.getPencilCase()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/2.png" alt=""><br>可以發現確實成功獲得書包裡面的鉛筆盒!!!!</p><h2 id="其實這跟棧內存有關"><a href="#其實這跟棧內存有關" class="headerlink" title="其實這跟棧內存有關"></a>其實這跟棧內存有關</h2><h3 id="擷取"><a href="#擷取" class="headerlink" title="擷取"></a>擷取</h3><blockquote><p><a href="https://juejin.im/post/6844904099771580423" target="_blank" rel="noopener">https://juejin.im/post/6844904099771580423</a></p></blockquote><blockquote><p>棧內存銷毀：</p><ul><li>全局棧內存：關掉頁面的時候才會銷毀</li><li>私有棧內存：<ul><li>1.一般情況下，函數只要執行完成，形成的私有棧內存就會被銷毀釋放掉（排除出現無限極遞歸、出現死循環的模式）</li><li>2.但是一旦棧內存中的某個東西（一般都是堆地址）被私有作用域以外的事物給佔用了，則當前私有棧內存不能立即被釋放銷毀（特點：私有作用域中的私有變量等信息也保留下來了=&gt;這種函數執行形成不能被釋放的私有棧內存，也叫做閉包）</li></ul></li></ul></blockquote><p>從上面兩個可以得出函數作用域裡面確實不會被立即銷毀</p><h3 id="到此我們可以知道"><a href="#到此我們可以知道" class="headerlink" title="到此我們可以知道"></a>到此我們可以知道</h3><blockquote><p>只要外面有任何事物佔據了私有作用域裡面的東西就會產生閉包(保存該函數作用域)</p></blockquote><p>所以其實我們要產生閉包的核心觀念是要讓外界竊聽到函數內部，這才是為何我們在函數內要return函數的原因(讓外界卡住內存)的原因</p><p>所以下面講幾個例子吧!</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="範例一-最基本閉包"><a href="#範例一-最基本閉包" class="headerlink" title="範例一 最基本閉包"></a>範例一 最基本閉包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baz</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = foo(<span class="number">5</span>) <span class="comment">// bar卡住了內存</span></span><br><span class="line">bar(<span class="number">4</span>) <span class="comment">// 這個4其實啥意義都沒有</span></span><br><span class="line">bar(<span class="number">5</span>) <span class="comment">// 這個5也沒啥意義</span></span><br></pre></td></tr></table></figure><p><img src="/images/JS06/3.png" alt=""></p><h3 id="改一下範例一看會長怎樣"><a href="#改一下範例一看會長怎樣" class="headerlink" title="改一下範例一看會長怎樣"></a>改一下範例一看會長怎樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baz</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar1 = foo(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> bar2 = foo(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">bar1()</span><br><span class="line">bar1()</span><br><span class="line"></span><br><span class="line">bar2()</span><br><span class="line">bar2()</span><br></pre></td></tr></table></figure><p>可以發現確實可以訪問到num，且我們這邊可以發現會產生不同的值，代表這兩個都會儲存內存，因此我們要小心使用，不然可能會一直浪費內存<br><img src="/images/JS06/4.png" alt=""></p><h3 id="還可以這樣"><a href="#還可以這樣" class="headerlink" title="還可以這樣"></a>還可以這樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  spy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">5</span>)</span><br><span class="line">spy()</span><br><span class="line">spy()</span><br><span class="line">spy()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/5.png" alt=""></p><h3 id="或是這樣"><a href="#或是這樣" class="headerlink" title="或是這樣"></a>或是這樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bar =&#123;</span><br><span class="line">    geta() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(a++);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baz1 = foo(<span class="number">2</span>)</span><br><span class="line">baz1.geta() </span><br><span class="line">baz1.geta()</span><br><span class="line"><span class="keyword">let</span> baz2 = foo(<span class="number">5</span>)</span><br><span class="line">baz2.geta()</span><br><span class="line">baz2.geta()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-閉包&quot;&gt;&lt;a href=&quot;#JavaScript-閉包&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 閉包&quot;&gt;&lt;/a&gt;JavaScript 閉包&lt;/h1&gt;&lt;h2 id=&quot;先來看一下各個不同地方的閉包說法&quot;&gt;&lt;a href=&quot;#先來看一下各個不同地方的閉包說法&quot; class=&quot;headerlink&quot; title=&quot;先來看一下各個不同地方的閉包說法&quot;&gt;&lt;/a&gt;先來看一下各個不同地方的閉包說法&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;你不知道的JavaScript: 當函數可以記住並訪問所在的詞法作用域時及形成閉包，即使不是在該函數的詞法作用域內&lt;/li&gt;
&lt;li&gt;JavaScript高级程序设计: 閉包是指有權訪問令一個函數作用域變量的函數&lt;/li&gt;
&lt;li&gt;MDN: 閉包（Closure）是函式以及該函式被宣告時所在的作用域環境（lexical environment）的組合。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;我自己的理解&quot;&gt;&lt;a href=&quot;#我自己的理解&quot; class=&quot;headerlink&quot; title=&quot;我自己的理解&quot;&gt;&lt;/a&gt;我自己的理解&lt;/h2&gt;&lt;p&gt;如果我們把函數作用域想像成一個書包(從外面是看不到裡面的內容的)，那閉包就很像一個超一流扒手，可以偷窺到你書包的東西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript面試" scheme="https://s95050937.github.io/tags/JavaScript%E9%9D%A2%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 世界万物诞生记 (原型鍊) (轉載)</title>
    <link href="https://s95050937.github.io/zhihu02.html"/>
    <id>https://s95050937.github.io/zhihu02.html</id>
    <published>2020-08-12T09:11:47.000Z</published>
    <updated>2020-08-13T16:52:32.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-世界万物诞生记-原型鍊-轉載"><a href="#JavaScript-世界万物诞生记-原型鍊-轉載" class="headerlink" title="JavaScript 世界万物诞生记 (原型鍊) (轉載)"></a>JavaScript 世界万物诞生记 (原型鍊) (轉載)</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/22989691" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22989691</a></p></blockquote><p>可以把prototype想像成那台機器會幹啥(有點像繼承會做的事情)</p><p>而<strong>proto</strong>(p) 則可以想像特性繼承(有點像繼承個性或是特徵)</p><p>看完全部再回來</p><blockquote><ol><li>比方說Object的prototype會是NO1是因為他在模仿神創造對象</li><li>Function是一台機器所以他被歸類在NO2(繼承NO2是機器的特性)，他會創造機器，因此他的prototype是NO2</li><li>機器會做甚麼是一定是根據prototype(Animal會吃跟移動，魚會游泳)</li><li>靜態特性則是proto(大家都是機器因此proto往上找必定會有NO2)</li></ol></blockquote><h2 id="最終圖"><a href="#最終圖" class="headerlink" title="最終圖"></a>最終圖</h2><p><img src="/images/zhihu02/1.png" alt=""></p><a id="more"></a><ol><li><p>起初JS世界只有null(只存在虛無)</p><p><img src="/images/zhihu02/2.png" alt=""></p></li></ol><ol start="2"><li><p>從無中誕生了神NO1</p><p><img src="/images/zhihu02/3.png" alt=""></p></li><li><p>神創造了Object機器開始生產Object(開始有生物)</p><p><img src="/images/zhihu02/4.png" alt=""></p></li><li><p>久了之後，他覺得只創造一些Object生物好像有點太單調了，於是用特徵分類出了創造String機器的String，創造Number機器的Number…</p><p><img src="/images/zhihu02/5.png" alt=""></p></li><li><p>他覺得這些機器不是也可以統整成一個機器嗎，於是創造了NO2代表了這個東西是機器</p><blockquote><p>題外話: 這些機器當然也像Object一樣也需要各自的模板對象，也就是它们的prototype属性指向的那个对象。显然它们的模板对象应该是继承自No. 1对象的，但後面太麻煩先暫時不記錄</p></blockquote><p><img src="/images/zhihu02/6.png" alt=""></p></li><li><p>造物者HEN滿意，有了Object機器創造Object，有String創造String。但她很快發現他缺少了一個關鍵，就是創造機器的機器！於是他創造了Function</p><blockquote><p>Function 是一台機器所以他的 p 是 NO2，他是根據NO2模板創造的，因此他的prototype也是NO2</p></blockquote><p><img src="/images/zhihu02/7.png" alt=""></p><p>一個很酷的事</p><blockquote><p>Object作为一个机器可以看做是有由Function制造出来的，而Function作为一个对象可以看做是由Object制造出来的。這就是雞生蛋還是蛋生雞</p></blockquote></li><li><p>這時候已經有函數可以創造機器(一個類的概念)，於是將可以創造那個類的機器稱為構造函數，可以讓該類做甚麼事情的稱為普通函數</p><p>比方說以下: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 構造函數</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bird</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> redBird = <span class="keyword">new</span> Bird(<span class="string">'#FF0000'</span>);</span><br><span class="line"><span class="comment">// 这是一台通过晃动鸟的翅膀，让鸟飞起来的简陋的机器(普通函數)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeBirdFly</span>(<span class="params">bird</span>) </span>&#123;</span><br><span class="line">    shakeBirdWing(bird);</span><br><span class="line">&#125;</span><br><span class="line">makeBirdFly(redBird);</span><br></pre></td></tr></table></figure></li><li><p>這裡有點複雜</p><ol><li><p>NO1覺得所有機器都都p都是NO2讓這個世界好像有點扁，且他發現機器跟機器有關係不能像之前一樣(第五點的圖片) ，比方說此圖，Fish跟Bird明明都是動物可是如果照圖這樣分看不出關係，而且他們的模板對象有重疊，有夠浪費空間</p><p><img src="/images/zhihu02/8.png" alt=""></p></li><li><p>於是NO1想到那我就讓Bird的模板對象繼承(p)自Animal的模板對象不就得了</p><p><img src="/images/zhihu02/9.png" alt=""></p></li><li><p>現在這樣好多了，世界變得有規律一些了，但發現機器跟機器之間還是沒啥關係(Fish機器，Aniaml機器，Bird機器看似都沒關係)，我們解決的只是他們的行為關係。</p><p><img src="/images/zhihu02/10.png" alt=""></p></li><li><p>其實很簡單用剛剛的方式就好</p><p><img src="/images/zhihu02/11.png" alt=""></p></li></ol></li><li><p>最終樣子</p><p><img src="/images/zhihu02/12.png" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-世界万物诞生记-原型鍊-轉載&quot;&gt;&lt;a href=&quot;#JavaScript-世界万物诞生记-原型鍊-轉載&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 世界万物诞生记 (原型鍊) (轉載)&quot;&gt;&lt;/a&gt;JavaScript 世界万物诞生记 (原型鍊) (轉載)&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22989691&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/22989691&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以把prototype想像成那台機器會幹啥(有點像繼承會做的事情)&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;proto&lt;/strong&gt;(p) 則可以想像特性繼承(有點像繼承個性或是特徵)&lt;/p&gt;
&lt;p&gt;看完全部再回來&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;比方說Object的prototype會是NO1是因為他在模仿神創造對象&lt;/li&gt;
&lt;li&gt;Function是一台機器所以他被歸類在NO2(繼承NO2是機器的特性)，他會創造機器，因此他的prototype是NO2&lt;/li&gt;
&lt;li&gt;機器會做甚麼是一定是根據prototype(Animal會吃跟移動，魚會游泳)&lt;/li&gt;
&lt;li&gt;靜態特性則是proto(大家都是機器因此proto往上找必定會有NO2)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最終圖&quot;&gt;&lt;a href=&quot;#最終圖&quot; class=&quot;headerlink&quot; title=&quot;最終圖&quot;&gt;&lt;/a&gt;最終圖&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/zhihu02/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="zhihu" scheme="https://s95050937.github.io/tags/zhihu/"/>
    
  </entry>
  
  <entry>
    <title>js隱式轉換相關知識(轉載)</title>
    <link href="https://s95050937.github.io/zhihu01.html"/>
    <id>https://s95050937.github.io/zhihu01.html</id>
    <published>2020-08-11T10:25:00.000Z</published>
    <updated>2020-08-11T10:28:23.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js隱式轉換相關知識"><a href="#js隱式轉換相關知識" class="headerlink" title="js隱式轉換相關知識"></a>js隱式轉換相關知識</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/38976424" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38976424</a></p></blockquote><h2 id="轉換"><a href="#轉換" class="headerlink" title="!轉換"></a>!轉換</h2><p><img src="/images/zhihu01/1.png" alt=""></p><p>轉換成Boolean然後取反，沒啥特別的</p><a id="more"></a><h2 id="轉換-1"><a href="#轉換-1" class="headerlink" title="== 轉換"></a>== 轉換</h2><h3 id="兩邊都是引用類型"><a href="#兩邊都是引用類型" class="headerlink" title="兩邊都是引用類型"></a>兩邊都是引用類型</h3><p>直接比較內存中的地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([]==[]) <span class="comment">//false，指针指向的地址不同</span></span><br></pre></td></tr></table></figure><h3 id="如果兩邊類型不一致，則兩邊都轉成number類型"><a href="#如果兩邊類型不一致，則兩邊都轉成number類型" class="headerlink" title="如果兩邊類型不一致，則兩邊都轉成number類型"></a><strong>如果兩邊類型不一致，則兩邊都轉成number類型</strong></h3><blockquote><p>引用類型先調用valueOf()方法，如果能轉成數字就OK</p><p>不能轉成數字的話，就調用toString()轉成字符串。</p><p>再轉換成數字</p></blockquote><p>一些例子</p><ol><li><pre><code class="js"><span class="keyword">var</span> a = <span class="string">'123'</span><span class="built_in">console</span>.log(a==<span class="literal">false</span>)  <span class="comment">//false,'123'转成数字是123,右侧转成数字是0,最终比较123==0</span><span class="built_in">console</span>.log(a == <span class="number">123</span>)  <span class="comment">//true,右边是数字，直接转换左右即可</span>&lt;!--￼<span class="number">1</span>--&gt;</code></pre></li><li><pre><code class="js"><span class="keyword">var</span> a = {} <span class="built_in">console</span>.log(a == <span class="number">1</span>)<span class="comment">//上面a==1在js解释引擎中的执行过程如下:</span><span class="comment">//a.valueOf()获取到的不是基本类型，调用a.toString()得到'[object Object]'</span><span class="string">'[object Object]'</span> == <span class="number">1</span>;<span class="comment">//两边类型不致，左侧转成数字</span><span class="literal">NaN</span> == <span class="number">1</span>;<span class="comment">//false,NaN跟任何类型比较都为false</span>&lt;!--￼<span class="number">2</span>--&gt;</code></pre></li></ol><p>思想構成:</p><blockquote><p><strong>一個中心(左右兩邊轉換成number為中心)，兩個基本點（轉換條件：1.類型不同時才轉換2.兩邊都是引用類型時直接比較地址），一國兩制(null、NaN、undefined使用一套製作，其它的使用另一套制度)</strong></p></blockquote><h2 id="大於或小於符"><a href="#大於或小於符" class="headerlink" title="大於或小於符"></a>大於或小於符</h2><blockquote><p><strong>字符串類型比較大小時，不進行類型轉換，而是逐位比較ascii碼</strong></p><p><strong>第1位不同則返回結果，否則繼續比較第2位，直到某一位不同為止</strong></p></blockquote><h2 id="號規則"><a href="#號規則" class="headerlink" title="+號規則"></a>+號規則</h2><p>+號運算符即可以對兩個數相加，也可以連接字符串，那如果是[1,2,3]+4這種情況下又會發生什麼呢？這就需要我們了解相應的規則，為了方便描述，我們把+號左側的值叫做A，右側的叫做B：</p><ol><li>如果A和B都是number類型，直接相加；</li><li>接下來看A或B中是否有一個是否為string類型，如果有，則將另一個也轉成字符串，然後連接；</li><li>既不是number,也不是string,則按如下規則轉換：<br>1.能轉換成數字，返回之<br>2.否則調用valueOf()，如果執行結果是基本類型，返回之；<br>3.否則調用toString()，如果執行結果是基礎類型，返回之；<br>4.無法得到原始值，拋異常。<br><img src="/images/zhihu01/2.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js隱式轉換相關知識&quot;&gt;&lt;a href=&quot;#js隱式轉換相關知識&quot; class=&quot;headerlink&quot; title=&quot;js隱式轉換相關知識&quot;&gt;&lt;/a&gt;js隱式轉換相關知識&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38976424&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/38976424&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;轉換&quot;&gt;&lt;a href=&quot;#轉換&quot; class=&quot;headerlink&quot; title=&quot;!轉換&quot;&gt;&lt;/a&gt;!轉換&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/zhihu01/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;轉換成Boolean然後取反，沒啥特別的&lt;/p&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="zhihu" scheme="https://s95050937.github.io/tags/zhihu/"/>
    
  </entry>
  
  <entry>
    <title>(譯) 送你 43 道 JavaScript 面试题 (轉載)</title>
    <link href="https://s95050937.github.io/juejin02.html"/>
    <id>https://s95050937.github.io/juejin02.html</id>
    <published>2020-08-10T13:14:22.000Z</published>
    <updated>2020-08-11T10:27:40.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="译-送你-43-道-JavaScript-面试题"><a href="#译-送你-43-道-JavaScript-面试题" class="headerlink" title="[译] 送你 43 道 JavaScript 面试题"></a>[译] 送你 43 道 JavaScript 面试题</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903869378461710" target="_blank" rel="noopener">https://juejin.im/post/6844903869378461710</a></p></blockquote><h2 id="第三題"><a href="#第三題" class="headerlink" title="第三題"></a>第三題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  radius: <span class="number">10</span>,</span><br><span class="line">  diameter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.radius * <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  perimeter: <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">shape.diameter()</span><br><span class="line">shape.perimeter()</span><br></pre></td></tr></table></figure><a id="more"></a><p>我的答案: </p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 and 62.83185307179586</span><br></pre></td></tr></table></figure></blockquote><p>正確答案</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 and NaN</span><br></pre></td></tr></table></figure></blockquote><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><blockquote><p>对于箭头函数，<code>this</code>关键字指向是它所在上下文（定义时的位置）的环境，与普通函数不同！ 这意味着当我们调用<code>perimeter</code>时，它不是指向<code>shape</code>对象，而是指其定义时的环境（window）。没有值<code>radius</code>属性，返回<code>undefined</code>。</p></blockquote><h2 id="第五題-我覺得滿酷的"><a href="#第五題-我覺得滿酷的" class="headerlink" title="第五題 (我覺得滿酷的)"></a>第五題 (我覺得滿酷的)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;</span><br><span class="line">  size: <span class="string">"small"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mouse = &#123;</span><br><span class="line">  name: <span class="string">"Mickey"</span>,</span><br><span class="line">  small: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">mouse[bird.size] <span class="comment">// true </span></span><br><span class="line">mouse[bird[<span class="string">"size"</span>]] <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="第七題-不會錯的小概念"><a href="#第七題-不會錯的小概念" class="headerlink" title="第七題(不會錯的小概念)"></a>第七題(不會錯的小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(b === c); <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因為b是對象，用===不會隱式轉型</span></span><br></pre></td></tr></table></figure><h2 id="第12題"><a href="#第12題" class="headerlink" title="第12題"></a>第12題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> Person(<span class="string">"Lydia"</span>, <span class="string">"Hallie"</span>);</span><br><span class="line"><span class="keyword">const</span> sarah = Person(<span class="string">"Sarah"</span>, <span class="string">"Smith"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lydia);</span><br><span class="line"><span class="built_in">console</span>.log(sarah);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>Person {firstName: “Lydia”, lastName: “Hallie”}<code>and</code>undefined</p></blockquote><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>new創造構造函數，然後sarah執行函數會定義全局的firstName以及lastName</p><h2 id="第16題"><a href="#第16題" class="headerlink" title="第16題"></a>第16題</h2><p>詭異的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonInfo</span>(<span class="params">one, two, three</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(one);</span><br><span class="line">  <span class="built_in">console</span>.log(two);</span><br><span class="line">  <span class="built_in">console</span>.log(three);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">"Lydia"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br></pre></td></tr></table></figure><p>答案</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">""</span>, <span class="string">"is"</span>, <span class="string">"years old"</span>] </span><br><span class="line">Lydia</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="第25題-小概念"><a href="#第25題-小概念" class="headerlink" title="第25題(小概念)"></a>第25題(小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">"one"</span>, <span class="attr">b</span>: <span class="string">"two"</span>, <span class="attr">a</span>: <span class="string">"three"</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>{ a: “three”, b: “two” }</p></blockquote><h2 id="第29題"><a href="#第29題" class="headerlink" title="第29題"></a>第29題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; </span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>456</p></blockquote><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>利用[??]， 記得裡面要設成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; <span class="comment">// 這樣會把他當成變量</span></span><br><span class="line"><span class="comment">// 如果要設定a對象鑑b的值 : a['b']</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;[object Object]: 123&#125;</span></span><br></pre></td></tr></table></figure><p>所以那一題其實是這樣</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; </span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;[object Object]: 123&#125;</span></span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;[object Object]: 456&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><h2 id="第35題-小概念"><a href="#第35題-小概念" class="headerlink" title="第35題(小概念)"></a>第35題(小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>); <span class="comment">// 因為是對象所以為真值</span></span><br></pre></td></tr></table></figure><h2 id="第43題"><a href="#第43題" class="headerlink" title="第43題"></a>第43題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([...<span class="string">"Lydia"</span>];)</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>[“L”, “y”, “d”, “i”, “a”]</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;译-送你-43-道-JavaScript-面试题&quot;&gt;&lt;a href=&quot;#译-送你-43-道-JavaScript-面试题&quot; class=&quot;headerlink&quot; title=&quot;[译] 送你 43 道 JavaScript 面试题&quot;&gt;&lt;/a&gt;[译] 送你 43 道 JavaScript 面试题&lt;/h1&gt;&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/6844903869378461710&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/6844903869378461710&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;第三題&quot;&gt;&lt;a href=&quot;#第三題&quot; class=&quot;headerlink&quot; title=&quot;第三題&quot;&gt;&lt;/a&gt;第三題&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; shape = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  radius: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  diameter() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.radius * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  perimeter: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI * &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.radius&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shape.diameter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shape.perimeter()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="juejin" scheme="https://s95050937.github.io/tags/juejin/"/>
    
  </entry>
  
  <entry>
    <title>juejin_編寫高質量可維護的代碼之優化邏輯判斷(轉載)</title>
    <link href="https://s95050937.github.io/juejin01.html"/>
    <id>https://s95050937.github.io/juejin01.html</id>
    <published>2020-08-10T09:04:22.000Z</published>
    <updated>2020-08-11T10:27:38.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="編寫高質量可維護的代碼之優化邏輯判斷"><a href="#編寫高質量可維護的代碼之優化邏輯判斷" class="headerlink" title="編寫高質量可維護的代碼之優化邏輯判斷"></a>編寫高質量可維護的代碼之優化邏輯判斷</h1><blockquote><p>這篇主要是看不同寫法，不一定真的好</p></blockquote><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6859125809655840776" target="_blank" rel="noopener">https://juejin.im/post/6859125809655840776</a></p></blockquote><h2 id="嵌套優化"><a href="#嵌套優化" class="headerlink" title="嵌套優化"></a>嵌套優化</h2><blockquote><p>製造一個函數當他是紅色水果時打印出紅色水果，如果他是紅色水果數量又大於10打印數量大於10</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">supply</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">    <span class="comment">// 条件 1: 水果存在</span></span><br><span class="line">    <span class="keyword">if</span>(fruit) &#123;</span><br><span class="line">        <span class="comment">// 条件 2: 属于红色水果</span></span><br><span class="line">        <span class="keyword">if</span>(redFruits.includes(fruit)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'红色水果'</span>);</span><br><span class="line">            <span class="comment">// 条件 3: 水果数量大于 10 个</span></span><br><span class="line">            <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'数量大于 10 个'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有水果啦!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>由於嵌套層級有三層，維護可能會很困難且不直觀，我們可以想辦法把嵌套變成一級</p><blockquote><p>附註: 個人覺得這個指示在提供想法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">supply</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有水果啦'</span>); <span class="comment">// 条件 1: 当 fruit 无效时，提前处理错误</span></span><br><span class="line">    <span class="keyword">if</span>(!redFruits.includes(fruit)) <span class="keyword">return</span>; <span class="comment">// 条件 2: 当不是红色水果时，提前 return</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'红色水果'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 条件 3: 水果数量大于 10 个</span></span><br><span class="line">    <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'数量大于 10 个'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多條件分支的優化處理"><a href="#多條件分支的優化處理" class="headerlink" title="多條件分支的優化處理"></a>多條件分支的優化處理</h2><blockquote><p>多種條件判斷</p></blockquote><ol><li><p>最直覺且最冗的寫法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据颜色选择水果</span></span><br><span class="line">  <span class="keyword">if</span>(color === <span class="string">'red'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>]; </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'yellow'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'purple'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用switch優化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">      <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">return</span> []  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="可讀性"><a href="#可讀性" class="headerlink" title="可讀性"></a>可讀性</h3><blockquote><p>這裡利用 return fruitObj[color] || []  創造else </p></blockquote><ol><li><p>透過Object key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fruitObj = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fruitObj[color] || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>透過Map</p><p>使用Map 數據結構，真正的(key, value) 鍵值對結構；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fruitColor = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    .set(<span class="string">'red'</span>, [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>])</span><br><span class="line">    .set(<span class="string">'yellow'</span>, [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>])</span><br><span class="line">    .set(<span class="string">'purple'</span>, [<span class="string">'grape'</span>, <span class="string">'plum'</span>])</span><br><span class="line">  <span class="keyword">return</span> fruitColor.get(color) || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>甚至可以透過filter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'strawberry'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'pineapple'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'plum'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">f</span> =&gt;</span> f.color == color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判斷數組所有元素是否都符合某個條件"><a href="#判斷數組所有元素是否都符合某個條件" class="headerlink" title="判斷數組所有元素是否都符合某個條件"></a>判斷數組所有元素是否都符合某個條件</h2><p>如果沒看這篇文章我可能會用filter</p><blockquote><p>全部的水果都要是紅色</p></blockquote><ol><li><p>透過外人監視</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>; <span class="comment">// 外人</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断条件：所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color === <span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用數組新特性every</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：所有水果都必须是红色</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判斷數組是否有某一項滿足條件"><a href="#判斷數組是否有某一項滿足條件" class="headerlink" title="判斷數組是否有某一項滿足條件"></a>判斷數組是否有某一項滿足條件</h2><blockquote><p>只需一種水果紅色</p></blockquote><p>使用some</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件：是否有红色水果 </span></span><br><span class="line"><span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br></pre></td></tr></table></figure><h2 id="函數默認參數"><a href="#函數默認參數" class="headerlink" title="函數默認參數"></a>函數默認參數</h2><ol><li><p>不知道有默認參數的設定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buyFruit = <span class="function">(<span class="params">fruit,amount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fruit)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  amount = amount || <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(amount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用默認</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buyFruit = <span class="function">(<span class="params">fruit,amount = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fruit)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(amount,<span class="string">'amount'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意!! : </p><blockquote><p>兩種方式不一樣，使用第二種只有undefined才是1</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buyFruit1(<span class="string">'apple'</span>, <span class="string">''</span>);  <span class="comment">// 1</span></span><br><span class="line">buyFruit1(<span class="string">'apple'</span>, <span class="literal">null</span>);  <span class="comment">// 1</span></span><br><span class="line">buyFruit1(<span class="string">'apple'</span>);  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>, <span class="string">''</span>);  <span class="comment">// ''</span></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>, <span class="literal">null</span>);  <span class="comment">//null </span></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;編寫高質量可維護的代碼之優化邏輯判斷&quot;&gt;&lt;a href=&quot;#編寫高質量可維護的代碼之優化邏輯判斷&quot; class=&quot;headerlink&quot; title=&quot;編寫高質量可維護的代碼之優化邏輯判斷&quot;&gt;&lt;/a&gt;編寫高質量可維護的代碼之優化邏輯判斷&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;這篇主要是看不同寫法，不一定真的好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;學習自(純紀錄自己學了甚麼，非營利)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/6859125809655840776&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/6859125809655840776&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;嵌套優化&quot;&gt;&lt;a href=&quot;#嵌套優化&quot; class=&quot;headerlink&quot; title=&quot;嵌套優化&quot;&gt;&lt;/a&gt;嵌套優化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;製造一個函數當他是紅色水果時打印出紅色水果，如果他是紅色水果數量又大於10打印數量大於10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;supply&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fruit, quantity&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; redFruits = [&lt;span class=&quot;string&quot;&gt;&#39;apple&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;strawberry&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cherry&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cranberries&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 条件 1: 水果存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fruit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 条件 2: 属于红色水果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(redFruits.includes(fruit)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;红色水果&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 条件 3: 水果数量大于 10 个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (quantity &amp;gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;数量大于 10 个&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;没有水果啦!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記)" scheme="https://s95050937.github.io/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E7%B4%80%E9%8C%84-%E9%9D%9E%E7%87%9F%E5%88%A9%EF%BC%8C%E5%83%85%E7%82%BA%E8%87%AA%E8%BA%AB%E6%95%B4%E7%90%86%E6%96%87%E7%AB%A0%E4%B9%8B%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="juejin" scheme="https://s95050937.github.io/tags/juejin/"/>
    
  </entry>
  
  <entry>
    <title>JS30-D01 JavaScript Drum Kit</title>
    <link href="https://s95050937.github.io/JS05.html"/>
    <id>https://s95050937.github.io/JS05.html</id>
    <published>2020-08-06T17:44:10.000Z</published>
    <updated>2020-08-06T18:57:46.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-JavaScript-Drum-Kit"><a href="#01-JavaScript-Drum-Kit" class="headerlink" title="01 - JavaScript Drum Kit"></a>01 - JavaScript Drum Kit</h1><blockquote><p>本文的代碼是看了Alex大大的JS30系列並搭配一些自身想法完成有興趣可以去yt搜尋Alex宅幹嘛</p></blockquote><h2 id="最終程式碼"><a href="#最終程式碼" class="headerlink" title="最終程式碼"></a>最終程式碼</h2><iframe src="https://codepen.io/Wuuu4280/embed/NWNPNMx?theme-id=light&default-tab=html,result" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><a id="more"></a><blockquote><p>附註: 因為codepen沒有放入聲音資源所以點擊會沒有聲音</p></blockquote><h2 id="思考流程"><a href="#思考流程" class="headerlink" title="思考流程"></a>思考流程</h2><h3 id="核心目標"><a href="#核心目標" class="headerlink" title="核心目標:"></a>核心目標:</h3><blockquote><p>點擊會有鼓聲，放開即停</p></blockquote><p>解決: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">從滑鼠事件，配合DOM元素上設置的data-key獲取點擊的DOM以及audioDOM</span><br><span class="line">並利用audioDOM撥放聲音</span><br></pre></td></tr></table></figure><h3 id="其餘考量的因素"><a href="#其餘考量的因素" class="headerlink" title="其餘考量的因素:"></a>其餘考量的因素:</h3><ol><li><p>點了之後按鈕會亮，放開會按掉</p><p>解決: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用點擊獲得的DOM操作classList添加<span class="class"><span class="keyword">class</span>並透過<span class="title">mouseup</span>事件調用的<span class="title">function</span>移除<span class="title">class</span></span></span><br></pre></td></tr></table></figure></li><li><p>按住會一直響</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在撥聲音前先將要撥的audio.currentTime 設成 <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>按其他按鍵不會報錯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在使用DOM方法時先確定該DOM是否存在: </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">... </span><br><span class="line">    <span class="keyword">if</span> (clickedDOM) &#123;</span><br><span class="line">        clickedDOM.classList.add(<span class="string">'playing'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> ( audioClicked ) &#123;</span><br><span class="line">        audioClicked.currentTime = <span class="number">0</span></span><br><span class="line">        audioClicked.play()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finishHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">    <span class="keyword">if</span>( finishedDOM ) &#123;</span><br><span class="line">        finishedDOM.classList.remove(<span class="string">'playing'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="我複習了甚麼"><a href="#我複習了甚麼" class="headerlink" title="我複習了甚麼"></a>我複習了甚麼</h2><h3 id="1-立即執行函數"><a href="#1-立即執行函數" class="headerlink" title="1. 立即執行函數"></a>1. 立即執行函數</h3><p>用途: 避免寫的代碼汙染全部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// document.addEventListener('keyup', keyup)</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, playHandler)</span><br><span class="line">...</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure><h3 id="2-addEventListener"><a href="#2-addEventListener" class="headerlink" title="2. addEventListener"></a>2. addEventListener</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addEventListener(事件， 發生時執行的函數)</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, playHandler)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, finishHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 題外話</span></span><br><span class="line"><span class="comment">// 因為playHandler沒有傳入東西，所以傳入的會是事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finishHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// e 打印是事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-屬性選擇器"><a href="#3-屬性選擇器" class="headerlink" title="3. 屬性選擇器"></a>3. 屬性選擇器</h3><p>一個小坑: 非==是= </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clickedDOM = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key = "<span class="subst">$&#123;e.keyCode&#125;</span>"]`</span>)</span><br></pre></td></tr></table></figure><h3 id="4-classList"><a href="#4-classList" class="headerlink" title="4. classList"></a>4. classList</h3><p>用法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em.classList</span><br></pre></td></tr></table></figure><p>他的一些實用API</p><ol><li><p>移除 class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.classList.remove(<span class="string">"foo"</span>);</span><br></pre></td></tr></table></figure></li><li><p>增加class </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.classList.add(<span class="string">"anotherclass"</span>);</span><br><span class="line"><span class="comment">// 也可以一群</span></span><br><span class="line">div.classList.add(<span class="string">"foo"</span>,<span class="string">"bar"</span>);</span><br></pre></td></tr></table></figure></li><li><p>沒有就添加有就移除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.classList.toggle(<span class="string">"visible"</span>);</span><br><span class="line"></span><br><span class="line">i要小於<span class="number">10</span>才生效</span><br><span class="line">div.classList.toggle(<span class="string">"visible"</span>, i &lt; <span class="number">10</span> );</span><br></pre></td></tr></table></figure></li><li><p>元素是否有該class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.classList.contains(<span class="string">"foo"</span>) <span class="comment">// true or false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-audio-play-以及currentTime"><a href="#5-audio-play-以及currentTime" class="headerlink" title="5. audio play( )以及currentTime"></a>5. audio play( )以及currentTime</h3><p>撥放聲音，設定撥放時間</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01-JavaScript-Drum-Kit&quot;&gt;&lt;a href=&quot;#01-JavaScript-Drum-Kit&quot; class=&quot;headerlink&quot; title=&quot;01 - JavaScript Drum Kit&quot;&gt;&lt;/a&gt;01 - JavaScript Drum Kit&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文的代碼是看了Alex大大的JS30系列並搭配一些自身想法完成有興趣可以去yt搜尋Alex宅幹嘛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最終程式碼&quot;&gt;&lt;a href=&quot;#最終程式碼&quot; class=&quot;headerlink&quot; title=&quot;最終程式碼&quot;&gt;&lt;/a&gt;最終程式碼&lt;/h2&gt;&lt;iframe src=&quot;https://codepen.io/Wuuu4280/embed/NWNPNMx?theme-id=light&amp;default-tab=html,result&quot; width=&quot;100%&quot; height=&quot;300&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; allowfullscreen&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="JavaScript30" scheme="https://s95050937.github.io/categories/JavaScript30/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript30" scheme="https://s95050937.github.io/tags/JavaScript30/"/>
    
  </entry>
  
  <entry>
    <title>webapck 打包文件解析</title>
    <link href="https://s95050937.github.io/webpack01.html"/>
    <id>https://s95050937.github.io/webpack01.html</id>
    <published>2020-08-05T15:45:53.000Z</published>
    <updated>2020-08-05T15:47:16.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webapck-打包出的文件解析"><a href="#webapck-打包出的文件解析" class="headerlink" title="webapck 打包出的文件解析"></a>webapck 打包出的文件解析</h2><h3 id="原始程式碼"><a href="#原始程式碼" class="headerlink" title="原始程式碼"></a>原始程式碼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js的內容</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'HAHAHA'</span></span><br><span class="line"><span class="comment">// index.js的內容</span></span><br><span class="line"><span class="keyword">let</span> aExports  = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello"</span> + aExports);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="打包後程式碼"><a href="#打包後程式碼" class="headerlink" title="打包後程式碼"></a>打包後程式碼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">// 2.The module cache (定義了一個緩存)</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.the require function 配置了一個require方法(因為瀏覽器不能運行require)</span></span><br><span class="line">  <span class="comment">// 甚麼時候調用呢(27行會return)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123; <span class="comment">// 5."./src/index.js"傳入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if module is in cache (6.不在緩存中)</span></span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="comment">// 7.定義了一個新的module把入口模塊傳進來</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId,</span><br><span class="line">      l: <span class="literal">false</span>,</span><br><span class="line">      exports: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    <span class="comment">// 執行(call)並把下面這些傳入(跑到第39行)</span></span><br><span class="line">    modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line">    <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="comment">// 4.把index傳進來了</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./src/index.js"</span>); <span class="comment">//入口模塊</span></span><br><span class="line">&#125;)</span><br><span class="line">(&#123;   <span class="comment">// 1. 傳入一個對象給modules</span></span><br><span class="line">  <span class="string">"./src/a.js"</span>:  <span class="comment">// key </span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;   <span class="comment">//value</span></span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">"module.exports = 'HAHAHA'\r\n\n\n//# sourceURL=webpack:///./src/a.js?"</span>);</span><br><span class="line">      <span class="comment">// 9.最後跑到這的時候發現我們把module.exports 定義成了'HAHAHA'，因此回到第30行回傳了一個module.exports給aExports然後回到8.aExports  = module.exports 就是HAHAHA並執行console.log(\"Hello\" + aExports);n所以生成出HelloHAHAHA</span></span><br><span class="line">    &#125;),</span><br><span class="line">  <span class="string">"./src/index.js"</span>:</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">"let aExports  = __webpack_require__(/*! ./a */ \"./src/a.js\");\r\nconsole.log(\"Hello\" + aExports);\r\n\r\n\n\n//# sourceURL=webpack:///./src/index.js?"</span>); </span><br><span class="line">      <span class="comment">// 8. __webpack_require__(/*! ./a */ \"./src/a.js\") </span></span><br><span class="line">        <span class="comment">//執行了 __webpack_require__("./src/a.js\")，因為遞歸原因所以又跑了上面跑過的流程</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自"><a href="#自" class="headerlink" title="自"></a>自</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webapck-打包出的文件解析&quot;&gt;&lt;a href=&quot;#webapck-打包出的文件解析&quot; class=&quot;headerlink&quot; title=&quot;webapck 打包出的文件解析&quot;&gt;&lt;/a&gt;webapck 打包出的文件解析&lt;/h2&gt;&lt;h3 id=&quot;原始程式碼&quot;&gt;&lt;a href=&quot;#原始程式碼&quot; class=&quot;headerlink&quot; title=&quot;原始程式碼&quot;&gt;&lt;/a&gt;原始程式碼&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a.js的內容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;string&quot;&gt;&#39;HAHAHA&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// index.js的內容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; aExports  = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./a&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt; + aExports);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://s95050937.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://s95050937.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>JS作用域&amp;值類型與引用類型</title>
    <link href="https://s95050937.github.io/JS04.html"/>
    <id>https://s95050937.github.io/JS04.html</id>
    <published>2020-08-05T15:40:22.000Z</published>
    <updated>2020-08-05T15:43:30.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01作用域以及值類型與引用類型"><a href="#01作用域以及值類型與引用類型" class="headerlink" title="01作用域以及值類型與引用類型"></a>01作用域以及值類型與引用類型</h1><h2 id="主題目-一"><a href="#主題目-一" class="headerlink" title="主題目(一)"></a>主題目(一)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">55</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num, foo</span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line">  foo = <span class="number">100</span></span><br><span class="line">  bar = <span class="number">100</span></span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baz(foo, bar)</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="詳解"><a href="#詳解" class="headerlink" title="詳解"></a>詳解</h3><p>上面那幾行都只是在聲明變量以及函數，直到第13行。</p><p>在執行時，開始在全局作用域查找，找到之後把foo以及bar傳入參數內部，相當於</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num = foo = <span class="number">55</span> , foo = bar = <span class="number">66</span></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果對值引用不懂得可以看我這篇文章</p><blockquote><p><a href="https://s95050937.github.io/2020/08/02/JS-post03/">https://s95050937.github.io/2020/08/02/JS-post03/</a></p></blockquote><p>從那篇文章可以知道絕對沒有一個變量指向另一個變量的情況發生，因此其實接下來對基本類型來說基本上不管怎麼改變引用的東西對外部也沒什麼改變，(當然引用對象會把指針賦值給他有可能藉由參數改變影響外部)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num, foo</span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span>  <span class="comment">// 因為已經有參數num當然改變的是num</span></span><br><span class="line">  foo = <span class="number">100</span>  <span class="comment">// 因為已經有參數foo當然改變的是foo</span></span><br><span class="line">  bar = <span class="number">100</span> <span class="comment">// 這裡可以發現在函數作用域裡面沒有bar因此到外部查找變量bar並改變他</span></span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">// 100</span></span><br><span class="line">  <span class="built_in">console</span>.log(foo); <span class="comment">// 100</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar); <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從上面第四行的註解可想而知外部已經發生改變</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 55</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p>可以發現若是函數沒有在自己的作用域定義自身的變量，很容易發生意想不到的結果</p><h2 id="主題目二"><a href="#主題目二" class="headerlink" title="主題目二"></a>主題目二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name </span><br><span class="line">  <span class="keyword">this</span>.age = age </span><br><span class="line">  <span class="keyword">this</span>.height  = height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  person.name = <span class="string">'foo'</span></span><br><span class="line">  person = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">15</span>, <span class="number">1.85</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> Student1 = <span class="keyword">new</span> Person(<span class="string">'Banny'</span>, <span class="number">25</span>, <span class="number">1.75</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Student1.name);</span><br><span class="line">baz(Student1)</span><br><span class="line"><span class="built_in">console</span>.log(Student1.name);</span><br></pre></td></tr></table></figure><h3 id="詳解-1"><a href="#詳解-1" class="headerlink" title="詳解"></a>詳解</h3><p>基本上如果有看過上面我寫的那篇文章這題也是秒解</p><p>當第12行對象創建，接下來打印Student1.name 可以很直觀的知道會打印出Banny，也與事實相符<br><img src="/images/JS04/1.png" alt=""></p><h4 id="第14行"><a href="#第14行" class="headerlink" title="第14行"></a>第14行</h4><p>調用函數並把該對象轉給了baz裡面的參數baz(注意這時候傳入的是引用對象)</p><p>到這裡先看一下是內部的值是怎麼引用的</p><p><img src="/images/JS04/2.png" alt=""></p><h4 id="第八行"><a href="#第八行" class="headerlink" title="第八行"></a>第八行</h4><p>改寫name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.name = <span class="string">'foo'</span></span><br></pre></td></tr></table></figure><p>可以發現下圖的Banny已經被改寫了，所以最後打印student.name才會變foo<br><img src="/images/JS04/3.png" alt=""></p><h4 id="第九行"><a href="#第九行" class="headerlink" title="第九行"></a>第九行</h4><p>改寫 person</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">15</span>, <span class="number">1.85</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/4.png" alt=""></p><h2 id="題外話-基本上開發也不會這樣搞"><a href="#題外話-基本上開發也不會這樣搞" class="headerlink" title="題外話(基本上開發也不會這樣搞)"></a>題外話(基本上開發也不會這樣搞)</h2><h3 id="函數若定義變量跟自身一樣情況"><a href="#函數若定義變量跟自身一樣情況" class="headerlink" title="函數若定義變量跟自身一樣情況"></a>函數若定義變量跟自身一樣情況</h3><p>例子: </p><p>如果用let的話會報錯: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bar = <span class="string">'haha'</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/5.png" alt=""></p><p>但假如用var則不會，甚至會改變參數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="string">'haha'</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01作用域以及值類型與引用類型&quot;&gt;&lt;a href=&quot;#01作用域以及值類型與引用類型&quot; class=&quot;headerlink&quot; title=&quot;01作用域以及值類型與引用類型&quot;&gt;&lt;/a&gt;01作用域以及值類型與引用類型&lt;/h1&gt;&lt;h2 id=&quot;主題目-一&quot;&gt;&lt;a href=&quot;#主題目-一&quot; class=&quot;headerlink&quot; title=&quot;主題目(一)&quot;&gt;&lt;/a&gt;主題目(一)&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num, foo&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  foo = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bar = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz(foo, bar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
      <category term="JavaScript面試" scheme="https://s95050937.github.io/tags/JavaScript%E9%9D%A2%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>CSS文字懸停</title>
    <link href="https://s95050937.github.io/CSS02.html"/>
    <id>https://s95050937.github.io/CSS02.html</id>
    <published>2020-08-04T09:20:51.000Z</published>
    <updated>2020-08-05T15:47:54.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文字懸停"><a href="#文字懸停" class="headerlink" title="文字懸停"></a>文字懸停</h1><blockquote><p>參考自 <a href="https://blog.csdn.net/qq449245884/article/details/105326186" target="_blank" rel="noopener">https://blog.csdn.net/qq449245884/article/details/105326186</a></p></blockquote><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/CSS02/1.gif" alt=""></p><a id="more"></a><h2 id="代碼"><a href="#代碼" class="headerlink" title="代碼"></a>代碼</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/400/300?random=1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>LoremLorem<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/400/300?random=2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>LoremLorem<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Arial"</span>, <span class="string">"Microsoft"</span>, <span class="string">"YaHei"</span>, <span class="string">"黑體"</span>, <span class="string">"宋體"</span>, <span class="string">"sans-serif"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">background-origin</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">1200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span> ;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 變成從上到下 */</span></span><br><span class="line">  <span class="comment">/* transform: scaleY(0);</span></span><br><span class="line"><span class="comment">  transform-origin: bottom; */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: left;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 變成從上到下 */</span></span><br><span class="line">  <span class="comment">/* transform: scaleY(1);</span></span><br><span class="line"><span class="comment">  transform-origin: top; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-box</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.content</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.content</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS講解"><a href="#CSS講解" class="headerlink" title="CSS講解"></a>CSS講解</h2><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><p>透過在box定義相對定位，並在content-box以及img-box設定絕對定位來讓它們重和</p><p><img src="/images/CSS02/2.png" alt=""></p><h3 id="重要代碼塊"><a href="#重要代碼塊" class="headerlink" title="重要代碼塊"></a>重要代碼塊</h3><ol><li><p>當hover到box時要讓content-box營造從左到右出現並在消失是從右邊收合</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="comment">/*將元素以開窗戶的方式顯現(如果沒有設定origin的話)*/</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">/*消失是在右邊*/</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: right; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="comment">/*將元素以開窗戶的方式顯現(如果沒有設定origin的話)*/</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">1</span>); </span><br><span class="line">  <span class="comment">/*消失是在左邊*/</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>當hover到的時候再讓文字塊顯現(使用opacity)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">設置延遲時間，讓用戶產生打開才顯現的感覺<span class="selector-class">.content-box</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/*設置延遲時間，讓用戶產生打開才顯現的感覺*/</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="number">0.3s</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文字懸停&quot;&gt;&lt;a href=&quot;#文字懸停&quot; class=&quot;headerlink&quot; title=&quot;文字懸停&quot;&gt;&lt;/a&gt;文字懸停&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;參考自 &lt;a href=&quot;https://blog.csdn.net/qq449245884/article/details/105326186&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq449245884/article/details/105326186&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/CSS02/1.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://s95050937.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://s95050937.github.io/tags/CSS/"/>
    
      <category term="CSS特效" scheme="https://s95050937.github.io/tags/CSS%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>HTTP與HTTPS</title>
    <link href="https://s95050937.github.io/HTTP-post08.html"/>
    <id>https://s95050937.github.io/HTTP-post08.html</id>
    <published>2020-08-03T15:57:32.000Z</published>
    <updated>2020-08-03T16:03:57.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP與HTTPS"><a href="#HTTP與HTTPS" class="headerlink" title="HTTP與HTTPS"></a>HTTP與HTTPS</h1><h2 id="HTTPS較安全"><a href="#HTTPS較安全" class="headerlink" title="HTTPS較安全"></a>HTTPS較安全</h2><p>因為HTTP並未進行加密，在網路上形同裸體，有人心懷不軌很容易被竊取或竄改</p><h3 id="情況一"><a href="#情況一" class="headerlink" title="情況一"></a>情況一</h3><p>假如今天小明以及小美在聊天，假如甚麼密碼都不設的話，訊息可能會被竄改</p><p><img src="/images/HTTP08/1.png" alt=""></p><a id="more"></a><h3 id="情況二"><a href="#情況二" class="headerlink" title="情況二"></a>情況二</h3><p>這次小名跟小美學聰明了，他們學會加密，討論出一個加密方式(比方說AES)並有一個密鑰可以解密，所以現在他們聊天變成這樣(對稱加密)</p><p><img src="/images/HTTP08/2.png" alt=""></p><p>但駭客當然也不是省油的燈，但是假如第一次通信就被攔截，則壞分子還是可以獲得密鑰</p><p><img src="/images/HTTP08/4.png" alt=""></p><h3 id="情況三"><a href="#情況三" class="headerlink" title="情況三"></a>情況三</h3><p>小美跟小明又變更聰明了，選擇了不對稱加密(有公鑰有私鑰，私鑰可以解開公鑰)</p><ol><li><p>小美先把公鑰傳遞給小明</p><p><img src="/images/HTTP08/5.png" alt=""></p></li><li><p>將之後進行對稱加密的keyB用公鑰keyA加密傳給小美，小美再通過自己的私鑰解密獲得key2，接下來就能和上次一樣用key2加密聊天</p><p><img src="/images/HTTP08/6.png" alt=""></p></li><li><p>結論: </p><blockquote><p>這樣假如壞分子獲得公鑰也沒有私鑰解密獲得key2</p></blockquote></li><li><p>但壞分子也不是省油的燈他想到下面這個方法</p><ol><li><p>獲得公鑰之後把它掉包成自己的公鑰<br><img src="/images/HTTP08/7.png" alt=""></p></li><li><p>之後小明利用key1加密keyB傳給小美val4，被壞分子攔截用key1的私鑰解密獲取keyB再用第一從小美獲取的公鑰keyA加密回傳給小美<br><img src="/images/HTTP08/8.png" alt=""></p></li></ol></li></ol><h3 id="開大招"><a href="#開大招" class="headerlink" title="開大招"></a>開大招</h3><p>透過權威機構獲得認證</p><ol><li><p>小美(服務端)先向權威機構申請證書<br><img src="/images/HTTP08/9.png" alt=""></p></li><li><p>小明之後想像小美聊天，小美就會給他證書並他會交給權威機構解密獲得證書<br><img src="/images/HTTP08/10.png" alt=""></p></li><li><p>獲得公鑰A的小明跟情況三一樣(第二點: 將之後進行對稱加密的keyB用公鑰keyA加密傳給小美，小美再通過自己的私鑰解密獲得key2，接下來就能和上次一樣用key2加密聊天)<br><img src="/images/HTTP08/11.png" alt=""></p></li><li><p>就算今天壞分子自行向權威機構獲取證，然後把證書掉包成自己的傳給小明，然而小明再向權威機構驗證證書的時候會發現，請求證書時的人並非小美(權威機構會自行認證)，理所當然不會通過</p><p>附註: 申請人並不能改寫，在申請時就會附上</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP與HTTPS&quot;&gt;&lt;a href=&quot;#HTTP與HTTPS&quot; class=&quot;headerlink&quot; title=&quot;HTTP與HTTPS&quot;&gt;&lt;/a&gt;HTTP與HTTPS&lt;/h1&gt;&lt;h2 id=&quot;HTTPS較安全&quot;&gt;&lt;a href=&quot;#HTTPS較安全&quot; class=&quot;headerlink&quot; title=&quot;HTTPS較安全&quot;&gt;&lt;/a&gt;HTTPS較安全&lt;/h2&gt;&lt;p&gt;因為HTTP並未進行加密，在網路上形同裸體，有人心懷不軌很容易被竊取或竄改&lt;/p&gt;
&lt;h3 id=&quot;情況一&quot;&gt;&lt;a href=&quot;#情況一&quot; class=&quot;headerlink&quot; title=&quot;情況一&quot;&gt;&lt;/a&gt;情況一&lt;/h3&gt;&lt;p&gt;假如今天小明以及小美在聊天，假如甚麼密碼都不設的話，訊息可能會被竄改&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/HTTP08/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP內容協商機制</title>
    <link href="https://s95050937.github.io/HTTP-post07.html"/>
    <id>https://s95050937.github.io/HTTP-post07.html</id>
    <published>2020-08-03T06:30:36.000Z</published>
    <updated>2020-08-03T06:32:01.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP內容協商機制"><a href="#HTTP內容協商機制" class="headerlink" title="HTTP內容協商機制"></a>HTTP內容協商機制</h1><h2 id="懶人包"><a href="#懶人包" class="headerlink" title="懶人包"></a>懶人包</h2><blockquote><p>比方說有很多不同的國家訪問同一個URL，法國人瀏覽需要加載法與資源，美國人需要加載英語，而解決這些就是透過內容協商機制</p></blockquote><h2 id="內容協商方式"><a href="#內容協商方式" class="headerlink" title="內容協商方式"></a>內容協商方式</h2><h3 id="客戶端驅動"><a href="#客戶端驅動" class="headerlink" title="客戶端驅動"></a>客戶端驅動</h3><blockquote><p>客戶端發起請求，服務器返回選項提供客戶端選擇後再二次請求</p></blockquote><p>優點: 容易實現，且較精準</p><p>缺點: 使用者初次訪問無法直接查看內容，且需要多請求一次</p><a id="more"></a><h3 id="服務器驅動-最廣泛"><a href="#服務器驅動-最廣泛" class="headerlink" title="服務器驅動(最廣泛)"></a>服務器驅動(最廣泛)</h3><blockquote><p>服務器檢查客戶端請求頭來決定提供甚麼資源</p></blockquote><p>優點: 可以直接查看內容， 具有近似匹配</p><p>缺點: 請求投如果沒有協代可能得用猜的提供資源</p><h3 id="透明協商"><a href="#透明協商" class="headerlink" title="透明協商"></a>透明協商</h3><blockquote><p>中間設備(通常為緩存代理)代表客戶端進行協商</p></blockquote><p>優點: 請求快速</p><p>缺點: 因為非標準HTTP方式，因此沒有標準規範</p><h2 id="服務器驅動"><a href="#服務器驅動" class="headerlink" title="服務器驅動"></a>服務器驅動</h2><h3 id="請求頭"><a href="#請求頭" class="headerlink" title="請求頭"></a>請求頭</h3><ol><li>Accept: 告知服務器發送何種媒體類型(mp3)</li><li>Accept-Language: 告知服務器發送何種語言</li><li>Accept-Charset: 告知服務器發送何種字符集(Unicode)</li><li>Accept-Encoding: 告知服務器發送何種編碼(UTF-8)</li></ol><h3 id="響應頭"><a href="#響應頭" class="headerlink" title="響應頭"></a>響應頭</h3><p>跟請求頭一一對應(跟上面索引一一對應)</p><ol><li>Content-Type</li><li>Content-Language</li><li>Content-Type</li><li>Content-Encoding</li></ol><h3 id="近似匹配-Q值"><a href="#近似匹配-Q值" class="headerlink" title="近似匹配(Q值)"></a>近似匹配(Q值)</h3><p>拿Accept-Language(所有都一樣)當例子</p><blockquote><p>Accept-Language: en;q=0.5,fr ;q=0.0, nl;q=1.0,tr;q=0.0</p></blockquote><p>​    註: nl:荷蘭語，en: 英語， fr: 法語, tr: 土耳其語</p><p>看q值大小(從0到1)，不是加起來等於1，只是代表優先級</p><p>比方說上面那個例子按照降冪排列會變下面</p><blockquote><p>Accept-Language: nl;q=1.0, en;q=0.5, fr ;q=0.0, tr;q=0.0</p></blockquote><p>假如客戶端請求西班牙語，但服務器端沒有西班牙語，因此服務器會找Q值最大，在此例優先優先發送荷蘭語(q=1.0)，假如服務器也沒有荷蘭語，則回傳英語(q=0.5) 。</p><p>假如服務器既沒有nl也沒有en會產生問題，所以服務器通常會設置默認回傳，即便沒有沒有上傳任何編號也會給默認的語言</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP內容協商機制&quot;&gt;&lt;a href=&quot;#HTTP內容協商機制&quot; class=&quot;headerlink&quot; title=&quot;HTTP內容協商機制&quot;&gt;&lt;/a&gt;HTTP內容協商機制&lt;/h1&gt;&lt;h2 id=&quot;懶人包&quot;&gt;&lt;a href=&quot;#懶人包&quot; class=&quot;headerlink&quot; title=&quot;懶人包&quot;&gt;&lt;/a&gt;懶人包&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;比方說有很多不同的國家訪問同一個URL，法國人瀏覽需要加載法與資源，美國人需要加載英語，而解決這些就是透過內容協商機制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;內容協商方式&quot;&gt;&lt;a href=&quot;#內容協商方式&quot; class=&quot;headerlink&quot; title=&quot;內容協商方式&quot;&gt;&lt;/a&gt;內容協商方式&lt;/h2&gt;&lt;h3 id=&quot;客戶端驅動&quot;&gt;&lt;a href=&quot;#客戶端驅動&quot; class=&quot;headerlink&quot; title=&quot;客戶端驅動&quot;&gt;&lt;/a&gt;客戶端驅動&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;客戶端發起請求，服務器返回選項提供客戶端選擇後再二次請求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;優點: 容易實現，且較精準&lt;/p&gt;
&lt;p&gt;缺點: 使用者初次訪問無法直接查看內容，且需要多請求一次&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>CSS文字波浪特效</title>
    <link href="https://s95050937.github.io/CSS01.html"/>
    <id>https://s95050937.github.io/CSS01.html</id>
    <published>2020-08-02T10:51:18.000Z</published>
    <updated>2021-10-14T04:20:07.394Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5a7bbeb50d909b5f210902aca8200537925565499a5e5181fda7812383bfbd13">bd25ed9264b080267271e137e33d0ce118960a041ac35a180347d4bc9710c7dcccf0ed80f963bea27ce35e48bc9a2c9fd7c18fd34a2bfeede176cdb7623660d768785e04b96704436feb38d0cbe15cf1613eefac54db3270545b679064d2a4b498ef014fec9966ae9a959e7fb9d7e9a93d365d6f307a37207044eeefba5d23de3fd5b5dcc97971aec53aa6a7c5bcb91d82ed7dad54fd7b0f0a2221d94bbfa3e222d91cd48e44beadf3d1287c23cc1c11148de04210d892b526713fd1fa0adfc1721db452578edc4b9bfadbf1107927ba55b42f5d5223f5508658650d578b2114228eae9b26e16f12d211cb26d8af833261b1defffcac692c10c6ebea3c0700fef7bff8513317c19bd7a19b9d4d7b93cedc581402bb234f2e786088ee9836dc78dd1f247275eea8974f5c393c70adb69cec02b8f57325edbfb90bfd9cd6f3edc351de1ee47670f1742f3bfdbe3cf999a992ef0666ff2fb2bbf2430dadedd6648cb170f267ae9850c62f1e257ffb4d238518861e1a91bfaff775eb89011df5a2086c579c9c9ba633b0072c5edba9eb6ce4d67a64a74f5e903656868a447f01946b1bf48e6478ee3a6eff6568720d9aafb58adfe8524f105bde441232c0e1679219b8981ccb38c7ec00c18ed350e1ef577827b3835c5bfd761c16ce695e0d37b08cca23a92f6c2ce7ac4f8bef7d0ef45ab89033176cbf644300c3ff99cb813b1823fc6200bc8127ef13bab50ffff2d93ea8df29ad9415eccec0c59a952fd39bb4dae2e6f9af7c599df6588f378dd356e8e8e23190c7100bff6620c208320d497a6ce60aa7c417dca523384593fdf279da2d8f293fa693deb384da0de4665206b207122bbcd59c38cdccf02c21df0f685cceb57fc938c1cc6623bb2646bacccffd6f5b35dbb6ae624c1d00559f939746e13ee809484afd1f6fe621b623ed4a3c253401f25ce72f8e00e8ce875a85c599d7f64bed1450510ec8cb83603c6a25011952d94e05653c0a6ad0f917200ebcf09afb21f4175700c36f0fca8165258be4a89dd85430c2613593f3231c96ebf557cf0dfc5329ded957d20b0e3764b3e47486eb2ba309d73fdf4469ecd9425361a27579dfdb399781780a4378ab3949e6b92f8fa37913ba464cf0ab3c281006c93cbc4e3488e06463cf2c36b4f0c341cca3348a277546d27510d9a27b9cd7a66986633aa780e30d929be49bb3b0187f22b1dbac945ce219e727b04fedc6661d805bea391c2f167a577504c5528f0e9f6eb51b3546156b0d2de33c6a871839146dca1f26164aa20a3db3f18971878aeca051615d35bca7fc0a885d8d72b0f5a797688d040325be94ddf3c27d029192c861c4a4a7331a10313d7087ede486643a184a4a0add191620faaa7cce1a5c91fce0038240cfce8ce59881cbf2a30893bac76de8a6e724eeca599d06a7556a563c0bb890f898b90e05d4ccd91810546b4d9a842425b8aee5210829c48f4adddb3f17dc36b04b94b37189626244b04561e0fb160d15d48a5ad89f795d8d1ac77f9def7af5d70fbcc3d3353588979bcda45adadf707ebd218ebcb8316991694c291c88b147c03d315609fbaaf827bc183dcbec1c41934ff3b56efb9ee72e94db19c791de584ec53ab70390f965f9f68cfb0d9ddcaaa550934dd2d30ce2c512ac1b55f65a4b1cce1cbd43ce74fb3ed7eb280df82d6244adb7b7864233b2b72ef2ee8d7637189d48588177dd3b63ed5f5e08ecbbcf97072ed0525ca1307ea9471b65dc3ee5080f1d3d26a0a79af88f2eff708843306f979c07070abd644adfab545e99eacba41a682a5409a0f99c41e3ae9142a70472aee906addbbc8d6183d420e0bc43b52b6bbed6880965585581788694abead628ee3f68eb055d2ff8d94ce09b849debd9ee2f2b3e13ddaae14a4273f8c13dc45c52e854ef0cb6fae1eaffe5e89b958e3b8383ea21f0dc7834c44ca977f080d0f5bb625def1ed720c528dffd195be1c07e515f1c52121642d727bfb7c4eac4e00e354783b9aa4d4907986926df0c6ae9530e0e53d971e297cb41efd31b4323d6ae18b7249109d9fbffe522d34fa4764e1f8e4f520e0df1f31bc318162495bdc67fcb0419465b8986c718e21d30c4349a5ec24ec03a02544a78dc54e44262466925f9fa2932c1b4f98a9148f8af0e513d56b38856788daf1b45dec2eeb8ebaaba03831a80deb6f196f19f4391f1a123496db42f783e19ac4358fb259d3c10a273e46dc35a375aa7828056eb035c779d76f36e53c0b736ca0de1f0f1e18e69bc359502845381fa4b19e456f208354180aa3737ed29fd9fbe14d6fb9b9bc9bfd47352da8883c15f6bc2e4a13fa8d366c0123703b4ae21d75fd4677e996dc01e6f4f7922ad716478d6237ac8da92ce8b7380d2cc1d06db997096ae06ea1ab88ebd83d9f74a1add86855fa808c401d2398f7b2716c4c1d8ecb1498fef8e8fd24b1aa25d1a6f31ea24eebe6dedce86c6f011413364388a708c9aad2130444b8512cf54130582870453a72528255e06c1099f28b2c70b4e9535610caf786d75b77fc0a5160d0561c3cc695889c7d9d87731142a4a8e420322c373b653a56e7d7fad23014bd9dbc841008395df832276275a62c660cba0eb18363600906bf89b3fec2b6c0099cef72cb0514384d87f968725e3ac09941469d394bf888cf676233befe7529f0ccfcea5324c2de82e03f4fdf50cbd6518406a8ed38d1dc27d7b803f3624afd4fee43b856ed86615d4f2af6355fb55adfbbb74199678bf3be02ddd3a6a761975c2ab4941d7e6ed24d6f606e57ac4a2368c84578a8b5a1ea2bf3c5c41116ed3679cff5bc6285773614b7293761ccc724fe25a8227c727ceaf060f44fb4cacc97d98722d2c6efce98d6ca18e055bdf65f4c17d6b51a1cf7e9c89f0828c96ff0fa17d91de3cbd23332044da14beefbbf67a8b0dad9fcdbe2564a6f3ef4d59cd29d80594a4994a9215e4f922d6a77d22f40aed56270309ae91cf473d9f652fbffafd8c3ee77c08660a81b1fae1d9bba8cec44a3e53679d47cb9bbad3cb1998a4930a1fd26992a2cac415adbff4e28b2b6a94126dbbb8e25830bc531bd6969c0ba2314cc97d459bb87aa6a242127d3bc526f7e77f8a88cb1d7668d9906373c739b48caa2a66429b435a0d8467952749acad41f368a86d935a866734efc0564c61b587459024638fb22b5328c623fab45d5de0c7488e7d75fe6d973f4360aeb9b077455e65482498b4e132482d6100e0343324c89a5284a9253c6b3c3cba5ef038172da38c9d9e5116bb3ebcaf271b994c5cde4d0f23f0cef4b36d512425cc6d3591a5562af4feefd86bbc1f988e45b77f9ef6ad3fac45884e72207b5965e07ea3fbfaa36960c64adb22ff2d043579f54114eb0c8992d038846c6f76ed6120b4a97aa5d6e86077168a598ba3adba85c5c3cafac756eaa7e85db79a4008573efb4845a55b10ce39be7d19544d7642344359d34b01dd186622c7f73a80fc06e4e12de5fd8cc7ddfacf4e5927c3a8903951b70d80b0d4ec75691d6b5d4d9dfe2eb08b07b86cc125bdefd16dece40c643128bf47655132cf1481f38166317c0fce01f1c9e063920835218ac63f306b8d01277e40c08dd1397a0dfeb348755b437d0f5421bb0999ddefd268aab4321bd9be0a2ac0fc211419f541b35dc034a7c690dd81669f5899e3137e22f81122ff7949c49417532275cf9120cfdcbea99f85fe6c5da416699659750973dad088d873e60b2373e32ae98273574eb64aaa60fe0771346c7284eeaf3615131069d7d0bf600b8c255ec6f9bff41edaa97c70365c0ace49c0658193b43aab6817df0af9fd4d33e2ebc839f6721dcba46e68bf632065a8c4d784e1937b512b4a4c19047c7551c35bff96c0b0a8d1ee991b145de0c713baa4375b624e9b56ca9221a5e43626c246cacf708fe6a48a470e9204427636a94184521b05c1d13e359466d9774e3f339d606c38f8a3f39c50cfdbe2f58234d34083a49aa385f4f08780bc723b02ec709832f6c952ca9a1baa6feb91876a7d056781f7f80e1f815a30a382514883dbb8624f594272b73a036dbe4c2edef68ea6538eded8487201df220e1df839db1339008e86c413c6d71173e6deb165aafbed4e3d4f722eb5fab28b894cf430e635992a269dfdbe847085ab37083008250cc6c852b784170d73bea76e212ba32e2fd668e6642ab2c6e4bceeb7223c7ef6748bb39a83fb79e0aba214534f54588cc00e3a0f1637ce26c73fe6f45c41bd7e32944ca414dc2a0096c636267c0ad312ca34d89405080e93901ad6f7ea8cb35a12f76d16590d150984b3609f7982dddc47b842d230d0ec87616f06a74631ddd4dac2e7ad19f5e01ef6b80c0937958ecd4e2839506ce71561b8153ba16c23b23cbb4602fa075b4ca8d8d4ab9829a12bf05cdaf3a36e3e28ebb0d406d20945e560381c1a38d15e3cbc54421309f6fb7f09a1bee9873fa0a7ad930143581d874f19cc774138859266897ed0307ee91febb4e78c8e787a2db1e1e83d1791e74918022a7aa7d4e01ee66e267c097eaec516da833a9bb2695e30e3bd625f19be736395f461be0aaf18834982412d38fe03f981a04766780a807a9d64e5eb2cf33d906e455c3e5bab581fccdc135f24856f3ff1940968704e2d74979bb1127fa08c8f4f2d7c1989db554a17cf7086f213fd68cac7e4dbfbb924bf5174fb33f6275d8cf54421b0eda8060adeecb1deb8f2ca9dc524ec4903018f2a2efe7c37b60058aa4800a63402ddeef4adeae81b3edd4434398267c5c745457b199c444860c42fc44c76e99083a0e985a342ad7effe002f798b312c9cd47fc7e6102f35ae3313861badbd651f3105e83556f379d8ab6476972e985508e897f39d7f55d42bbaa5ed0d247d7f9937adedd40e0b2eed85bf3083da450eb5229d1e14004853e1523791684ce1ea88186cdc0e14d620561600b6bd5a86eda33cf735f69909dbc8e1f04eeba40a04720230a0cc60e1204e3d39d913790cea6b87150efcab6cfe704a3698a1fae0366a5bed314e440ab757470efbc877f28b265ca8fe942aa99fbd92283e23b7e965b5e70611e8c95d50d86e36e2710c192be71a47b2d09f7bcaa13106ec8ce601b9ec5501d0238ae2d87f55cbeeba6357758574fedbebd1132e5e99cf6f919fe892aab76b2b4f1df8b310135079bd28ca9799991323a1f5929e701ad42198dae7ddc22722fa9bfc3926edde506cecff1191bac49f76c2a8b22b88d8e474e7babac47b071e016d332bca77525d7f2bf660f20682ad3e4f3d6a8c9e5333b27a7861ade2c20658542abd8f2491596454c7526fe2b1e9d7f4ce13aac79f3b7d7ab31f1c19c66f11282864e302cc851eb3b024d57778c5ef63ca16928378191c67697b743d9a7daffcb38fcda1d579b39194c5966b157e5d70e06309f8f4b41a126001bf3af35ecb5d14278ebc0e2ce8ea667a0d144c373902e3bb8058408fef109bc25d6a8366c37c543626d99790d80fab6a43a8db99eec9e03ba5a30682e44a7e6bf5481d196970b0e94053430d41e29e308cd62018be750c5d1d63d5a596b44c8c419e1b0a22a7f96b02232c69de5f54f6dd7216f4f5d136b8c7159040aca74f9fac7dab426cb36fa0d8601363353c29774cdc9dc91228c4269309d9d35e64ef5e7e31f5fffab539a57926a842fd6f29bafec635da3827db3e30096fa2c0ba5c26794fdbc1ed752f1d1a803e0a4be6de24335693eab6593f0d8e6149e04bed84d617fce76dd288589f9f54eacdf8355044123d323abc880f6081e510864896babd4b92976a1b23797c69d331054de38ae177be5fd2aabc44cdc94f5c357be037cf8ae8c69f4cd1090352509ff3d996d856a78dada80357e5d5b966fef03f680aa167f0955ba05a9eebb3869f30d24302569b20fd50905abde3d8928f5530782670db2454bd56e1f059e206d526a6d5eff18abb5bea506b34ec4d1eb08dc95a0de216c99235c07a3386d5f3f2ad9d5fbcefc60466775fc91dd0e59b136dd8a3ee2bc37baf8be9dac2906dad3cc5257d8e544d239d1f724c5ed1aaf2c1448aaf9a96ed81afac3728cfb92812b28d4cdd1c4f07094edd921a2fa269d9fd73d381ed66ef938949055518f0656db85ed92072bc53c8b5da6b2c7b360c4f9666f19f7ec717690fd8682d7d946b908ea32a5b8279b5f9a3f2512a39a8f2f5e8b08283ed68a0d44df4d4174b86cece9e15c67840c383e34966fdc6629f1a8c19b7563cc46505c4a85641427dd704a214c52e2ed46ae8c28fd212a07270038c93e2e1346da1f4b30ba7ef73a0a5b47a13635ee82edf5c2b89213f3ef5337b5b66435608eb3f89272a64bde18873023b15829892b06fef759c860108268cbfbd4baa578b2e9b6c084a70468c6565ae66cfa7f28132651bd7a9573805147d032928a19e545f597308dcaaf504831f664bda70a9c31ee81d176ac32371c1c5c89399291526f89c8566a8d1ce6ceb8676a5afcacce5ea0d4f589fd8096816aa0b441844c65e4a43bbd57b3ecdd02ba1a03e57b9b5002e4a7c7464ab3a3b786b3e27e806e57489c30db2e06abe31c57013da883b70e75c376cbe8b2ac16e917546267d426a93b2f88ffe0ec7f3f9891eb4b73c38e2f23521c45d490096392edd5e8657bbd7ac72195512f4083d0648b9c76c3842588cbfbdb7ed63a51f6ae9cfe6c974bd3dd05e5560fd4a31c8b79b0f0b8ac0debf085a9e4057cf830847e7892c5112c02f3449fc1e21f11e7512b9ff1583fe2dc0e1d92d42db307706d2b044cee6fbe35eb33d79d549e36ca39d8a67dcc90d48fbdaf1b59928d290bd34fa4aa67bc698319cbd20e175bebaffe95369e43a23df365278464d249e0dd56131c51148eb787d1b4e25d9a1335f1dc28d4360ad84950c9762a33a3c5f7a532fc1ecbf4c98c6b9c1aca940b62eff420c0dab691390d50a5bc4840306708181926d4748cb545860ddefb8e65c61787517560641b69d3468f814ef3f0dddfa781927ec05dc0af24ce6193746d9fb51e348bc7c79a96f65d249c317fc656e9d0c7992360c70500cf2cbd1afacacb265b7fa169ad4ddd3e4cf0cdc65b93ffec1d4b97b8ecff2402f473a532a6aedfc0c499896b28e494aa8eb458a647a6b69ba09783a83422c88c204138f8abbc16927f10e6ac4f3eeb4051654e7cc41d1a9dc5a342f49e070b3c4f7db9dc7d921d55dba4fc8300dcb92a0dacd8bff51b7e6690905c54215bde26715448f4718ca9fbe4c0a40e928afac38edd282a1aed8c708b35522664b9a4417490333545c40fb19b558701eaec7f5e6f060bca3e6be99ddf813918c2dae05866c5c252717ca572c80870ad8d42545bea8605ec6fee3f6c424566a36db247dccbe7109823658a2291dedf917f8a42466770a9ef1790cb70f2a610fc63c8ec9ded8cb2ff5a1fa34365eff1456cc48dba1fba80d1d729adf9dea5ac7b824c776101ab0a27cdc72aefeca5ca82199d8057b15832e6e79a554e30f100f75c5bac57784fc95774cd3f733ddbd74581248bb85588a14265fc250549a24d95846ec8a434a7f5ae8474a2b3b5474b50ec5d3487481435807de2ae1a765d405d2e971ffc026546c5e52530e9e6e83c37ed0bc90a36dd51ce850bab49e8f506c755ce3af88154810f94b84b97e366eb4b3e3fddda4e7bd5ae717f87800e49756f87f5c50b0211eef220f008187371cf980c3c60eea7a57467ce16ec5b86df2d3867c01f17d95bd54df9bb9856049aa7f6bed50ead5bcde6a8393e26c209a72815066c0314cc60ce400eb77867a6a24b0f1f9dbaabdc7883b9638ec6bfbb271db04a07a7e8ea410143cdafd4e4bba8ed8e4990f1ce8303a9d98b35da138dd17d7a7577a2800accf6bff5f8ad69667223cb0af0429c4da53f02181a2e33cd0fce193e357264fe7b6468d60f7968e0d886218512bc1bc83e1e4e815f7fed6b87962e287bd5218aea7503ad4c5e96993584cdd7583b1eec1282a194b39e3ec1536796ce9f704e67e6a1909365667779c8009b82da54d7cf056b3a436240c1f1fae3e8424d8d5b162e0ed7a4aa36346dbb6ad1c71b8c0186e8d40a6ed1c4dccdb795a9dd01eeab1e2535be5723b8b7dd6b4e778ebe1e595528fab457f8b0e19e585517f2c679d373690741a0b1f54b46d4f54d68f3d0dc09adb892c5c40bccbdaac46e81be287f3315f1e0b2b5d5f33bf0f91cbeba43e28cd03f38e82f357b1e17fe299f3f7b227cae84d3df719f73011509606773949a1ff8cc39741c745ec2c41c141eb8e6513a7dea0e6c90aa66df7d1e676fd8f85417181ff11397da62ecb04bc45ae025b32ec0dc14cefc4fca59068a8e2bf1b0372d33aacaab8dc00846ee16c4e69ac2c77be443f522dd4b8586eea416fdd051eafc719e0db26913e53fe583058030d7f00923fb7d367af218e7f0e5c6cbcb02c1ec66549f61bc085598975439b97193a12c6dd91aec5acef5f0af3b86c73a9d9b96ecb9626b5d76a73c424e441f94fcdee83c32265241e6b8347d6e8f105107fd4e7b8e455170533c1dba8abee6e2008946ef6cce2310b0091f7bfa0be33f8f384d45b41e71aa8a353b56cd2ad69840c88e7f96d37b42f693c1f69fe7c4ce1175b3da1c15fc3a7f091dc102ed6ff7dc28770001fc169b8c60903b5d71cecc7c202d33cc1f84a55047bd72a1f715d6939ddb8c004e346d8a87c8dec0b95f56dc2076d1a58d1f64efa12a5bdcd77b2aabd4bb812b41707546d28124af5fbc874dc05c1863f68bd32cc475d8a0bb693d2424ef912df84adeb748758dab7c9cf748d6ea38da57b2c7bddf24c852a229134904745036a78f7d99dc030a7e67ef4672c9e9a6665b64d48255ac2c73eb9ab48d17cb7d57393a581892937da79bb1b65c3a7faa041a684ea891570636130748afa1cc8a21c760900e2acc92cc529d01689590dd3c4f40d9224e6f546dc570f189caa24b38d9228c4176acbd009b80534c5058e1fe5fdbb5c86f7e2ea1860d5dd7df40122fc8506fefa7ec2729a371af1c7af080d07075de9f18a61c5c4ca63aeca04a7bea3b42f0a07f997cc93fea2b030f25d0acf410455354c43624814d1d1506d4143185f6b5ebf06e87cef04c43275c1130bd2f2a96d51389c73dd55a7bcfe2b652d55cc2354b2771cd20fed25a08a4f6368698c220b54b4ab534bdf643b4dab7653a9991dd620e7435707f2a19590c6278c0f45cd390774ab6cb0845eed3ebe74bb97e4565e695b0cc21e2cca63e44c69649130153428835f919ed21ac58e0a9f53fde7cb7727554d96e229df84bcec0b51a064eaaf51392598fbe9dcf8e9cfb395ac69b22fbb7e82ab4e6bbd33fe94571fedb02baa9e2856ebf1c33161f2aea956ffe559bcc280a114acf5b430f89d64b98c5737312b3771708041542755b60d696bbd7666c2f695f427cc0eb3fd0b04844b18916f515ab98812319bcf32882045a4cd39ded012328789b9e2e19f306e278cceda33ddaa90cec928f791fffa6c40a5cd66d35013e280de4b7e552be01cb1ddb62a78da6eeea3303c1aa633628a01772426341cd6b8858653151a6efe27cfb727bb1de64ae16255bc3fbda22ba98dc406178e91e5a07d79b1e720e887835b233d0002fa2331c860ef070877dbc643b4c0db9625b4715fae5b1d219a045639373aa58e9d4fafe92046cbdba94a5d8f0d6a438aaaf3629481dbf7c1a049995ee81808281027406bc4adc0a95662c3bd520e755a39324055f66de41cbd5dad617542f0aab9577e715b2fe9b3c2a49331c2479282239d4fa0bbba597b2ab78cfcefa765ed1c77a03fafc3d6dc9a8ab04578c49f699b034aa990e9e7000450aa2db11dee9c8cd2f169aaa7bc6451e7f7f37cab1ef0910fcd6aee9ce3d6ebcdaf3fd76b600970fa92c902cade6f7850f335a4c84120a374362ae5f004344f5eff9d52a722cf4fd211d5470017d887e70486a4951b2633a166a086ef0c63ceab792630bd7de2f50542f2522fa0a2032aa5855c17a063ff33acd8dbab3697c5fa12656240a08d42d27c8d230729b12c7b712648110832d8a12a01a7e24c7d693dfcebb27e984b7df81a36704e50dba51ff4684b028b295b693f66f2209b0e63fc050589217c858923fee78d36fc85495ab534d1071acabd50685f25f86e51097b6c5a796fbcb72e5a94dfc76e6ba8d5df2cdbb3d4cb4e83fad54b49eb9a84ad90fcf26adf00ab801b280badbe039e1eca4834497407a078dfacd7c9d5f59b8c41353e8f773a7c1217027bc5cb5112ba006898b6e2af17a643749a83400ea2d0253fd9082c6dfbf1bfebc208a2e8433f4876ef52d92cbb4a3ff7110b1452cc146de2a904114d06e9f00c9befebda6aa7ab38889dc2f32a2a994365c1a498cd3c7be57bfe4aecd814be95b403fe6a7bbdc2d6a6555a741b7e201041f3414a25e7b419e3916faf335187b0ce74dcc0da226f0a623c1ef69e371777e05588f8fe6234bcde78c8332160aeb5912d4196fc018be7e94a25b64759ee3d28c33b56f5ec14a7daeed43d12b27299927745a3b68ef9e100f77f1b161cb71a66b2d0ff4e55f7f7a2676a1d50029e85301fa825784b03253de55ae850ef03f8cde2ea88b56b73b559338a8b7bee679cd8a19c425bb2c37ca5f535c8a74e11d95b614f74201ba16b2b9f103860e8610cd218c5ebfe23daeb9be3df7851d9d079ee722cab7e835c189a4868277fd61c9be6f37fa046bd09d6336cf5f17bcdf9b95258b683ce143c0e9e01de13f1888d9b3f3852e72cc239583b5e478ea0dd52c1f1321b29110e46eb278097baa840786947e27c924cb683684bc985c02f71e4394908f49c91c41b73b12747dbc6e591765df0428575371428de38bbe800317423ad645636c616c6914f6f9d19935732f3b01f288901260b6e7d1643f1cf03205e9626d2ff300e2c06a9afa39f672eb1bd9fb4070df0be667107d6e811742ab971347044ccc49fc0f9d032a89acd56f242b2295f5f472b9a665fa251797a423f0505758da60fbb32d737cd5de9c8a92b87eb6305fb47b8de79d21183f47b8846384477ff3c089acf0358cf08bfc92b005b99b4f2f300c494fbf053546a7dba93dd3a6739c88260a728351d54df92a33071ff12caa5aadf8455bd73c79ef2e9b9475f056ba3b7467637c875d2a87e23cb3775dec0ba304bae6f344857dd98ca3dd2582b81aa312ae628a2c1a8c4f7393c6c9b4d7d42a60e1f6c64db87bc0c84369c5d7aaab11f54233cb2c1100a567ca6cd2b0ced325b31b1f61b612289b64018884d1041de56e4aae154d254f4728af1e4a2c495e56542d5df57adee93c618236b485d5727e2ccb7cbec9b17e2fed51027c4ea412ff54157c3aa6eb19ea9b6be89ca774b3e16b655530faf206bdbfebea324f07016e3dbb10d58992fcca16b7dda69f6b1d46d939adc874b1c086979fc607079e28955079af05337ebca852983df643cc7256945a82d6d90a35fb91546ae0582514008215f2ffe3e8b95ae4baef825b58619562fcad60845317e31ee3cac7d89def0dddcd26bfdd81bc32cf87f536d658aa3f0e24ee233347be84d2ec53b91584a58da02b4ef51db25dfd1fabeca904dc372db6f3b7d67ff18ac27573e768eea8328f7b9c1b79dfb703356fff1bd59fc5ed5520a7679b5afde58b39f43bb8abf154c4f080b4bef82ab12b8b65466d23993506e20f8d2e0cbbdb4d18e419d0895b4a2c7efedc4562ac18158a1562337b88a3313171e149b518973056a92a18f53ab2132ca2eb499da30e7d159b6615c73236dac23d64707f11115e02c1fdb5253eedbea06ea461d74da6f165ba4ba0735db6b2c676b1bd5642ca987e8225de9257003502e9ccbc04bd391350d1e979b62af38379718d52603ce497fe387061f350e2b36d5623cbed78c18009b329caadf4da56cf93786ea070ed45fadcc8ea83a7baca4a27b1fd1c8cb964a07b63153cf94c9f27e61590c51fd34cf4d05452b04bee5428834bbe13c05eb6237609e9486944dbf53376c5a141702c726037741d57a4b8f120aa3f232272c8e203c95e79c1fe0b9784bb71065b400cb211c835cf7dabc3a029c788743d1423812e12f8de179b58bced816aa6c147485875dce8fb9655b4aaac089d39f9051c420bf576f5366b85c78ff0cbbd1e5c3b119ee666b861e2b93bb6a0b2df94abd43580ee2c561b0c079f8b6e1cb08498e911715e4068ce191c1496ce7626c833629c585b41d21be45183f07798ab91671494dfe7e03d03657a1a61d02bdd72496ceaaffe32ed6d92ffe4fb578990918e069ab9d556faed9030ff9d6c830ba6d9f4141979a58f5418ba99c7757966b723b6d94f1a24837081f5894470fd17ec7db5aa0b98e72c428ed8756e7dfeeda3fba16de4b1e40020b6c1448d3c8164b9f2448e6338254dff74606885a3e9bcc5e5cb7f07f6d51f79c75242179dec07bb5434ffaf364314b8ea2866a15bc749535eb41afde3e7a8e54f2242e4d61b8a64edc3594d5d3ca36775c2ed74833cb62deeb511f24736cdcff73231cd435bb2f4c3694c57bd0647232bc843862929afb79b661f86c5cc4f4050c7e993807b8e5f5c878c3aba531cd4f233ce63e4b1469c71e173a5cf93bb9c2b1a378231c0bed9509c366901dfa94047d7509d8a6a26939d24f248ad2f103a639482c0ba7e6417aad83f854a912385dcc1678f2f7f65aa90e122d2d1bb49cd6bb7b0653e8078717b5cf3bbc1b4d77f187e10c1dbc42393c63f176e377392ee3905ee73abafb975a2b27aa3f1dd06b33cfb2c73c3a97edbdc4550d23750df3796e6f806bffbf2e1cf1b0580e8a908cf6f3f4e39785feb1a493c8768692683de622f931a9ddea928b2ead37f32175244b67f2afbc0ca6308cad10fd7cdfdc0a2baa4de8dd3d192fdaa3da9ab0ffd133503c3575e5e3d9d09327fc5729f7a3a0dc9662701369a9e90df4459fb0889529a85486ff00535921b9586566eb4e9910523ed7ef83304b6558ca3073dc0d1d3f07230ab2bc03512056243017121a0dc99a41f3738832ce1608dfe5d60e4be5b680bd6e8273756b88e13348ed6bbb638048cbb6b651764e9e6c7c4fb228087aa88bd5528b3c36e5347d92b8dd058cfc992a7e32ba83173734de142d3ac34b2aa2cf2fb2a15b8c9ba64a5922b99a3d7425659d25058234bb47e36c41f96c38c7eef083af7ac1655d070bed49b05f2dc4a7a13d40620651c280083a1a93cb75de71852a83b00677bf76076f6db9ffdd57f736b2cd4d6a9bcb466ae6f8ea93326a6fc77d02d38d0600a3dbf2ee0a3b78a9d16d7708091c97a13980a096b60df8b949c31355d62fcdac69cb7a20f9e61422ef57517502afeb5bcd6066e44d6d6c8c026fc4fa07e9052f9849dd75a59578c35caf85619937e61768b166484927423cf5547a1fa2c4178b87bf39db97e698f42ff98ff6f83aa908c09576d3702207bf1c0b055e62d5a032ebfbc9bbfa0d8ec51c0a9743261e3e179208abd0e0a7b6085db1647107e8d7d220ea61dde927a6c9c66cb440141e7a9812cb32736458063c8ac38139c61461470eeff44e0272b3ca6cf8982256b298f97dd49f2b2d355010990050bec33ce8005191b56e210fbab9d9802ab6c15dd0588fdec9eb54a587771bf88eccc68079c6d3060babee486cf687ce31e55fd25d6655b1f8a7c8b5c106becf16258ed0bb5e408b424db7554a25b93d4cb2ee3a4fbc6e87a7069299b9b2d8a26acac76b06512077cb844548b7c87d0861a8326fe6375a1f70734b589752d476abb6d004daff684acdf1865019d6c163945a098c4c8d89a1077137e1b1cbbfedb876bd23e6d015792f4308fd412263fd3651751460d8ffcc0d07d606ff7d556b634d1480c3d8e011c3328341da04d585ea46bf30ce649d19a8325b76c516a50b194f0fabe4c177bca66dd06f74f7bc1930572b8cc72e61e32b0e01e000cf151e8d917b2dd69f193626ad910c495ae4c8e2deacf83f58d7d14e2f8a801a47e4a091418fd3b9cec7259e5e4b28aa3ddad025aac2d3af4731c9093cf4aad9e96303ccd1f3ad7021be5009be80a4769b82fa6a2c6c095da72d154d53a7ca2cd5012d7e838d40f5f3929bf2604554fd1405ba39323f30885eba34961a2e1be51d688c371d82a030305da2c41a2fb99fb5e2b568151db436a25b879ec44675e903d5f42d51de13692784a366c8eeb77931f022030d5e31538ab9991d7bfdf5d1dee5af2527a345d3abdac64e47c9e1f21d8bb010bb7ee277b26d1332e49fde76071df3c3387f521b1232d46dd5ac1be4b0093b4f5fcf70f231a4e6fdcac2aeeb047179089bc71d19633b37a4a38c986595c2814aacad5b200870041fbf4764194a711a28a681d12d3c49712f65e20bd869baaa2623c86e9358f1483c7f156b22617f0cb723b48b4ac13aa94f92c0805fbb976a78719fdff9dc8168c42676515e8631791e81ef8f0c5358fd6a4c4b5e6dc1c100bd4ef478d42dfb11bc38851d99a4dea5448baeacfedbbe365cb23460da8eeb344dc8cfa1fcd35640583a57cf93e65a8023a797476d37ac7dcf416160af2a9227f0dca280cb76cd483a676abd76124c40e62379f5df5826e59cafbfb93bb47f7f20190560ec4623b85f34edaabeeba5a9124f5a152da04a84343f604279d759eb1dc8caaec8e902ad75191cd3d9cf3cbd8d70df3d65327587dd3df9b7a239797700b71c602edbbfbf3c36feab5bb9104df2f404666ce816988d5cf910625de29222bee940eecf02a6293d929cb5abf363a6eb82b70176933634798fdb04a07dc55b2277082de41f18caaa5fd59e82485a71eba0a9f2531633bf589a3172ddaeb4db790bbe74f333918b69a9450792bd8c1a11bb491c7e6f0bef192ab8cef04f2d2ad7829f42baa040d998e4aa08ae6a8039281de5eac353e7e2a0462e28dcac43664492e642baaf39091188c99916a16d9f558229b32035374583fbde55172bd3ba799129305ce9706f5f0dc6495127d917cc762aef3b395c256e72ad1e0b9a30c002dc9e1576f22010e752e8c704bafb165ce8697e8d43c499639b614c629d9fe23e5c28cd9f1cb44ea439029e3a33fe1a30b19f4f50b0a27af8d4f8e2651d5dbf2c7e1f021badb68a6697796d8333497080f520c57c2df58898060621bb765d28024e052a0e464e80dc670dd462214348c5efa0aba639dd7e1fb9e0c2f9f67aa4617f7c4ca57be2ea131aa097a549cb9510e88648e24669a7d6766f6cea06b47fb31ce3e87cabe8af4841eec77692c33e546e4466a9eda0245f109f573f7a07c4832c0ba597add990796c16559d02148af16756cae0a26e97eb02539626cf1fc2d3ec4fbba40c56aaf6e5cf7e1ba1e9e67bc73363f1986b29b6d5a84848e9f0f7f86913d0bf29b6247451d7bcd332e2b5f186a746145cfbf78b79e071c9d168def936f22df1c7338859d04c602ffeb62a3567ef1037fe753ba70a6121d02695ce6bb7ee8b7c600dd6b7e0f464ccb8152e23367829b026d5c05fd4106731d2eb3c18c51cf15fdc065b77e9d92014ade433f43d177f15afb838d90441d2f6b583b011057d8ad22f776d20395e82b62634015ba727a05b7794a0c6d786d890b74bfc60e537c2292f0e0a0b39e43dd7f818e71c5260549b41cb98e8a269c6e7c9c1dac1ed95d0d283219242651ecfbbf62e09d13a75c258d94d4c4c31eacf17e29cb77fa07997668ae6794599cf0ca844b4798ac104c218b0009aa840f616ce3a3c2d1b9ce637c134751c5ade1d1588f89ff95e0eead7dc1c479b66d1009239e79d9c3aa681b1d1f0ea4f76eb38526b8152a702debe731d0292871853972b52b78b8cd34b9c38d5f2776fe77c88aba6737fb323656ccf134c60446235a729eb49d1ffdf8a7a899276f7f093a250a322a33690fc8665f48d869321089b0027d608027e61721ee0815d94a86fd4af2009b9ca1ae55be75ba1c4e4f4bfc7e758df0562409add7c3a98a0807c45cee3da26960f56d4066c193e3284701f55b5ef2e375cfb63a5955f82ee3d7faf2132dc540b77fa2867b10d23f84b387d59e3d1c6b43d295dd360e611d1c43268f69080344dea4cf0e55f379e96a893164496b7089a0e70a537d5c580d7f16207e8aba03b01889f8c0c11f6085a10e92b1722fa1c1c6b60bcad21eb6e51edf858ff682bf4a2d78230fb126667d35387200bb311888676f676349d967393ab847520001256d4f896f4f60312489172cca200c0b61745fc489ecafbb6d7c54da54dc1ce1b409ac1fcf0112a97f2dd64f9c509cccd9e50e28f1b14d96c51266fe844a59c3bd9c27e6826aa4a002db7f92ab08aadc8474541c5dfb6a014a6294ae3cf4679c70b525328d337d04e74449ecba1fdef90d51c6194eec86131ba3d658af92f6ce436dac1106340d5375d996a0a58c288550f80fcd5867e4f51a3e53e9404215f9490ec5afe3e78a45c7001d952b53e0d28a533f36b59398bd979c2714157182165633c5daec7e00ae60e0991b171c67739dca81609769f5f2921bf9d826e6e72ae851935af25e9a9a35330c4d3e25a6f3b761bfbda81217f41f1ba0015dd3464a7be39a7eedb8a67996e2656f51502c53efe284023b20dbe1c581db143f4795076969144e5f132b811a3e1bb4c60565c674dc9495c08d0477db127ac4db30d7dc72ad8c7b49695e1ab0715c16464681d15e18927a7c779aa5b6ee36c2c4a82ea28bfcd5ec0d3739ddcc9815574bb06ba7c7b36842b4164fa7e1f1c13dd7c53d7ad1a00c6ac0f21fb2d94d313a1598493a91e12ab0b575670e32695b961387b1c06bd83893de63bcb55c3ce2a442c0443af60029a43c6ceb29d250909eb96f6890d0da978b70042df2b3d7fd6e205639d030ef4ecdfcc3792443cc9fff56c3abeac39deaf608790a02cd9e039614ab0b5d4beb7d7848c03382f2a81a9af3fcc9de50e76353f0184bafae5f9fdd10f9da99fb3a36fbf4f4e2b98a2766c0f53abad767faae34d35844752eb70d0ba39ad4c8c856cadc3f5189c0fcd5dce9a1fdc6302eac93b704bc5135b7452bb4e4994d3ee8e690970e5dbd9176fc53c2b05b7d2e9a110d7e1a5a07585617dba4f55ca99c28cb2b99fda8a3fcab1e15505f5127cf04f8cbc2ca0269e4ecc555f174d5d84701c1bb2a137eb84059a4cbc639af185a26f92ee7c440de06075f3ed1444bfd76675cb3f0acc00adf4a6e8b54b62819f24cd0c534ab81aa0042ca9b822f13e6bcf1e9d1248097f9d050d962e039376030a0b2506c10d1aad49dea8a7bd025c5a1f030678887bbe58b6f8080dd7e18582f3ca7536fae3c304a01c8cffd80857bc6cd89a1d2b36f65e38b6336a1143cdfba69d1639da3a8e2d069d0a20f5868be8edf673a63a53517786c3f39b42e1e1e060cc8ef6fb08d7ac745d6ed624e8958cd25978d9d6cfa4ee4eb1e4c74419a910ac9b49a321b080919440fd18472117b24efca58bf73a4d95412ea84f4c3a60ccd1e14134e4dbd85d0e595aadbb632a9d92dcec7d54f4ac05be2782ee8e9699e081d425b0df2f361b0a17e9e9f0d1ed50c136b739f9527cfa5486bdde1dd7a0132b890b58c452345f0e437548cdf3b77c8f1db5c53c1716deb77477443ae99302befc74eec1455bdd51e21759a31c1862c7eeff72fc17b10c2158664dee84f299c5cbbe2b7c6085cf75d70941879ebe4c14a31ff88465f870eac37b77435186df56c3b192628cccea93eec9e69da02c025e1afeb94c2eeec9b4256ea3a2e40011244758115dde45cb1ec50b97a8595dbd7306c7e0bfe3780b9b6b5e0dbdaf3af905e737830d9c899d2c475b494026053002dffec49b8f8b100bb5c62e9fdb007b928ba89c7fa866bfc5f304d9637d368e7dd06abd03ecb52a333f02addf8719d2f0c00d260b407102f222e351049fc76903265f5822cba9784ebe81c96566189bc2c47386fd6b8169ce7075e33d49e91ee2e5536b83cf528ba79859610dcecd325115740d640a992b8abc18357f4fba51d0ff62d1dbc9d3b4c102cbd48e1d50e93c56c195d64c4f20050344145e064f10064f52deaf1de18fdf653c6f122211b49e3096d1e1695cf36209a9f3e9eda5e6665bfea0c0bd669a403c095d71073557212ecf9ea1c01aa032e695b9ec110e4702ec6ececa5d748e836fce00e72bf8905643ffc7058c444e12ee2cfcf764d437b1d02a66dad8190d4e132c954fcf05ddf0cf40537d57f8aa1075286c992294b675d2696b8fc159aa63fb8b65e1368634a2905f2598e5163c25bf61681fc9c132fb698480ced261f2d5300318d1e306b06c203135387d57789705cf89bf4fa1560fc370712bda2761bcb263c8029505c1425e430aaf9c7bd5ed2e436dc6cf725afc4f2fca73b1e47bd426f7ac5544ec66472b4adfd0572708d40a5684aa5436c02e0cd9993295de48117f61bb05cfe5994f4fee56aa4cc2bb16e9312bc2b026e4901146d8805e028973f3047b3502616c0a1b2ba8ab376699cd488f720b4abe566784b51cddb89a5d934c366f15e71c33adb325aa8fd36ddd5ee2e6d66274d91d25af492ec15de6ba8c03740a9e1727e8b57f48e7e1131d5a8a57dc700bbd23727ca77e927c4c23c78d3c2441373144852da2e4230e4b38c7c7364feff19780256cc2b3a2ad27e15cbccaebc5374d2cd5c556e66424b479fee5d851aa55fba846a07e728642dbdf6c2da83fac0d9ccf745de29500e94710062a668ca907e3a7cc53775c1a9e4f0767fe0de8c3c6780fd9bf920ea66eb0f198e62496c5cfd71668a5a31a73537161136da801dafad6ea0ab4be46dac89326d2f65a5a84a711831c8a4291921048416af72f766f9cf4a62d4a8491061dab9ef849779b45e3a0fd416bca4f402c59a70bd61e507eca0d085b0e76a352f1d39b8da232404e1d30d3cae5620307f604d335204551666a1477192b9017e1b9e2af07b54a8fc669a937611f06553ceddc7dba81422d6c2d8739f654d4cda907992329790ab6e52261a2f4b947e3ccf7fdfd4cba7a2cef1b3792a2550706914e2886b557ea284d744c4bac0e14e46328a173a2e2c28dced81f435e6db2e8ff44aade956724e5fb8f14c0821c1ac3eb3a61f114690a57e8fcff6a03f02dce15dfc9ee5a7935f5ebd0ff98cf94f86466329b244a2d9849882f317e93db6ad9fc175272d32732819228bd13d2798a76816d29eff88445975df037785f3407f17b024fb113238afdec2aeebc76feabfab7f32ee5d24f395075ce20b2a8acb14be315c1bbe752db0208fd1a5773d32acdb2f874eaed74cc39212dcdfb240237ecc8e5281899a9c8f0a886e47b0a3f4b474ae3c8918826f7e76e818588de8df32755ee2dd50394dfd7f89b16f1274a59763945d0519a3d4fa4e637b9fb1697bddcbc38e3d08cc4e5a5152db82674c24547f6cda68baa2795b96f2b27db543889fe30402a53503162924af49f5fa072c211a2859b699c96d99aa10b8c212912e5b55fc89b3b94836bc4264b3e40bd4f7a55a9e8ec964e6671ba6bd1e9f88b3194feaf5df9544608864ecc60492c32824d3ca2d846641128ba3ac6b3b03ebd673fe474e6e8264fc5383514cc60e9af22232f9abf7a0cc2d39d62d00f39521e10374e52b08c0857e81b062d28b033412910c03c8527e9d7c0fed73e7fd6d0d934d7f60f433f2a71628e0c33dd194e49cf2734a8aaa37a11463d16c2269506189a0fee645d2b5f8f0843dc33c60f5e5458293a630c19d88160bf23a53e40fc3700d5b910474cdc0af2c93d8bd1ef45bbc6e004e22d99c715151c62b31ca00a1e25b8c2a06fa927b44494a6839c34ab7cbe63a28212e63ea446a7d3c6be81df79f9cfbaf9d115f07fd0d5fc7ce9f62d686ee6ebf37c703771d40240a8d64fb06e9faacf519113a8261686e87bb1d7bedd6e348e09267fceb92088cfef670b860e4e9afa76a4aa1f256db158082e6b36d4d86219cfe5fe6ecc580668d7773d888cc9556f8cae7023fe0458ade39bf63f6a8323cd6c26aa557b545871dc80c67e9de12107ef1cdec194b0ef2bcb0f1898ff5d51ec7fd069e4d2c2dde8ce09f418c6156e036104bd8b98decfcbd4b00ece3d1c581999f36fe34b57d30b8ea5144601c0051731862d2dd9aa5efaf8b5e6cbfb33a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">輸入密碼查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      密码：test
    
    </summary>
    
    
      <category term="CSS" scheme="https://s95050937.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://s95050937.github.io/tags/CSS/"/>
    
      <category term="CSS特效" scheme="https://s95050937.github.io/tags/CSS%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>JS之變量如何賦值</title>
    <link href="https://s95050937.github.io/JS-post03.html"/>
    <id>https://s95050937.github.io/JS-post03.html</id>
    <published>2020-08-02T07:48:25.000Z</published>
    <updated>2020-08-02T07:51:41.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS之變量如何賦值"><a href="#JS之變量如何賦值" class="headerlink" title="JS之變量如何賦值"></a>JS之變量如何賦值</h1><h2 id="變量有甚麼類型"><a href="#變量有甚麼類型" class="headerlink" title="變量有甚麼類型"></a>變量有甚麼類型</h2><ol><li><p>基本類型</p><blockquote><p>Undefine，String，Boolean，Null，Number</p></blockquote></li><li><p>引用類型</p><blockquote><p>Object包括它的延伸</p></blockquote></li></ol><h2 id="探討的問題"><a href="#探討的問題" class="headerlink" title="探討的問題"></a>探討的問題</h2><blockquote><p>當我們給變量賦值另一個變量，會發生發生甚麼</p></blockquote><p>注意: </p><p>​    在JS裡面，一個變量的值絕對不會指向另一個變量，而是指向內存</p><a id="more"></a><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="情況一-基本類型"><a href="#情況一-基本類型" class="headerlink" title="情況一: 基本類型"></a>情況一: 基本類型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br></pre></td></tr></table></figure><p>我們用num1這個變量初始化了num2，技術上來說會指向同一個內存地址</p><p><img src="/images/JS03/1.png" alt=""></p><p>如果今天對num2 進行操作，num1會因此改變嗎? </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br><span class="line">num2 + <span class="string">'bar'</span></span><br></pre></td></tr></table></figure><p>答案是不會的，因為基本類型是不可變的，所以num2會自行指向自身的內存地址</p><p><img src="/images/JS03/2.png" alt=""></p><p>這時候可以打印看看num1是否真的不會變</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br><span class="line">num2 + <span class="string">'bar'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num1:'</span>,num1)</span><br></pre></td></tr></table></figure><p>結果: </p><p><img src="/images/JS03/3.png" alt=""></p><h3 id="情況二-引用類型"><a href="#情況二-引用類型" class="headerlink" title="情況二: 引用類型"></a>情況二: 引用類型</h3><h4 id="預先知識"><a href="#預先知識" class="headerlink" title="預先知識"></a>預先知識</h4><p>引用類型賦值時的情況比較特別，會先引用到stack的某一個地址，再透過那個地址的值(heap的地址)查找到heap的值，比方說下面這樣</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">// false</span></span><br><span class="line">obj1.bar = <span class="number">2</span> <span class="comment">// 為了證明那兩個是不同(相同的話obj2會被obj1影響)</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123;foo: 1&#125;</span></span><br></pre></td></tr></table></figure><p>示意圖: </p><p><img src="/images/JS03/4.png" alt=""></p><h4 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h4><p>假如把一個變量用另一個變量賦值會怎麼樣?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1 <span class="comment">// 把obj1的內存地址給了他</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">// 這個就變成true</span></span><br><span class="line">obj1.bar = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// 這個也會受到obj1的操作影響</span></span><br></pre></td></tr></table></figure><h4 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h4><p><img src="/images/JS03/5.png" alt=""></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p>上面之所以沒變，是因為我們都是對heap進行操作，所以obj2當然會被影響，假設我對下面對象這樣操作結果就會不一樣!!!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1 <span class="comment">// 內存複製</span></span><br><span class="line"></span><br><span class="line">obj1.bar = <span class="number">2</span> <span class="comment">// 將heap內的值改變(因為obj2指向的stack部變所以也會受到影響)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 這裡非常關鍵，obj2在stack裡指向的地址發生改變，所以之後假設對這個對象操作，已經不是obj1指向的那個對象，obj1理所當然不會改變</span></span><br><span class="line">obj2 = &#123;  </span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj2.baz = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//&#123;foo: 1, bar: 2&#125; 沒有baz!!</span></span><br></pre></td></tr></table></figure><h4 id="示意圖-1"><a href="#示意圖-1" class="headerlink" title="示意圖"></a>示意圖</h4><ol><li><p>內存賦值完成(  let obj2 = obj1  )</p><p><img src="/images/JS03/6.png" alt=""></p></li><li><p>將heap內的值改變(  obj1.bar = 2  )</p><p><img src="/images/JS03/7.png" alt=""></p></li><li><p>obj2被賦予新的值(  obj2= {foo: 1,bar: 2}  )</p><p><img src="/images/JS03/8.png" alt=""></p></li><li><p>操作obj2對應的對象(  obj2.baz = 3  )</p><p><img src="/images/JS03/9.png" alt=""></p></li><li><p>結論</p><p>所以最後打印obj1的時候跑出來的是{foo:1, bar: 2} !!!!!</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS之變量如何賦值&quot;&gt;&lt;a href=&quot;#JS之變量如何賦值&quot; class=&quot;headerlink&quot; title=&quot;JS之變量如何賦值&quot;&gt;&lt;/a&gt;JS之變量如何賦值&lt;/h1&gt;&lt;h2 id=&quot;變量有甚麼類型&quot;&gt;&lt;a href=&quot;#變量有甚麼類型&quot; class=&quot;headerlink&quot; title=&quot;變量有甚麼類型&quot;&gt;&lt;/a&gt;變量有甚麼類型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基本類型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Undefine，String，Boolean，Null，Number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用類型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Object包括它的延伸&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;探討的問題&quot;&gt;&lt;a href=&quot;#探討的問題&quot; class=&quot;headerlink&quot; title=&quot;探討的問題&quot;&gt;&lt;/a&gt;探討的問題&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;當我們給變量賦值另一個變量，會發生發生甚麼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意: &lt;/p&gt;
&lt;p&gt;​    在JS裡面，一個變量的值絕對不會指向另一個變量，而是指向內存&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP緩存</title>
    <link href="https://s95050937.github.io/HTTP-post06.html"/>
    <id>https://s95050937.github.io/HTTP-post06.html</id>
    <published>2020-07-30T12:48:18.000Z</published>
    <updated>2020-07-30T12:53:55.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP緩存"><a href="#HTTP緩存" class="headerlink" title="HTTP緩存"></a>HTTP緩存</h1><ol><li><p>原因: </p><blockquote><p>頻繁請求非常類費流量，且一直刷新使用者體驗相當不佳</p></blockquote></li><li><p>緩存內容</p><blockquote><p>主要是一些靜態資源(比如CSS，JS)</p></blockquote></li></ol><h2 id="HTTP緩存頭部-後面會詳談"><a href="#HTTP緩存頭部-後面會詳談" class="headerlink" title="HTTP緩存頭部(後面會詳談)"></a>HTTP緩存頭部(後面會詳談)</h2><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>請求/響應頭，緩存控制<br><img src="/images/HTTP06/1.png" alt=""></p><a id="more"></a><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>表資源過期時間，與max-age共存情況下優先級較低</p><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><p>資源最新修改時間，由服務器響應給瀏覽器</p><h3 id="if-Modified-Since"><a href="#if-Modified-Since" class="headerlink" title="if-Modified-Since"></a>if-Modified-Since</h3><p>與Last-Modified一組，瀏覽器請求服務器協帶，服務器會比對這個確認版本是否更新</p><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><p>資源標籤，服務器響應給瀏覽器</p><h3 id="if-None-Match"><a href="#if-None-Match" class="headerlink" title="if-None-Match"></a>if-None-Match</h3><p>與Etag一組，瀏覽器請求服務器協帶，服務器會比對這個確認版本是否更新</p><h2 id="HTTP-緩存工作方式"><a href="#HTTP-緩存工作方式" class="headerlink" title="HTTP 緩存工作方式"></a>HTTP 緩存工作方式</h2><p>現在開始假設服務器在跟瀏覽器對話</p><h2 id="情境一-服務器與瀏覽器約定一個文件過期時間-Expires"><a href="#情境一-服務器與瀏覽器約定一個文件過期時間-Expires" class="headerlink" title="情境一 服務器與瀏覽器約定一個文件過期時間(Expires)"></a>情境一 服務器與瀏覽器約定一個文件過期時間(Expires)</h2><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧!</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><blockquote><p>Expires(透過響應頭)主要是約定一個過期時間，在過期時間前客戶端不會向服務器要資源</p></blockquote><h3 id="延伸情況二"><a href="#延伸情況二" class="headerlink" title="延伸情況二"></a>延伸情況二</h3><blockquote><p>上面情況，假如文件過期後，該文件在服務器端沒有更新，就代表客戶端請求道的文件不就一模一樣，因此出了情境二</p></blockquote><h2 id="情境二-在Expires基礎上再加上Last-Modified以及if-Modified-Since"><a href="#情境二-在Expires基礎上再加上Last-Modified以及if-Modified-Since" class="headerlink" title="情境二 在Expires基礎上再加上Last-Modified以及if-Modified-Since"></a>情境二 在Expires基礎上再加上Last-Modified以及if-Modified-Since</h2><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧! 啊還有我怕到時候文件沒更新你又要我找給你，所以我回傳一個Last-Modified喔</span><br></pre></td></tr></table></figure></li><li><p>瀏覽器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">好，那等文件過期後我再回傳if-Modified-Since給你喔，方便你核對版本</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結-1"><a href="#總結-1" class="headerlink" title="總結:"></a>總結:</h3><p>if-Modified-Since與Last-Modified回傳樣子是</p><p><img src="/images/HTTP06/2.png" alt=""></p><blockquote><ol><li>如果Expires還沒過期，則瀏覽器聰明的使用緩存</li><li>過期了之後，瀏覽器請求時附上if-Modified-Since， 假如文件在服務器端有更新，服務器回傳304 Not Modified</li></ol></blockquote><h3 id="延伸情況三"><a href="#延伸情況三" class="headerlink" title="延伸情況三"></a>延伸情況三</h3><blockquote><p>情況二可以發現，if-Modified-Since與Last-Modified這兩個最小單位是秒，如果今天更新的時間與那兩個相差不到1秒文件就不會更新。假如今天我服務器的平台過大，比方說FB，總是會有這個情況發生</p></blockquote><h2 id="情況三-在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match-然後在加入max-age"><a href="#情況三-在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match-然後在加入max-age" class="headerlink" title="情況三 在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match, 然後在加入max-age"></a>情況三 在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match, 然後在加入max-age</h2><ol><li>max-age優先度比Expires高，因此這裡expires會被取代，單位是秒，表幾秒後緩存過期</li><li>Etag與if-None_Match的關係就像是Last-Modified以及if-Modified-Since</li><li>所以在這個情況Expires與Last-Modified其實沒啥用</li></ol><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧! 啊還有我怕到時候文件沒更新你又要我找給你，所以我回傳一個Last-Modified喔，但好像不夠精準，算了我再傳一個Etag以及max-age給你好了</span><br></pre></td></tr></table></figure></li><li><p>瀏覽器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">好，既然有更精準的Etag以及max-age那我當然看這個囉，那我之後再回傳if-None-Match給你做核對版本</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結-2"><a href="#總結-2" class="headerlink" title="總結:"></a>總結:</h3><blockquote><p>到這裡瀏覽器已經可以精準確定緩存時間以及緩存文件是否相同</p></blockquote><h2 id="CDN緩存"><a href="#CDN緩存" class="headerlink" title="CDN緩存"></a>CDN緩存</h2><p>CDN自己也有緩存，並將緩存的靜態資源傳給瀏覽器，跟瀏覽器的行為也很像</p><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">別找我，找我老弟CDN吧</span><br></pre></td></tr></table></figure></li></ul><h2 id="瀏覽器對緩存的影響"><a href="#瀏覽器對緩存的影響" class="headerlink" title="瀏覽器對緩存的影響"></a>瀏覽器對緩存的影響</h2><p><img src="/images/HTTP06/3.png" alt=""></p><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP緩存&quot;&gt;&lt;a href=&quot;#HTTP緩存&quot; class=&quot;headerlink&quot; title=&quot;HTTP緩存&quot;&gt;&lt;/a&gt;HTTP緩存&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;原因: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;頻繁請求非常類費流量，且一直刷新使用者體驗相當不佳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;緩存內容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要是一些靜態資源(比如CSS，JS)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;HTTP緩存頭部-後面會詳談&quot;&gt;&lt;a href=&quot;#HTTP緩存頭部-後面會詳談&quot; class=&quot;headerlink&quot; title=&quot;HTTP緩存頭部(後面會詳談)&quot;&gt;&lt;/a&gt;HTTP緩存頭部(後面會詳談)&lt;/h2&gt;&lt;h3 id=&quot;Cache-Control&quot;&gt;&lt;a href=&quot;#Cache-Control&quot; class=&quot;headerlink&quot; title=&quot;Cache-Control&quot;&gt;&lt;/a&gt;Cache-Control&lt;/h3&gt;&lt;p&gt;請求/響應頭，緩存控制&lt;br&gt;&lt;img src=&quot;/images/HTTP06/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP代理</title>
    <link href="https://s95050937.github.io/HTTP-post05.html"/>
    <id>https://s95050937.github.io/HTTP-post05.html</id>
    <published>2020-07-30T10:51:45.000Z</published>
    <updated>2020-07-30T10:54:46.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-代理"><a href="#HTTP-代理" class="headerlink" title="HTTP 代理"></a>HTTP 代理</h1><p>像是中間人的概念，對待裡來說既可以當服務端也可以當客戶端</p><h2 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h2><p><img src="/images/HTTP05/1.png" alt=""></p><a id="more"></a><h2 id="為何需要代理"><a href="#為何需要代理" class="headerlink" title="為何需要代理"></a>為何需要代理</h2><h3 id="1-抓包"><a href="#1-抓包" class="headerlink" title="1. 抓包"></a>1. 抓包</h3><p>能更好分析請求與安全測試</p><h3 id="2-FQ"><a href="#2-FQ" class="headerlink" title="2. FQ"></a>2. FQ</h3><p>俗稱的翻牆</p><p><img src="/images/HTTP05/2.png" alt=""></p><h3 id="3-匿名訪問"><a href="#3-匿名訪問" class="headerlink" title="3. 匿名訪問"></a>3. 匿名訪問</h3><p>刪除客戶端HTTP報文中的私人資料，比方說Cookie或是IP地址，</p><h3 id="4-過濾器"><a href="#4-過濾器" class="headerlink" title="4. 過濾器"></a>4. 過濾器</h3><p>比方說不希望孩童從網路上看到非該年齡層的內容，因此可以透過代理過慮服務端回傳的內容</p><p><img src="/images/HTTP05/3.png" alt=""></p><h2 id="補充-網關"><a href="#補充-網關" class="headerlink" title="補充(網關)"></a>補充(網關)</h2><p>又稱作協議轉換器，為資源與應用程序的黏合器</p><h3 id="示意圖-1"><a href="#示意圖-1" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="/images/HTTP05/4.png" alt=""></p><h3 id="講解"><a href="#講解" class="headerlink" title="講解"></a>講解</h3><p>從上圖可以發現和代理很類似，最關鍵的一點就是我們可以透過網關轉換協議，比方說上圖客戶端向網關發起HTTP協議，而後經過網觀象服務器端發起POP。</p><h3 id="分類"><a href="#分類" class="headerlink" title="分類"></a>分類</h3><p>Web在一端使用HTTP，另一端採用另一種協議可以這樣標示</p><ol><li><p>(/HTTP) 客戶端網關: 與客戶端採用其他協議，與服務端採用HTTP</p><p>記憶點: 叫客戶端網關可想像成他是幫客戶端轉換成HTTP協議的方式</p></li><li><p>(HTTP/) 服務端網關: 與服務端端採用其他協議，與客戶端採用HTTP</p><p>記憶點: 與客戶端相反</p></li></ol><h3 id="常見網關"><a href="#常見網關" class="headerlink" title="常見網關"></a>常見網關</h3><ol><li><p>(HTTP/ *) 服務器端Web網關</p></li><li><p>(HTTP/HTTPS) 服務器端安全網關</p><p> (將客戶端傳來的HTTP協議加密成HTTPS)</p></li><li><p>(HTTPS/HTTP) 客戶端安全網關 </p></li></ol><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP-代理&quot;&gt;&lt;a href=&quot;#HTTP-代理&quot; class=&quot;headerlink&quot; title=&quot;HTTP 代理&quot;&gt;&lt;/a&gt;HTTP 代理&lt;/h1&gt;&lt;p&gt;像是中間人的概念，對待裡來說既可以當服務端也可以當客戶端&lt;/p&gt;
&lt;h2 id=&quot;示意圖&quot;&gt;&lt;a href=&quot;#示意圖&quot; class=&quot;headerlink&quot; title=&quot;示意圖&quot;&gt;&lt;/a&gt;示意圖&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/HTTP05/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JS靜態與動態作用域</title>
    <link href="https://s95050937.github.io/JS-post02.html"/>
    <id>https://s95050937.github.io/JS-post02.html</id>
    <published>2020-07-29T14:27:49.000Z</published>
    <updated>2020-07-29T14:30:49.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS靜態與動態作用域"><a href="#JS靜態與動態作用域" class="headerlink" title="JS靜態與動態作用域"></a>JS靜態與動態作用域</h2><p>JavaScript使用的是靜態作用域，非動態這件事要先提前知道</p><h3 id="靜態作用域"><a href="#靜態作用域" class="headerlink" title="靜態作用域"></a>靜態作用域</h3><ol><li><p>懶人包 : </p><blockquote><p>會主動去尋找函數與變量定義時的狀況</p></blockquote></li><li><p>例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'靜態作用域'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">'動態作用域'</span></span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// '靜態作用域'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>分析 :</p><p>如果沒有作用域鏈的概念可以參考下面思維</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 前面都很正常的順順執行下來直到bar()</span><br><span class="line"><span class="number">2.</span> 當執行bar時候，會從全局作用域(因為bar執行的地方在全局作用域)裡面尋找bar聲明的地方</span><br><span class="line"><span class="number">3.</span> 進到bar函數作用域裡面(壓棧) <span class="comment">// 所在第六行</span></span><br><span class="line"><span class="number">4.</span> 在bar函數作用域裡面執行foo()，但在該函數作用域裡面沒有聲明foo，因此跑到上一層尋找，就是全局作用域</span><br><span class="line"><span class="number">5.</span> 找到foo聲明的地方，並進入foo作用域裡面</span><br><span class="line"><span class="number">5.</span> 試圖打印出a <span class="comment">// 此時所在是第四行</span></span><br><span class="line"><span class="number">6.</span> 因為foo作用域裡面沒有聲明變量a，因此又跑到全局作用域</span><br><span class="line"><span class="number">7.</span> 找到a(靜態作用域)並打印出來</span><br></pre></td></tr></table></figure></li></ol><h3 id="動態作用域"><a href="#動態作用域" class="headerlink" title="動態作用域"></a>動態作用域</h3><ol><li><p>懶人包: </p><blockquote><p>會到執行時的環境尋找</p></blockquote></li><li><p>例子(跟靜態相同): </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'靜態作用域'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">'動態作用域'</span></span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// '動態作用域'</span></span><br></pre></td></tr></table></figure><p>分析: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">前面五點都一模一樣直到第六點</span><br><span class="line"><span class="number">1.</span> 前面都很正常的順順執行下來直到bar()</span><br><span class="line"><span class="number">2.</span> 當執行bar時候，會從全局作用域(因為bar執行的地方在全局作用域)裡面尋找bar聲明的地方</span><br><span class="line"><span class="number">3.</span> 進到bar函數作用域裡面(壓棧) <span class="comment">// 所在第六行</span></span><br><span class="line"><span class="number">4.</span> 在bar函數作用域裡面執行foo()，但在該函數作用域裡面沒有聲明foo，因此跑到上一層尋找，就是全局作用域</span><br><span class="line"><span class="number">5.</span> 找到foo聲明的地方，並進入foo作用域裡面</span><br><span class="line"><span class="number">5.</span> 試圖打印出a </span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 這時候找不到a並不會跑到上一層作用域鏈查找，而是回到執行時的環境也就是第八行所在的作用域查找</span><br><span class="line"><span class="number">7.</span> 這時候就會發現a是動態作用域並打印出</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS靜態與動態作用域&quot;&gt;&lt;a href=&quot;#JS靜態與動態作用域&quot; class=&quot;headerlink&quot; title=&quot;JS靜態與動態作用域&quot;&gt;&lt;/a&gt;JS靜態與動態作用域&lt;/h2&gt;&lt;p&gt;JavaScript使用的是靜態作用域，非動態這件事要先提前知道&lt;/p&gt;
&lt;h3 id=&quot;靜態作用域&quot;&gt;&lt;a href=&quot;#靜態作用域&quot; class=&quot;headerlink&quot; title=&quot;靜態作用域&quot;&gt;&lt;/a&gt;靜態作用域&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;懶人包 : &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;會主動去尋找函數與變量定義時的狀況&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例子:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;靜態作用域&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;動態作用域&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar() &lt;span class=&quot;comment&quot;&gt;// &#39;靜態作用域&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://s95050937.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP的長連接與短連接</title>
    <link href="https://s95050937.github.io/HTTP-post04.html"/>
    <id>https://s95050937.github.io/HTTP-post04.html</id>
    <published>2020-07-29T11:47:18.000Z</published>
    <updated>2020-07-29T11:49:46.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP的長連接與短連接"><a href="#HTTP的長連接與短連接" class="headerlink" title="HTTP的長連接與短連接"></a>HTTP的長連接與短連接</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote><p>其實HTTP的長連接與短連接是在講TCP的長連接與短連接</p></blockquote><h2 id="實際案例"><a href="#實際案例" class="headerlink" title="實際案例"></a>實際案例</h2><p>打開台大的網站按F12，可以發現有一個Connection: Keep-Alive，那個就是長連結</p><p><img src="/images/HTTP04/1.png" alt=""></p><a id="more"></a><h2 id="差別"><a href="#差別" class="headerlink" title="差別"></a>差別</h2><p>短連接 </p><blockquote><p>建立連結 =&gt; 數據傳輸 =&gt; 關閉連結 =&gt; ….  =&gt; 建立連結 =&gt; 數據傳輸 =&gt; 關閉連結 =&gt;</p></blockquote><p>長連結(可以省去TCP連接與關閉的時間)</p><p>​    通常關閉連結會是服務端，因為隨著連結的客戶端越來越多，服務端會有撐不下去的時候</p><blockquote><p>建立連結 =&gt; 數據傳輸 =&gt; …. (保持連結) …. =&gt;  數據傳輸 =&gt; 關閉連結</p></blockquote><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>具體誰好誰壞沒有一定，當然還是要視情況而定</p><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP的長連接與短連接&quot;&gt;&lt;a href=&quot;#HTTP的長連接與短連接&quot; class=&quot;headerlink&quot; title=&quot;HTTP的長連接與短連接&quot;&gt;&lt;/a&gt;HTTP的長連接與短連接&lt;/h1&gt;&lt;h2 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;其實HTTP的長連接與短連接是在講TCP的長連接與短連接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;實際案例&quot;&gt;&lt;a href=&quot;#實際案例&quot; class=&quot;headerlink&quot; title=&quot;實際案例&quot;&gt;&lt;/a&gt;實際案例&lt;/h2&gt;&lt;p&gt;打開台大的網站按F12，可以發現有一個Connection: Keep-Alive，那個就是長連結&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/HTTP04/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://s95050937.github.io/tags/HTTP/"/>
    
  </entry>
  
</feed>
