<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>this、apply、call、bind (轉載)</title>
      <link href="/juejin04.html"/>
      <url>/juejin04.html</url>
      
        <content type="html"><![CDATA[<h1 id="this、apply、call、bind"><a href="#this、apply、call、bind" class="headerlink" title="this、apply、call、bind"></a>this、apply、call、bind</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903496253177863" target="_blank" rel="noopener">https://juejin.im/post/6844903496253177863</a></p></blockquote><h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><blockquote><p>this 永遠指向最後調用他的對象</p></blockquote><p>我常拿來判斷的想法</p><blockquote><p>看他是被當作對象內的方法調用還是全局函數</p></blockquote><p>直接來看例子比較好懂 </p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Mike'</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    name: <span class="string">'Mary'</span>,</span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.getName() <span class="comment">// 很明顯是Mary，因為this指向的是最後調用他的對象</span></span><br><span class="line"><span class="built_in">window</span>.foo.getName() <span class="comment">// 這也很明顯是Mary，因為會是最後調用的對象(即foo)</span></span><br><span class="line"><span class="keyword">let</span> bar = foo.getName <span class="comment">// 記住這是賦與內存地址給他，執行的時候並不會變成 window.foo.getName</span></span><br><span class="line">bar() <span class="comment">// Mike (window.bar())</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>這句超級重要</p><blockquote><p>// 記住這是賦與內存地址給他，執行的時候並不會變成 window.foo.getName</p></blockquote><p>題外話: </p><p>​    不知道大家有沒有發現我這裡第一行定義是用var來定義，因為如果用let 來定義的話，並不會變成全局變量(window.name)，還有這裡如果用嚴格模式會報錯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span> </span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Mike'</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    ... <span class="comment">// 底下都一樣</span></span><br></pre></td></tr></table></figure><p><img src="/images/juejin04/1.png" alt=""></p><h2 id="如何改變this指向"><a href="#如何改變this指向" class="headerlink" title="如何改變this指向"></a>如何改變this指向</h2><h3 id="箭頭函數-之後會開一篇出來講先pass"><a href="#箭頭函數-之後會開一篇出來講先pass" class="headerlink" title="箭頭函數(之後會開一篇出來講先pass)"></a>箭頭函數(之後會開一篇出來講先pass)</h3><p>可以避免很多坑this指向最後調用對象的坑，</p><blockquote><p>箭頭函數的this始終指向函數定義時的this，而非執行時。</p></blockquote><p>​    箭頭函數中沒有this綁定，必須通過查找作用域鏈來決定其值，如果箭頭函數被非箭頭函數包含，則this綁定的是最近一層非箭頭函數的this，否則，this為undefined</p><p>例子: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"windowsName"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是全局函數!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()</span><br><span class="line">    &#125;, <span class="number">100</span>);                <span class="comment">// Cherry </span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()</span><br><span class="line">    &#125;, <span class="number">100</span>);                <span class="comment">// 我是全局函數!(因為setTimeout會被window調用)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()</span><br></pre></td></tr></table></figure><p>注意: </p><blockquote><p><code>setTimeout</code>中使用普通函數，1秒後函數執行時，這時函數其實是在全局作用域執行</p></blockquote><h3 id="在函數內部使用-this-this"><a href="#在函數內部使用-this-this" class="headerlink" title="在函數內部使用 _this = this"></a>在函數內部使用 _this = this</h3><p>這裡用了一個很聰明的辦法，就是：</p><blockquote><p>利用_this變量去紀錄調用過程的this對象</p></blockquote><p>例子: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ar name = <span class="string">"windowsName"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"></span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>; <span class="comment">// 這裡在調用時會是a這個對象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;name: "Cherry", func1: ƒ, func2: ƒ&#125;</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      _this.func1() </span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()       <span class="comment">// Cherry</span></span><br></pre></td></tr></table></figure><p><img src="/images/juejin04/2.png" alt=""></p><h3 id="使用apply、call、bind"><a href="#使用apply、call、bind" class="headerlink" title="使用apply、call、bind"></a>使用apply、call、bind</h3><p>先來看例子晚點講原理</p><p>可以發現其實三個的用法幾乎一樣，只有bind要再執行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"Cherry"</span>,</span><br><span class="line"></span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// apply</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.apply(a), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.call(a), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bind</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.func1()  <span class="comment">// Cherry</span></span><br><span class="line">    &#125;.bind(a)(), <span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.func2()</span><br></pre></td></tr></table></figure><h2 id="apply、call、bind-區別"><a href="#apply、call、bind-區別" class="headerlink" title="apply、call、bind 區別"></a>apply、call、bind 區別</h2><h3 id="apply以及call差別"><a href="#apply以及call差別" class="headerlink" title="apply以及call差別"></a>apply以及call差別</h3><blockquote><p>基本上是沒差，只是傳遞參數apply是用array而call是分批傳入</p></blockquote><p>定義: </p><blockquote><p>fun.apply (thisArg，[argsArray])</p><p>fun.call (thisArg[, arg1[, arg2[, …]]])</p></blockquote><p>看起來有夠複雜，其實就是最上面講得那句。直接看例子就懂了</p><p>例子： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">    name : <span class="string">"Cherry"</span>,</span><br><span class="line">    fn : <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.apply(a,[<span class="number">1</span>,<span class="number">2</span>])     <span class="comment">// 3</span></span><br><span class="line">b.call(a,<span class="number">1</span>,<span class="number">2</span>)   <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="bind-和apply、call-區別"><a href="#bind-和apply、call-區別" class="headerlink" title="bind 和apply、call 區別"></a>bind 和apply、call 區別</h3><p>bind跟他們兩個的最大區別就是</p><blockquote><p>bind是創建函數，還需要手動調用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;</span><br><span class="line">    name : <span class="string">"Cherry"</span>,</span><br><span class="line">    fn : <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( a + b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.fn;</span><br><span class="line">b.bind(a,<span class="number">1</span>,<span class="number">2</span>)()           <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> juejin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>淺談instanceof 和typeof 的實現原理 (轉載)</title>
      <link href="/juejin03.html"/>
      <url>/juejin03.html</url>
      
        <content type="html"><![CDATA[<h1 id="淺談instanceof-和typeof-的實現原理-轉載"><a href="#淺談instanceof-和typeof-的實現原理-轉載" class="headerlink" title="淺談instanceof 和typeof 的實現原理 (轉載)"></a>淺談instanceof 和typeof 的實現原理 (轉載)</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903613584654344" target="_blank" rel="noopener">https://juejin.im/post/6844903613584654344</a></p></blockquote><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>一般被用於判斷一個變量的類型，可判斷七種類型</p><blockquote><p>number<code>,</code>string<code>,</code>object<code>,</code>boolean<code>,</code>function<code>,</code>undefined<code>,</code>symbol</p></blockquote><p>但有一個很麻煩的事情，只能知道那個變量是object不能知道更精確的類型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>  s === <span class="string">'object'</span>  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 還必須靠instanceof</span></span><br><span class="line">s <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>而且還有一個老梗，就是null也會顯示object (上古bug)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>所以typeof通常只被用來檢查基本類型</p><p>附註: 有一個不錯的方法</p><a id="more"></a><h3 id="不錯的方法-Object-prototype-toString-call-element"><a href="#不錯的方法-Object-prototype-toString-call-element" class="headerlink" title="不錯的方法: Object.prototype.toString.call(element)"></a>不錯的方法: Object.prototype.toString.call(element)</h3><p>可以利用這個做出更精銳的判斷</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>) <span class="comment">// "[object Number]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">'hi'</span>) <span class="comment">// "[object String]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;<span class="attr">a</span>:<span class="string">'hi'</span>&#125;) <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>,<span class="string">'a'</span>]) <span class="comment">// "[object Array]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>) <span class="comment">// "[object Boolean]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="comment">// "[object Function]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) <span class="comment">// "[object Null]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">// "[object Undefined]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>(<span class="number">1</span>)) <span class="comment">// "[object Symbol]"</span></span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在此之前要先知道，JS在底層儲存變量的時候時候，會在變量的機器碼的低位1-3位存儲其類型信息(二進制)</p><blockquote><ul><li>000：對象</li><li>010：浮點數</li><li>100：字符串</li><li>110：布爾</li><li>1：整數</li></ul></blockquote><p>那我們也就知道為啥null會跑出object了，因為null的所有機器碼全部都是0</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>在講這個之前請務必先看以下文章，因為要先建立原型鍊的概念，講解也會用該文的概念去解釋</p><blockquote><p><a href="https://s95050937.github.io/zhihu02.html#more">https://s95050937.github.io/zhihu02.html#more</a></p></blockquote><h3 id="這做啥用的"><a href="#這做啥用的" class="headerlink" title="這做啥用的"></a>這做啥用的</h3><p>主要的作用是判斷一個實例是否屬於某種類型 (也可以是父類型或者祖先類型)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> Person()</span><br><span class="line">nicole <span class="keyword">instanceof</span> Person <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Programmer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">Programmer.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">let</span> nicole = <span class="keyword">new</span> Programmer()</span><br><span class="line">nicole <span class="keyword">instanceof</span> person <span class="comment">// true</span></span><br><span class="line">nicole <span class="keyword">instanceof</span> Programmer <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="整理出來的偽代碼"><a href="#整理出來的偽代碼" class="headerlink" title="整理出來的偽代碼"></a>整理出來的偽代碼</h3><blockquote><p>其實就是先找右邊的prototype( 因為機器的prototype會等於實例的__ proto __ )</p><p> 然後跟左邊的p比較如果不相等就再往上找直到取到null 並 return false</p></blockquote><p>代碼: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不難就上面提到的概念看一下應該就會懂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new_instance_of</span>(<span class="params">leftVaule, rightVaule</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> rightProto = rightVaule.prototype; <span class="comment">// 取右表达式的 prototype 值</span></span><br><span class="line">    leftVaule = leftVaule.__proto__; <span class="comment">// 取左表达式的__proto__值</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftVaule === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftVaule === rightProto) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        leftVaule = leftVaule.__proto__ </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>既然知道到底再比較甚麼就好辦啦，直接看例子吧</p><h4 id="Object-instanceof-Object"><a href="#Object-instanceof-Object" class="headerlink" title="Object instanceof Object"></a>Object instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object 的 prototype 是 NO1</p><p>左邊: Object的p往上找會有NO1 </p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/1.png" alt=""></p><h3 id="Function-instanceof-Function"><a href="#Function-instanceof-Function" class="headerlink" title="Function instanceof Function"></a>Function instanceof Function</h3><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Function的prototype是NO2</p><p>左邊: Function的p往上就是NO2</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/2.png" alt=""></p><h4 id="Function-instanceof-Object"><a href="#Function-instanceof-Object" class="headerlink" title="Function instanceof Object"></a>Function instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object的prototype指向NO1</p><p>左邊: Function的p往上找會有NO1</p></blockquote><p>示意圖(因為右邊只需要prototype是啥，所以我在這裡沒畫Object的proto): </p><p><img src="/images/juejin03/3.png" alt=""></p><h4 id="Foo-instanceof-Foo"><a href="#Foo-instanceof-Foo" class="headerlink" title="Foo instanceof Foo"></a>Foo instanceof Foo</h4><p>答案: </p><blockquote><p>false</p></blockquote><p>解析: </p><blockquote><p>右邊: Foo.prototype 指向某一個prototype</p><p>左邊: 但Foo的p往上找找不到prototype</p></blockquote><p>示意圖:</p><p>附註: </p><p>​    因為右邊僅需要找到prototype所以我沒畫Foo.prototype.__ proto __指向誰(NO1)，從這張圖可以發現從Foo往上找會直接找到根本找不到 Foo.prototype，因此會返回 false</p><p><img src="/images/juejin03/4.png" alt=""></p><h4 id="Foo-instanceof-Object"><a href="#Foo-instanceof-Object" class="headerlink" title="Foo instanceof Object"></a>Foo instanceof Object</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Object.prototype 指向NO1</p><p>左邊: Foo的p往上找找的到NO1</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/5.png" alt=""></p><h4 id="Foo-instanceof-Function"><a href="#Foo-instanceof-Function" class="headerlink" title="Foo instanceof Function"></a>Foo instanceof Function</h4><p>答案: </p><blockquote><p>true</p></blockquote><p>解析: </p><blockquote><p>右邊: Function.prototype 指向NO2</p><p>左邊: 但Foo的p往上找的到NO2</p></blockquote><p>示意圖: </p><p><img src="/images/juejin03/6.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> juejin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 閉包</title>
      <link href="/JS06.html"/>
      <url>/JS06.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-閉包"><a href="#JavaScript-閉包" class="headerlink" title="JavaScript 閉包"></a>JavaScript 閉包</h1><h2 id="先來看一下各個不同地方的閉包說法"><a href="#先來看一下各個不同地方的閉包說法" class="headerlink" title="先來看一下各個不同地方的閉包說法"></a>先來看一下各個不同地方的閉包說法</h2><blockquote><ol><li>你不知道的JavaScript: 當函數可以記住並訪問所在的詞法作用域時及形成閉包，即使不是在該函數的詞法作用域內</li><li>JavaScript高级程序设计: 閉包是指有權訪問令一個函數作用域變量的函數</li><li>MDN: 閉包（Closure）是函式以及該函式被宣告時所在的作用域環境（lexical environment）的組合。</li></ol></blockquote><h2 id="我自己的理解"><a href="#我自己的理解" class="headerlink" title="我自己的理解"></a>我自己的理解</h2><p>如果我們把函數作用域想像成一個書包(從外面是看不到裡面的內容的)，那閉包就很像一個超一流扒手，可以偷窺到你書包的東西。</p><a id="more"></a><h2 id="先來個情境"><a href="#先來個情境" class="headerlink" title="先來個情境"></a>先來個情境</h2><p>聲明一個背包函數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">package</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pencilCase = &#123;</span><br><span class="line">    <span class="string">'原子筆'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'橡皮擦'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'水壺'</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(pencilCase); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外界的人看起來會長怎樣(那整個黃黃的一塊講的艱澀一點就是package函數的詞法作用域)</p><p><img src="/images/JS06/1.png" alt=""></p><p>假設今天有一個扒手函數可以調用到鉛筆盒那就形成閉包(如同先前定義的)</p><p>附註: 這裡我對package裡面改寫成這樣:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">package</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pencilCase = &#123;</span><br><span class="line">    <span class="string">'原子筆'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'橡皮擦'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'水壺'</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getPencilCase() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(pencilCase);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之後扒手開扒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pickpocket = package() <span class="comment">// 通常函數執行完該作用域的東西就該銷毀了</span></span><br><span class="line">pickpocket.getPencilCase()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/2.png" alt=""><br>可以發現確實成功獲得書包裡面的鉛筆盒!!!!</p><h2 id="其實這跟棧內存有關"><a href="#其實這跟棧內存有關" class="headerlink" title="其實這跟棧內存有關"></a>其實這跟棧內存有關</h2><h3 id="擷取"><a href="#擷取" class="headerlink" title="擷取"></a>擷取</h3><blockquote><p><a href="https://juejin.im/post/6844904099771580423" target="_blank" rel="noopener">https://juejin.im/post/6844904099771580423</a></p></blockquote><blockquote><p>棧內存銷毀：</p><ul><li>全局棧內存：關掉頁面的時候才會銷毀</li><li>私有棧內存：<ul><li>1.一般情況下，函數只要執行完成，形成的私有棧內存就會被銷毀釋放掉（排除出現無限極遞歸、出現死循環的模式）</li><li>2.但是一旦棧內存中的某個東西（一般都是堆地址）被私有作用域以外的事物給佔用了，則當前私有棧內存不能立即被釋放銷毀（特點：私有作用域中的私有變量等信息也保留下來了=&gt;這種函數執行形成不能被釋放的私有棧內存，也叫做閉包）</li></ul></li></ul></blockquote><p>從上面兩個可以得出函數作用域裡面確實不會被立即銷毀</p><h3 id="到此我們可以知道"><a href="#到此我們可以知道" class="headerlink" title="到此我們可以知道"></a>到此我們可以知道</h3><blockquote><p>只要外面有任何事物佔據了私有作用域裡面的東西就會產生閉包(保存該函數作用域)</p></blockquote><p>所以其實我們要產生閉包的核心觀念是要讓外界竊聽到函數內部，這才是為何我們在函數內要return函數的原因(讓外界卡住內存)的原因</p><p>所以下面講幾個例子吧!</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="範例一-最基本閉包"><a href="#範例一-最基本閉包" class="headerlink" title="範例一 最基本閉包"></a>範例一 最基本閉包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baz</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = foo(<span class="number">5</span>) <span class="comment">// bar卡住了內存</span></span><br><span class="line">bar(<span class="number">4</span>) <span class="comment">// 這個4其實啥意義都沒有</span></span><br><span class="line">bar(<span class="number">5</span>) <span class="comment">// 這個5也沒啥意義</span></span><br></pre></td></tr></table></figure><p><img src="/images/JS06/3.png" alt=""></p><h3 id="改一下範例一看會長怎樣"><a href="#改一下範例一看會長怎樣" class="headerlink" title="改一下範例一看會長怎樣"></a>改一下範例一看會長怎樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baz</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar1 = foo(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> bar2 = foo(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">bar1()</span><br><span class="line">bar1()</span><br><span class="line"></span><br><span class="line">bar2()</span><br><span class="line">bar2()</span><br></pre></td></tr></table></figure><p>可以發現確實可以訪問到num，且我們這邊可以發現會產生不同的值，代表這兩個都會儲存內存，因此我們要小心使用，不然可能會一直浪費內存<br><img src="/images/JS06/4.png" alt=""></p><h3 id="還可以這樣"><a href="#還可以這樣" class="headerlink" title="還可以這樣"></a>還可以這樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  spy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++num);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">5</span>)</span><br><span class="line">spy()</span><br><span class="line">spy()</span><br><span class="line">spy()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/5.png" alt=""></p><h3 id="或是這樣"><a href="#或是這樣" class="headerlink" title="或是這樣"></a>或是這樣</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bar =&#123;</span><br><span class="line">    geta() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(a++);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baz1 = foo(<span class="number">2</span>)</span><br><span class="line">baz1.geta() </span><br><span class="line">baz1.geta()</span><br><span class="line"><span class="keyword">let</span> baz2 = foo(<span class="number">5</span>)</span><br><span class="line">baz2.geta()</span><br><span class="line">baz2.geta()</span><br></pre></td></tr></table></figure><p><img src="/images/JS06/6.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript面試 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 世界万物诞生记 (原型鍊) (轉載)</title>
      <link href="/zhihu02.html"/>
      <url>/zhihu02.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-世界万物诞生记-原型鍊-轉載"><a href="#JavaScript-世界万物诞生记-原型鍊-轉載" class="headerlink" title="JavaScript 世界万物诞生记 (原型鍊) (轉載)"></a>JavaScript 世界万物诞生记 (原型鍊) (轉載)</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/22989691" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22989691</a></p></blockquote><p>可以把prototype想像成那台機器會幹啥(有點像繼承會做的事情)</p><p>而<strong>proto</strong>(p) 則可以想像特性繼承(有點像繼承個性或是特徵)</p><p>看完全部再回來</p><blockquote><ol><li>比方說Object的prototype會是NO1是因為他在模仿神創造對象</li><li>Function是一台機器所以他被歸類在NO2(繼承NO2是機器的特性)，他會創造機器，因此他的prototype是NO2</li><li>機器會做甚麼是一定是根據prototype(Animal會吃跟移動，魚會游泳)</li><li>靜態特性則是proto(大家都是機器因此proto往上找必定會有NO2)</li></ol></blockquote><h2 id="最終圖"><a href="#最終圖" class="headerlink" title="最終圖"></a>最終圖</h2><p><img src="/images/zhihu02/1.png" alt=""></p><a id="more"></a><ol><li><p>起初JS世界只有null(只存在虛無)</p><p><img src="/images/zhihu02/2.png" alt=""></p></li></ol><ol start="2"><li><p>從無中誕生了神NO1</p><p><img src="/images/zhihu02/3.png" alt=""></p></li><li><p>神創造了Object機器開始生產Object(開始有生物)</p><p><img src="/images/zhihu02/4.png" alt=""></p></li><li><p>久了之後，他覺得只創造一些Object生物好像有點太單調了，於是用特徵分類出了創造String機器的String，創造Number機器的Number…</p><p><img src="/images/zhihu02/5.png" alt=""></p></li><li><p>他覺得這些機器不是也可以統整成一個機器嗎，於是創造了NO2代表了這個東西是機器</p><blockquote><p>題外話: 這些機器當然也像Object一樣也需要各自的模板對象，也就是它们的prototype属性指向的那个对象。显然它们的模板对象应该是继承自No. 1对象的，但後面太麻煩先暫時不記錄</p></blockquote><p><img src="/images/zhihu02/6.png" alt=""></p></li><li><p>造物者HEN滿意，有了Object機器創造Object，有String創造String。但她很快發現他缺少了一個關鍵，就是創造機器的機器！於是他創造了Function</p><blockquote><p>Function 是一台機器所以他的 p 是 NO2，他是根據NO2模板創造的，因此他的prototype也是NO2</p></blockquote><p><img src="/images/zhihu02/7.png" alt=""></p><p>一個很酷的事</p><blockquote><p>Object作为一个机器可以看做是有由Function制造出来的，而Function作为一个对象可以看做是由Object制造出来的。這就是雞生蛋還是蛋生雞</p></blockquote></li><li><p>這時候已經有函數可以創造機器(一個類的概念)，於是將可以創造那個類的機器稱為構造函數，可以讓該類做甚麼事情的稱為普通函數</p><p>比方說以下: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 構造函數</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bird</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> redBird = <span class="keyword">new</span> Bird(<span class="string">'#FF0000'</span>);</span><br><span class="line"><span class="comment">// 这是一台通过晃动鸟的翅膀，让鸟飞起来的简陋的机器(普通函數)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeBirdFly</span>(<span class="params">bird</span>) </span>&#123;</span><br><span class="line">    shakeBirdWing(bird);</span><br><span class="line">&#125;</span><br><span class="line">makeBirdFly(redBird);</span><br></pre></td></tr></table></figure></li><li><p>這裡有點複雜</p><ol><li><p>NO1覺得所有機器都都p都是NO2讓這個世界好像有點扁，且他發現機器跟機器有關係不能像之前一樣(第五點的圖片) ，比方說此圖，Fish跟Bird明明都是動物可是如果照圖這樣分看不出關係，而且他們的模板對象有重疊，有夠浪費空間</p><p><img src="/images/zhihu02/8.png" alt=""></p></li><li><p>於是NO1想到那我就讓Bird的模板對象繼承(p)自Animal的模板對象不就得了</p><p><img src="/images/zhihu02/9.png" alt=""></p></li><li><p>現在這樣好多了，世界變得有規律一些了，但發現機器跟機器之間還是沒啥關係(Fish機器，Aniaml機器，Bird機器看似都沒關係)，我們解決的只是他們的行為關係。</p><p><img src="/images/zhihu02/10.png" alt=""></p></li><li><p>其實很簡單用剛剛的方式就好</p><p><img src="/images/zhihu02/11.png" alt=""></p></li></ol></li><li><p>最終樣子</p><p><img src="/images/zhihu02/12.png" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> zhihu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js隱式轉換相關知識(轉載)</title>
      <link href="/zhihu01.html"/>
      <url>/zhihu01.html</url>
      
        <content type="html"><![CDATA[<h1 id="js隱式轉換相關知識"><a href="#js隱式轉換相關知識" class="headerlink" title="js隱式轉換相關知識"></a>js隱式轉換相關知識</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/38976424" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38976424</a></p></blockquote><h2 id="轉換"><a href="#轉換" class="headerlink" title="!轉換"></a>!轉換</h2><p><img src="/images/zhihu01/1.png" alt=""></p><p>轉換成Boolean然後取反，沒啥特別的</p><a id="more"></a><h2 id="轉換-1"><a href="#轉換-1" class="headerlink" title="== 轉換"></a>== 轉換</h2><h3 id="兩邊都是引用類型"><a href="#兩邊都是引用類型" class="headerlink" title="兩邊都是引用類型"></a>兩邊都是引用類型</h3><p>直接比較內存中的地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([]==[]) <span class="comment">//false，指针指向的地址不同</span></span><br></pre></td></tr></table></figure><h3 id="如果兩邊類型不一致，則兩邊都轉成number類型"><a href="#如果兩邊類型不一致，則兩邊都轉成number類型" class="headerlink" title="如果兩邊類型不一致，則兩邊都轉成number類型"></a><strong>如果兩邊類型不一致，則兩邊都轉成number類型</strong></h3><blockquote><p>引用類型先調用valueOf()方法，如果能轉成數字就OK</p><p>不能轉成數字的話，就調用toString()轉成字符串。</p><p>再轉換成數字</p></blockquote><p>一些例子</p><ol><li><pre><code class="js"><span class="keyword">var</span> a = <span class="string">'123'</span><span class="built_in">console</span>.log(a==<span class="literal">false</span>)  <span class="comment">//false,'123'转成数字是123,右侧转成数字是0,最终比较123==0</span><span class="built_in">console</span>.log(a == <span class="number">123</span>)  <span class="comment">//true,右边是数字，直接转换左右即可</span>&lt;!--￼<span class="number">1</span>--&gt;</code></pre></li><li><pre><code class="js"><span class="keyword">var</span> a = {} <span class="built_in">console</span>.log(a == <span class="number">1</span>)<span class="comment">//上面a==1在js解释引擎中的执行过程如下:</span><span class="comment">//a.valueOf()获取到的不是基本类型，调用a.toString()得到'[object Object]'</span><span class="string">'[object Object]'</span> == <span class="number">1</span>;<span class="comment">//两边类型不致，左侧转成数字</span><span class="literal">NaN</span> == <span class="number">1</span>;<span class="comment">//false,NaN跟任何类型比较都为false</span>&lt;!--￼<span class="number">2</span>--&gt;</code></pre></li></ol><p>思想構成:</p><blockquote><p><strong>一個中心(左右兩邊轉換成number為中心)，兩個基本點（轉換條件：1.類型不同時才轉換2.兩邊都是引用類型時直接比較地址），一國兩制(null、NaN、undefined使用一套製作，其它的使用另一套制度)</strong></p></blockquote><h2 id="大於或小於符"><a href="#大於或小於符" class="headerlink" title="大於或小於符"></a>大於或小於符</h2><blockquote><p><strong>字符串類型比較大小時，不進行類型轉換，而是逐位比較ascii碼</strong></p><p><strong>第1位不同則返回結果，否則繼續比較第2位，直到某一位不同為止</strong></p></blockquote><h2 id="號規則"><a href="#號規則" class="headerlink" title="+號規則"></a>+號規則</h2><p>+號運算符即可以對兩個數相加，也可以連接字符串，那如果是[1,2,3]+4這種情況下又會發生什麼呢？這就需要我們了解相應的規則，為了方便描述，我們把+號左側的值叫做A，右側的叫做B：</p><ol><li>如果A和B都是number類型，直接相加；</li><li>接下來看A或B中是否有一個是否為string類型，如果有，則將另一個也轉成字符串，然後連接；</li><li>既不是number,也不是string,則按如下規則轉換：<br>1.能轉換成數字，返回之<br>2.否則調用valueOf()，如果執行結果是基本類型，返回之；<br>3.否則調用toString()，如果執行結果是基礎類型，返回之；<br>4.無法得到原始值，拋異常。<br><img src="/images/zhihu01/2.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> zhihu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(譯) 送你 43 道 JavaScript 面试题 (轉載)</title>
      <link href="/juejin02.html"/>
      <url>/juejin02.html</url>
      
        <content type="html"><![CDATA[<h1 id="译-送你-43-道-JavaScript-面试题"><a href="#译-送你-43-道-JavaScript-面试题" class="headerlink" title="[译] 送你 43 道 JavaScript 面试题"></a>[译] 送你 43 道 JavaScript 面试题</h1><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6844903869378461710" target="_blank" rel="noopener">https://juejin.im/post/6844903869378461710</a></p></blockquote><h2 id="第三題"><a href="#第三題" class="headerlink" title="第三題"></a>第三題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  radius: <span class="number">10</span>,</span><br><span class="line">  diameter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.radius * <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  perimeter: <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">shape.diameter()</span><br><span class="line">shape.perimeter()</span><br></pre></td></tr></table></figure><a id="more"></a><p>我的答案: </p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 and 62.83185307179586</span><br></pre></td></tr></table></figure></blockquote><p>正確答案</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 and NaN</span><br></pre></td></tr></table></figure></blockquote><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><blockquote><p>对于箭头函数，<code>this</code>关键字指向是它所在上下文（定义时的位置）的环境，与普通函数不同！ 这意味着当我们调用<code>perimeter</code>时，它不是指向<code>shape</code>对象，而是指其定义时的环境（window）。没有值<code>radius</code>属性，返回<code>undefined</code>。</p></blockquote><h2 id="第五題-我覺得滿酷的"><a href="#第五題-我覺得滿酷的" class="headerlink" title="第五題 (我覺得滿酷的)"></a>第五題 (我覺得滿酷的)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;</span><br><span class="line">  size: <span class="string">"small"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mouse = &#123;</span><br><span class="line">  name: <span class="string">"Mickey"</span>,</span><br><span class="line">  small: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">mouse[bird.size] <span class="comment">// true </span></span><br><span class="line">mouse[bird[<span class="string">"size"</span>]] <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="第七題-不會錯的小概念"><a href="#第七題-不會錯的小概念" class="headerlink" title="第七題(不會錯的小概念)"></a>第七題(不會錯的小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(b === c); <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因為b是對象，用===不會隱式轉型</span></span><br></pre></td></tr></table></figure><h2 id="第12題"><a href="#第12題" class="headerlink" title="第12題"></a>第12題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> Person(<span class="string">"Lydia"</span>, <span class="string">"Hallie"</span>);</span><br><span class="line"><span class="keyword">const</span> sarah = Person(<span class="string">"Sarah"</span>, <span class="string">"Smith"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lydia);</span><br><span class="line"><span class="built_in">console</span>.log(sarah);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>Person {firstName: “Lydia”, lastName: “Hallie”}<code>and</code>undefined</p></blockquote><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>new創造構造函數，然後sarah執行函數會定義全局的firstName以及lastName</p><h2 id="第16題"><a href="#第16題" class="headerlink" title="第16題"></a>第16題</h2><p>詭異的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonInfo</span>(<span class="params">one, two, three</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(one);</span><br><span class="line">  <span class="built_in">console</span>.log(two);</span><br><span class="line">  <span class="built_in">console</span>.log(three);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">"Lydia"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br></pre></td></tr></table></figure><p>答案</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">""</span>, <span class="string">"is"</span>, <span class="string">"years old"</span>] </span><br><span class="line">Lydia</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="第25題-小概念"><a href="#第25題-小概念" class="headerlink" title="第25題(小概念)"></a>第25題(小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">"one"</span>, <span class="attr">b</span>: <span class="string">"two"</span>, <span class="attr">a</span>: <span class="string">"three"</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>{ a: “three”, b: “two” }</p></blockquote><h2 id="第29題"><a href="#第29題" class="headerlink" title="第29題"></a>第29題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; </span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>456</p></blockquote><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>利用[??]， 記得裡面要設成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; <span class="comment">// 這樣會把他當成變量</span></span><br><span class="line"><span class="comment">// 如果要設定a對象鑑b的值 : a['b']</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123;[object Object]: 123&#125;</span></span><br></pre></td></tr></table></figure><p>所以那一題其實是這樣</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>; </span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;[object Object]: 123&#125;</span></span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;[object Object]: 456&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><h2 id="第35題-小概念"><a href="#第35題-小概念" class="headerlink" title="第35題(小概念)"></a>第35題(小概念)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>); <span class="comment">// 因為是對象所以為真值</span></span><br></pre></td></tr></table></figure><h2 id="第43題"><a href="#第43題" class="headerlink" title="第43題"></a>第43題</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([...<span class="string">"Lydia"</span>];)</span><br></pre></td></tr></table></figure><p>答案: </p><blockquote><p>[“L”, “y”, “d”, “i”, “a”]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> juejin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>juejin_編寫高質量可維護的代碼之優化邏輯判斷(轉載)</title>
      <link href="/juejin01.html"/>
      <url>/juejin01.html</url>
      
        <content type="html"><![CDATA[<h1 id="編寫高質量可維護的代碼之優化邏輯判斷"><a href="#編寫高質量可維護的代碼之優化邏輯判斷" class="headerlink" title="編寫高質量可維護的代碼之優化邏輯判斷"></a>編寫高質量可維護的代碼之優化邏輯判斷</h1><blockquote><p>這篇主要是看不同寫法，不一定真的好</p></blockquote><p>學習自(純紀錄自己學了甚麼，非營利)</p><blockquote><p><a href="https://juejin.im/post/6859125809655840776" target="_blank" rel="noopener">https://juejin.im/post/6859125809655840776</a></p></blockquote><h2 id="嵌套優化"><a href="#嵌套優化" class="headerlink" title="嵌套優化"></a>嵌套優化</h2><blockquote><p>製造一個函數當他是紅色水果時打印出紅色水果，如果他是紅色水果數量又大於10打印數量大於10</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">supply</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">    <span class="comment">// 条件 1: 水果存在</span></span><br><span class="line">    <span class="keyword">if</span>(fruit) &#123;</span><br><span class="line">        <span class="comment">// 条件 2: 属于红色水果</span></span><br><span class="line">        <span class="keyword">if</span>(redFruits.includes(fruit)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'红色水果'</span>);</span><br><span class="line">            <span class="comment">// 条件 3: 水果数量大于 10 个</span></span><br><span class="line">            <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'数量大于 10 个'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有水果啦!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>由於嵌套層級有三層，維護可能會很困難且不直觀，我們可以想辦法把嵌套變成一級</p><blockquote><p>附註: 個人覺得這個指示在提供想法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">supply</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有水果啦'</span>); <span class="comment">// 条件 1: 当 fruit 无效时，提前处理错误</span></span><br><span class="line">    <span class="keyword">if</span>(!redFruits.includes(fruit)) <span class="keyword">return</span>; <span class="comment">// 条件 2: 当不是红色水果时，提前 return</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'红色水果'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 条件 3: 水果数量大于 10 个</span></span><br><span class="line">    <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'数量大于 10 个'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多條件分支的優化處理"><a href="#多條件分支的優化處理" class="headerlink" title="多條件分支的優化處理"></a>多條件分支的優化處理</h2><blockquote><p>多種條件判斷</p></blockquote><ol><li><p>最直覺且最冗的寫法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据颜色选择水果</span></span><br><span class="line">  <span class="keyword">if</span>(color === <span class="string">'red'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>]; </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'yellow'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'purple'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用switch優化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line"><span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">      <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">return</span> []  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="可讀性"><a href="#可讀性" class="headerlink" title="可讀性"></a>可讀性</h3><blockquote><p>這裡利用 return fruitObj[color] || []  創造else </p></blockquote><ol><li><p>透過Object key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fruitObj = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fruitObj[color] || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>透過Map</p><p>使用Map 數據結構，真正的(key, value) 鍵值對結構；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fruitColor = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    .set(<span class="string">'red'</span>, [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>])</span><br><span class="line">    .set(<span class="string">'yellow'</span>, [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>])</span><br><span class="line">    .set(<span class="string">'purple'</span>, [<span class="string">'grape'</span>, <span class="string">'plum'</span>])</span><br><span class="line">  <span class="keyword">return</span> fruitColor.get(color) || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>甚至可以透過filter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'strawberry'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'pineapple'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'plum'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pick</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruits.filter(<span class="function"><span class="params">f</span> =&gt;</span> f.color == color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判斷數組所有元素是否都符合某個條件"><a href="#判斷數組所有元素是否都符合某個條件" class="headerlink" title="判斷數組所有元素是否都符合某個條件"></a>判斷數組所有元素是否都符合某個條件</h2><p>如果沒看這篇文章我可能會用filter</p><blockquote><p>全部的水果都要是紅色</p></blockquote><ol><li><p>透過外人監視</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isAllRed = <span class="literal">true</span>; <span class="comment">// 外人</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断条件：所有的水果都必须是红色</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAllRed) <span class="keyword">break</span>;</span><br><span class="line">    isAllRed = (f.color === <span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用數組新特性every</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 条件：所有水果都必须是红色</span></span><br><span class="line">  <span class="keyword">const</span> isAllRed = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(isAllRed); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判斷數組是否有某一項滿足條件"><a href="#判斷數組是否有某一項滿足條件" class="headerlink" title="判斷數組是否有某一項滿足條件"></a>判斷數組是否有某一項滿足條件</h2><blockquote><p>只需一種水果紅色</p></blockquote><p>使用some</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件：是否有红色水果 </span></span><br><span class="line"><span class="keyword">const</span> isAnyRed = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span> f.color == <span class="string">'red'</span>);</span><br></pre></td></tr></table></figure><h2 id="函數默認參數"><a href="#函數默認參數" class="headerlink" title="函數默認參數"></a>函數默認參數</h2><ol><li><p>不知道有默認參數的設定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buyFruit = <span class="function">(<span class="params">fruit,amount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fruit)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  amount = amount || <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(amount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用默認</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buyFruit = <span class="function">(<span class="params">fruit,amount = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fruit)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(amount,<span class="string">'amount'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意!! : </p><blockquote><p>兩種方式不一樣，使用第二種只有undefined才是1</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buyFruit1(<span class="string">'apple'</span>, <span class="string">''</span>);  <span class="comment">// 1</span></span><br><span class="line">buyFruit1(<span class="string">'apple'</span>, <span class="literal">null</span>);  <span class="comment">// 1</span></span><br><span class="line">buyFruit1(<span class="string">'apple'</span>);  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>, <span class="string">''</span>);  <span class="comment">// ''</span></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>, <span class="literal">null</span>);  <span class="comment">//null </span></span><br><span class="line">buyFruit2(<span class="string">'apple'</span>);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技術文章閱讀紀錄(非營利，僅為自身整理文章之筆記) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> juejin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS30-D01 JavaScript Drum Kit</title>
      <link href="/JS05.html"/>
      <url>/JS05.html</url>
      
        <content type="html"><![CDATA[<h1 id="01-JavaScript-Drum-Kit"><a href="#01-JavaScript-Drum-Kit" class="headerlink" title="01 - JavaScript Drum Kit"></a>01 - JavaScript Drum Kit</h1><blockquote><p>本文的代碼是看了Alex大大的JS30系列並搭配一些自身想法完成有興趣可以去yt搜尋Alex宅幹嘛</p></blockquote><h2 id="最終程式碼"><a href="#最終程式碼" class="headerlink" title="最終程式碼"></a>最終程式碼</h2><iframe src="https://codepen.io/Wuuu4280/embed/NWNPNMx?theme-id=light&default-tab=html,result" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><a id="more"></a><blockquote><p>附註: 因為codepen沒有放入聲音資源所以點擊會沒有聲音</p></blockquote><h2 id="思考流程"><a href="#思考流程" class="headerlink" title="思考流程"></a>思考流程</h2><h3 id="核心目標"><a href="#核心目標" class="headerlink" title="核心目標:"></a>核心目標:</h3><blockquote><p>點擊會有鼓聲，放開即停</p></blockquote><p>解決: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">從滑鼠事件，配合DOM元素上設置的data-key獲取點擊的DOM以及audioDOM</span><br><span class="line">並利用audioDOM撥放聲音</span><br></pre></td></tr></table></figure><h3 id="其餘考量的因素"><a href="#其餘考量的因素" class="headerlink" title="其餘考量的因素:"></a>其餘考量的因素:</h3><ol><li><p>點了之後按鈕會亮，放開會按掉</p><p>解決: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用點擊獲得的DOM操作classList添加<span class="class"><span class="keyword">class</span>並透過<span class="title">mouseup</span>事件調用的<span class="title">function</span>移除<span class="title">class</span></span></span><br></pre></td></tr></table></figure></li><li><p>按住會一直響</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在撥聲音前先將要撥的audio.currentTime 設成 <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>按其他按鍵不會報錯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在使用DOM方法時先確定該DOM是否存在: </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">... </span><br><span class="line">    <span class="keyword">if</span> (clickedDOM) &#123;</span><br><span class="line">        clickedDOM.classList.add(<span class="string">'playing'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> ( audioClicked ) &#123;</span><br><span class="line">        audioClicked.currentTime = <span class="number">0</span></span><br><span class="line">        audioClicked.play()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finishHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">    <span class="keyword">if</span>( finishedDOM ) &#123;</span><br><span class="line">        finishedDOM.classList.remove(<span class="string">'playing'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="我複習了甚麼"><a href="#我複習了甚麼" class="headerlink" title="我複習了甚麼"></a>我複習了甚麼</h2><h3 id="1-立即執行函數"><a href="#1-立即執行函數" class="headerlink" title="1. 立即執行函數"></a>1. 立即執行函數</h3><p>用途: 避免寫的代碼汙染全部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// document.addEventListener('keyup', keyup)</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, playHandler)</span><br><span class="line">...</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure><h3 id="2-addEventListener"><a href="#2-addEventListener" class="headerlink" title="2. addEventListener"></a>2. addEventListener</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addEventListener(事件， 發生時執行的函數)</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, playHandler)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, finishHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 題外話</span></span><br><span class="line"><span class="comment">// 因為playHandler沒有傳入東西，所以傳入的會是事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finishHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// e 打印是事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-屬性選擇器"><a href="#3-屬性選擇器" class="headerlink" title="3. 屬性選擇器"></a>3. 屬性選擇器</h3><p>一個小坑: 非==是= </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clickedDOM = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key = "<span class="subst">$&#123;e.keyCode&#125;</span>"]`</span>)</span><br></pre></td></tr></table></figure><h3 id="4-classList"><a href="#4-classList" class="headerlink" title="4. classList"></a>4. classList</h3><p>用法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em.classList</span><br></pre></td></tr></table></figure><p>他的一些實用API</p><ol><li><p>移除 class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.classList.remove(<span class="string">"foo"</span>);</span><br></pre></td></tr></table></figure></li><li><p>增加class </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.classList.add(<span class="string">"anotherclass"</span>);</span><br><span class="line"><span class="comment">// 也可以一群</span></span><br><span class="line">div.classList.add(<span class="string">"foo"</span>,<span class="string">"bar"</span>);</span><br></pre></td></tr></table></figure></li><li><p>沒有就添加有就移除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.classList.toggle(<span class="string">"visible"</span>);</span><br><span class="line"></span><br><span class="line">i要小於<span class="number">10</span>才生效</span><br><span class="line">div.classList.toggle(<span class="string">"visible"</span>, i &lt; <span class="number">10</span> );</span><br></pre></td></tr></table></figure></li><li><p>元素是否有該class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.classList.contains(<span class="string">"foo"</span>) <span class="comment">// true or false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-audio-play-以及currentTime"><a href="#5-audio-play-以及currentTime" class="headerlink" title="5. audio play( )以及currentTime"></a>5. audio play( )以及currentTime</h3><p>撥放聲音，設定撥放時間</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript30 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript30 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webapck 打包文件解析</title>
      <link href="/webpack01.html"/>
      <url>/webpack01.html</url>
      
        <content type="html"><![CDATA[<h2 id="webapck-打包出的文件解析"><a href="#webapck-打包出的文件解析" class="headerlink" title="webapck 打包出的文件解析"></a>webapck 打包出的文件解析</h2><h3 id="原始程式碼"><a href="#原始程式碼" class="headerlink" title="原始程式碼"></a>原始程式碼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js的內容</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'HAHAHA'</span></span><br><span class="line"><span class="comment">// index.js的內容</span></span><br><span class="line"><span class="keyword">let</span> aExports  = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello"</span> + aExports);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="打包後程式碼"><a href="#打包後程式碼" class="headerlink" title="打包後程式碼"></a>打包後程式碼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">// 2.The module cache (定義了一個緩存)</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.the require function 配置了一個require方法(因為瀏覽器不能運行require)</span></span><br><span class="line">  <span class="comment">// 甚麼時候調用呢(27行會return)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123; <span class="comment">// 5."./src/index.js"傳入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if module is in cache (6.不在緩存中)</span></span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="comment">// 7.定義了一個新的module把入口模塊傳進來</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId,</span><br><span class="line">      l: <span class="literal">false</span>,</span><br><span class="line">      exports: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    <span class="comment">// 執行(call)並把下面這些傳入(跑到第39行)</span></span><br><span class="line">    modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line">    <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="comment">// 4.把index傳進來了</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./src/index.js"</span>); <span class="comment">//入口模塊</span></span><br><span class="line">&#125;)</span><br><span class="line">(&#123;   <span class="comment">// 1. 傳入一個對象給modules</span></span><br><span class="line">  <span class="string">"./src/a.js"</span>:  <span class="comment">// key </span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;   <span class="comment">//value</span></span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">"module.exports = 'HAHAHA'\r\n\n\n//# sourceURL=webpack:///./src/a.js?"</span>);</span><br><span class="line">      <span class="comment">// 9.最後跑到這的時候發現我們把module.exports 定義成了'HAHAHA'，因此回到第30行回傳了一個module.exports給aExports然後回到8.aExports  = module.exports 就是HAHAHA並執行console.log(\"Hello\" + aExports);n所以生成出HelloHAHAHA</span></span><br><span class="line">    &#125;),</span><br><span class="line">  <span class="string">"./src/index.js"</span>:</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">"let aExports  = __webpack_require__(/*! ./a */ \"./src/a.js\");\r\nconsole.log(\"Hello\" + aExports);\r\n\r\n\n\n//# sourceURL=webpack:///./src/index.js?"</span>); </span><br><span class="line">      <span class="comment">// 8. __webpack_require__(/*! ./a */ \"./src/a.js\") </span></span><br><span class="line">        <span class="comment">//執行了 __webpack_require__("./src/a.js\")，因為遞歸原因所以又跑了上面跑過的流程</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自"><a href="#自" class="headerlink" title="自"></a>自</h3>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS作用域&amp;值類型與引用類型</title>
      <link href="/JS04.html"/>
      <url>/JS04.html</url>
      
        <content type="html"><![CDATA[<h1 id="01作用域以及值類型與引用類型"><a href="#01作用域以及值類型與引用類型" class="headerlink" title="01作用域以及值類型與引用類型"></a>01作用域以及值類型與引用類型</h1><h2 id="主題目-一"><a href="#主題目-一" class="headerlink" title="主題目(一)"></a>主題目(一)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">55</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num, foo</span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line">  foo = <span class="number">100</span></span><br><span class="line">  bar = <span class="number">100</span></span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baz(foo, bar)</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="詳解"><a href="#詳解" class="headerlink" title="詳解"></a>詳解</h3><p>上面那幾行都只是在聲明變量以及函數，直到第13行。</p><p>在執行時，開始在全局作用域查找，找到之後把foo以及bar傳入參數內部，相當於</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num = foo = <span class="number">55</span> , foo = bar = <span class="number">66</span></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果對值引用不懂得可以看我這篇文章</p><blockquote><p><a href="https://s95050937.github.io/2020/08/02/JS-post03/">https://s95050937.github.io/2020/08/02/JS-post03/</a></p></blockquote><p>從那篇文章可以知道絕對沒有一個變量指向另一個變量的情況發生，因此其實接下來對基本類型來說基本上不管怎麼改變引用的東西對外部也沒什麼改變，(當然引用對象會把指針賦值給他有可能藉由參數改變影響外部)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">num, foo</span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span>  <span class="comment">// 因為已經有參數num當然改變的是num</span></span><br><span class="line">  foo = <span class="number">100</span>  <span class="comment">// 因為已經有參數foo當然改變的是foo</span></span><br><span class="line">  bar = <span class="number">100</span> <span class="comment">// 這裡可以發現在函數作用域裡面沒有bar因此到外部查找變量bar並改變他</span></span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">// 100</span></span><br><span class="line">  <span class="built_in">console</span>.log(foo); <span class="comment">// 100</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar); <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從上面第四行的註解可想而知外部已經發生改變</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 55</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p>可以發現若是函數沒有在自己的作用域定義自身的變量，很容易發生意想不到的結果</p><h2 id="主題目二"><a href="#主題目二" class="headerlink" title="主題目二"></a>主題目二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name </span><br><span class="line">  <span class="keyword">this</span>.age = age </span><br><span class="line">  <span class="keyword">this</span>.height  = height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  person.name = <span class="string">'foo'</span></span><br><span class="line">  person = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">15</span>, <span class="number">1.85</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> Student1 = <span class="keyword">new</span> Person(<span class="string">'Banny'</span>, <span class="number">25</span>, <span class="number">1.75</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Student1.name);</span><br><span class="line">baz(Student1)</span><br><span class="line"><span class="built_in">console</span>.log(Student1.name);</span><br></pre></td></tr></table></figure><h3 id="詳解-1"><a href="#詳解-1" class="headerlink" title="詳解"></a>詳解</h3><p>基本上如果有看過上面我寫的那篇文章這題也是秒解</p><p>當第12行對象創建，接下來打印Student1.name 可以很直觀的知道會打印出Banny，也與事實相符<br><img src="/images/JS04/1.png" alt=""></p><h4 id="第14行"><a href="#第14行" class="headerlink" title="第14行"></a>第14行</h4><p>調用函數並把該對象轉給了baz裡面的參數baz(注意這時候傳入的是引用對象)</p><p>到這裡先看一下是內部的值是怎麼引用的</p><p><img src="/images/JS04/2.png" alt=""></p><h4 id="第八行"><a href="#第八行" class="headerlink" title="第八行"></a>第八行</h4><p>改寫name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.name = <span class="string">'foo'</span></span><br></pre></td></tr></table></figure><p>可以發現下圖的Banny已經被改寫了，所以最後打印student.name才會變foo<br><img src="/images/JS04/3.png" alt=""></p><h4 id="第九行"><a href="#第九行" class="headerlink" title="第九行"></a>第九行</h4><p>改寫 person</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">15</span>, <span class="number">1.85</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/4.png" alt=""></p><h2 id="題外話-基本上開發也不會這樣搞"><a href="#題外話-基本上開發也不會這樣搞" class="headerlink" title="題外話(基本上開發也不會這樣搞)"></a>題外話(基本上開發也不會這樣搞)</h2><h3 id="函數若定義變量跟自身一樣情況"><a href="#函數若定義變量跟自身一樣情況" class="headerlink" title="函數若定義變量跟自身一樣情況"></a>函數若定義變量跟自身一樣情況</h3><p>例子: </p><p>如果用let的話會報錯: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bar = <span class="string">'haha'</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/5.png" alt=""></p><p>但假如用var則不會，甚至會改變參數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="string">'haha'</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/JS04/6.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript面試 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS文字懸停</title>
      <link href="/CSS02.html"/>
      <url>/CSS02.html</url>
      
        <content type="html"><![CDATA[<h1 id="文字懸停"><a href="#文字懸停" class="headerlink" title="文字懸停"></a>文字懸停</h1><blockquote><p>參考自 <a href="https://blog.csdn.net/qq449245884/article/details/105326186" target="_blank" rel="noopener">https://blog.csdn.net/qq449245884/article/details/105326186</a></p></blockquote><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/CSS02/1.gif" alt=""></p><a id="more"></a><h2 id="代碼"><a href="#代碼" class="headerlink" title="代碼"></a>代碼</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/400/300?random=1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>LoremLorem<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/400/300?random=2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>LoremLorem<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam libero.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Arial"</span>, <span class="string">"Microsoft"</span>, <span class="string">"YaHei"</span>, <span class="string">"黑體"</span>, <span class="string">"宋體"</span>, <span class="string">"sans-serif"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">background-origin</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">1200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span> ;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 變成從上到下 */</span></span><br><span class="line">  <span class="comment">/* transform: scaleY(0);</span></span><br><span class="line"><span class="comment">  transform-origin: bottom; */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: left;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 變成從上到下 */</span></span><br><span class="line">  <span class="comment">/* transform: scaleY(1);</span></span><br><span class="line"><span class="comment">  transform-origin: top; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-box</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.content</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.content</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS講解"><a href="#CSS講解" class="headerlink" title="CSS講解"></a>CSS講解</h2><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><p>透過在box定義相對定位，並在content-box以及img-box設定絕對定位來讓它們重和</p><p><img src="/images/CSS02/2.png" alt=""></p><h3 id="重要代碼塊"><a href="#重要代碼塊" class="headerlink" title="重要代碼塊"></a>重要代碼塊</h3><ol><li><p>當hover到box時要讓content-box營造從左到右出現並在消失是從右邊收合</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="comment">/*將元素以開窗戶的方式顯現(如果沒有設定origin的話)*/</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">/*消失是在右邊*/</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: right; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="comment">/*將元素以開窗戶的方式顯現(如果沒有設定origin的話)*/</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">1</span>); </span><br><span class="line">  <span class="comment">/*消失是在左邊*/</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>當hover到的時候再讓文字塊顯現(使用opacity)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">設置延遲時間，讓用戶產生打開才顯現的感覺<span class="selector-class">.content-box</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content-box</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/*設置延遲時間，讓用戶產生打開才顯現的感覺*/</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="number">0.3s</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> CSS特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP與HTTPS</title>
      <link href="/HTTP-post08.html"/>
      <url>/HTTP-post08.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP與HTTPS"><a href="#HTTP與HTTPS" class="headerlink" title="HTTP與HTTPS"></a>HTTP與HTTPS</h1><h2 id="HTTPS較安全"><a href="#HTTPS較安全" class="headerlink" title="HTTPS較安全"></a>HTTPS較安全</h2><p>因為HTTP並未進行加密，在網路上形同裸體，有人心懷不軌很容易被竊取或竄改</p><h3 id="情況一"><a href="#情況一" class="headerlink" title="情況一"></a>情況一</h3><p>假如今天小明以及小美在聊天，假如甚麼密碼都不設的話，訊息可能會被竄改</p><p><img src="/images/HTTP08/1.png" alt=""></p><a id="more"></a><h3 id="情況二"><a href="#情況二" class="headerlink" title="情況二"></a>情況二</h3><p>這次小名跟小美學聰明了，他們學會加密，討論出一個加密方式(比方說AES)並有一個密鑰可以解密，所以現在他們聊天變成這樣(對稱加密)</p><p><img src="/images/HTTP08/2.png" alt=""></p><p>但駭客當然也不是省油的燈，但是假如第一次通信就被攔截，則壞分子還是可以獲得密鑰</p><p><img src="/images/HTTP08/4.png" alt=""></p><h3 id="情況三"><a href="#情況三" class="headerlink" title="情況三"></a>情況三</h3><p>小美跟小明又變更聰明了，選擇了不對稱加密(有公鑰有私鑰，私鑰可以解開公鑰)</p><ol><li><p>小美先把公鑰傳遞給小明</p><p><img src="/images/HTTP08/5.png" alt=""></p></li><li><p>將之後進行對稱加密的keyB用公鑰keyA加密傳給小美，小美再通過自己的私鑰解密獲得key2，接下來就能和上次一樣用key2加密聊天</p><p><img src="/images/HTTP08/6.png" alt=""></p></li><li><p>結論: </p><blockquote><p>這樣假如壞分子獲得公鑰也沒有私鑰解密獲得key2</p></blockquote></li><li><p>但壞分子也不是省油的燈他想到下面這個方法</p><ol><li><p>獲得公鑰之後把它掉包成自己的公鑰<br><img src="/images/HTTP08/7.png" alt=""></p></li><li><p>之後小明利用key1加密keyB傳給小美val4，被壞分子攔截用key1的私鑰解密獲取keyB再用第一從小美獲取的公鑰keyA加密回傳給小美<br><img src="/images/HTTP08/8.png" alt=""></p></li></ol></li></ol><h3 id="開大招"><a href="#開大招" class="headerlink" title="開大招"></a>開大招</h3><p>透過權威機構獲得認證</p><ol><li><p>小美(服務端)先向權威機構申請證書<br><img src="/images/HTTP08/9.png" alt=""></p></li><li><p>小明之後想像小美聊天，小美就會給他證書並他會交給權威機構解密獲得證書<br><img src="/images/HTTP08/10.png" alt=""></p></li><li><p>獲得公鑰A的小明跟情況三一樣(第二點: 將之後進行對稱加密的keyB用公鑰keyA加密傳給小美，小美再通過自己的私鑰解密獲得key2，接下來就能和上次一樣用key2加密聊天)<br><img src="/images/HTTP08/11.png" alt=""></p></li><li><p>就算今天壞分子自行向權威機構獲取證，然後把證書掉包成自己的傳給小明，然而小明再向權威機構驗證證書的時候會發現，請求證書時的人並非小美(權威機構會自行認證)，理所當然不會通過</p><p>附註: 申請人並不能改寫，在申請時就會附上</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP內容協商機制</title>
      <link href="/HTTP-post07.html"/>
      <url>/HTTP-post07.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP內容協商機制"><a href="#HTTP內容協商機制" class="headerlink" title="HTTP內容協商機制"></a>HTTP內容協商機制</h1><h2 id="懶人包"><a href="#懶人包" class="headerlink" title="懶人包"></a>懶人包</h2><blockquote><p>比方說有很多不同的國家訪問同一個URL，法國人瀏覽需要加載法與資源，美國人需要加載英語，而解決這些就是透過內容協商機制</p></blockquote><h2 id="內容協商方式"><a href="#內容協商方式" class="headerlink" title="內容協商方式"></a>內容協商方式</h2><h3 id="客戶端驅動"><a href="#客戶端驅動" class="headerlink" title="客戶端驅動"></a>客戶端驅動</h3><blockquote><p>客戶端發起請求，服務器返回選項提供客戶端選擇後再二次請求</p></blockquote><p>優點: 容易實現，且較精準</p><p>缺點: 使用者初次訪問無法直接查看內容，且需要多請求一次</p><a id="more"></a><h3 id="服務器驅動-最廣泛"><a href="#服務器驅動-最廣泛" class="headerlink" title="服務器驅動(最廣泛)"></a>服務器驅動(最廣泛)</h3><blockquote><p>服務器檢查客戶端請求頭來決定提供甚麼資源</p></blockquote><p>優點: 可以直接查看內容， 具有近似匹配</p><p>缺點: 請求投如果沒有協代可能得用猜的提供資源</p><h3 id="透明協商"><a href="#透明協商" class="headerlink" title="透明協商"></a>透明協商</h3><blockquote><p>中間設備(通常為緩存代理)代表客戶端進行協商</p></blockquote><p>優點: 請求快速</p><p>缺點: 因為非標準HTTP方式，因此沒有標準規範</p><h2 id="服務器驅動"><a href="#服務器驅動" class="headerlink" title="服務器驅動"></a>服務器驅動</h2><h3 id="請求頭"><a href="#請求頭" class="headerlink" title="請求頭"></a>請求頭</h3><ol><li>Accept: 告知服務器發送何種媒體類型(mp3)</li><li>Accept-Language: 告知服務器發送何種語言</li><li>Accept-Charset: 告知服務器發送何種字符集(Unicode)</li><li>Accept-Encoding: 告知服務器發送何種編碼(UTF-8)</li></ol><h3 id="響應頭"><a href="#響應頭" class="headerlink" title="響應頭"></a>響應頭</h3><p>跟請求頭一一對應(跟上面索引一一對應)</p><ol><li>Content-Type</li><li>Content-Language</li><li>Content-Type</li><li>Content-Encoding</li></ol><h3 id="近似匹配-Q值"><a href="#近似匹配-Q值" class="headerlink" title="近似匹配(Q值)"></a>近似匹配(Q值)</h3><p>拿Accept-Language(所有都一樣)當例子</p><blockquote><p>Accept-Language: en;q=0.5,fr ;q=0.0, nl;q=1.0,tr;q=0.0</p></blockquote><p>​    註: nl:荷蘭語，en: 英語， fr: 法語, tr: 土耳其語</p><p>看q值大小(從0到1)，不是加起來等於1，只是代表優先級</p><p>比方說上面那個例子按照降冪排列會變下面</p><blockquote><p>Accept-Language: nl;q=1.0, en;q=0.5, fr ;q=0.0, tr;q=0.0</p></blockquote><p>假如客戶端請求西班牙語，但服務器端沒有西班牙語，因此服務器會找Q值最大，在此例優先優先發送荷蘭語(q=1.0)，假如服務器也沒有荷蘭語，則回傳英語(q=0.5) 。</p><p>假如服務器既沒有nl也沒有en會產生問題，所以服務器通常會設置默認回傳，即便沒有沒有上傳任何編號也會給默認的語言</p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS文字波浪特效</title>
      <link href="/CSS01.html"/>
      <url>/CSS01.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="daec943c0549c905128a7bfec3556b4e0e585d09d2bcb499985829ee7f714306">bd25ed9264b080267271e137e33d0ce118960a041ac35a180347d4bc9710c7dcccf0ed80f963bea27ce35e48bc9a2c9fd7c18fd34a2bfeede176cdb7623660d768785e04b96704436feb38d0cbe15cf1613eefac54db3270545b679064d2a4b498ef014fec9966ae9a959e7fb9d7e9a93d365d6f307a37207044eeefba5d23de3fd5b5dcc97971aec53aa6a7c5bcb91d1eff77bb6ac8effca5fbf5ece802be8122fee2e91e848b911953743502b8795e6e208a2530cb1878c6fed668295386a1ef944dfd7f21bdf5bb6146fc9bdec8ca3fea3311d4348f6d03b413b50f4267aeb84428eec4b235e925f269d5fbf8a2a533aeb50042ff4c483de9675b111aa1c8ecbc1f524ced9b229beda9c3c15243991dad6de6503e21e58da4a812f3a667fcad5d25b2c0e5960ee5e2bcd025b9ea1e067fbe68ad3a5551c8295bc699a826a25780169fe45bd5dfedd49fab51bdd1c3083747f07b68c000d6458ca3c7cca1f900d2076ddb48b56bf26300b56712ec029f065e2c2b82123aadefa6c541b6361b03787c2d757bd52d9b6659071dd74c3609bcb26547dea78969066e2f3269815b4be9fb7b8f1aa0162313db0003d7675912a6db8fee40dca1504fcd86522dc197917ee0ef0f232f1c8738342b1235921f3d096eea241ef23b8cc89b7680127a4d9fee913fc8205fa3f985bf646c500e40714913e0d39af0f21608c6a6dd81d4a9cb6f014733f5804acd3737eb91e1d3030910585a008c02bdfad13f9951dbbdaa9491fb07e5a792544d1dff921f36168d03ff1614fc8499cb53885932e5c1fe9e1ecf8338d7e7d301bf4c8a13552502a8b6c1ceb3483d04e8145091f1633badd08b288022e2f0cc0feaae83a6dd21513c5fcf715cbedc51a4d7a54ae980d516f042935ef003b789e15e2800f07d6fcb0862f7a11d61947e3063b202c60eaceba64c1fa4f15c9352fc680237831fe3ec0101c1d5b79c43e8a927dc0c043078926488dc89d87871e4adf88a19085a63db99d31c7da1bfa1550cdf1e6721787cd6da4ce10c7630df45f5fc383a13c1b527be1c699631a1b163a22dfad90d755a08447758b7192de342f4fe03c9e9c070879057a1ae06da1919931b5ef03f8410bcef07d0c8053ec43e36de02ef1c02bf6add7672d7433f22f04113b17dd9551d66a7e837eda735701014e35a425bd3b85ce100558c2048665f861f85a0c80eac98bd4d3d87c990e778e553c20ddc2741a774aa4313d7934faddbd5377e4d54c57bed36ebc675396efc0b9958df85027696775722e516370ac5f87dba0926ab3b40f36ad1de1c00f7978a2b7cd3418a1e50fed162a6db52a3469a4c530b01cb3bb4037b58a5601d72320e802de6b0f50a15c20598c43d1299582eaee8001c4984d3a574a9d5dde14a1e3eae1f174c5cb6d12d6ff6199e90c152094c51431539a7301caa73dadae6fa8270884a027803ad2445927e35a5078be9204e0d2c524345ec9eb10a6fcd7a1ae68c0cf0fd0edd38cd5bbae2d9049b80b7e414cf6588258e9ff96149e2197f94a518f465ad9c5facfb8c0b5a8715e63c741daec05532287f56acf8f46be787dbd4fc6b63e3c3d6c9606246f929ab7359340382f13dafaf87ab78cf7dcdf324d170e521da015d94ebe043e77ffc81d31d9decb1b1ba82de0e2f9621c91945bd052632ff836d6ab1a336bc4f1ed2e261d3cb0c8c6a9b91d52c1deeed3e3f64f200b99f6d3716df07d032943092fa4f31c5db5b8149ff280b59131683968b99438d6844cd7179df073dc559fc29c78e2f403d8f903000a81872585fb1a71644c47b7b6a5740fd5125e49d9949b5e525e959573a7ed7290e7be11b7fcb0d51278b1155e1cbf566968ddc382add1cded364d517f9710de0ddf8a899b6a4fec4f847acc1592a647045c06f7dc99620985149cdc2dcfaa6d2eb8549e84780057caef631a9f4b30ff78370229b6e7491fa60981a74edbd09c6b8c047fdcdd5478348079d611fdede395ef368ba74bba6915a2e54ff1037cf5ba986411a2d62a31b7a4179a5bbc3ef14d1c6ccb6a9d9b6ddd46d64c557d4d0a6f7378b6bf7c8a99828c9c4fc275eaf13846c9938584a49eeda3ae8b8ef7b5f90a437d6d07a536b34b80c2d4f8b1a45a3dcaaaaa32d7300df2b1cdd94a1254a7119fdfd38f0445a396f0789995fb1cedd08e59b1214de061b97f5ad3363d17373ffe906c5aecc39c964f9e98a10670dd13a37313bed5f2b4321beef679ed6d9651832413283e3d31b1e9f63d51f00279d62120ac835480a1fbc30223341e30ba8efd1b3ee6e1c50f847e059ca1937da0e3d97a0b97f5b243a162668d2725dc7d4d31afecf38170b75d4a6712200959aa9e1fd469c912172c11f3f4568c318170208f59f12f44ed6fe2692202ac4fae8671bc993133f9485fd7d6a42ba0602d004019d84cd02ef80a73a6dcafad7c09c7f132bbfcf3dc882db8aba7dfafb25d37fc60f7b17bfd13cc8d2eb216927cfc9ec32f76f5acd3028cd65cad22f4ece36fc6628e94f01319efebbdd65512b061c7dc2b9722da3e7c3119487a6ae134b7eac4a2d0ae68f47081f269a5aa19a14e18c926da58c607093d4597b908b0d7532d4804a7876d1f0a5033fdd9104b25adc73b67dbc61671805bd2a6703f41fc89555f905f0fb91773cc7399154456a431d0859cd9bcb7488774175f71faee7cc92cd52aa5b7fe1222c6fa18e264c444113304ca158ee3a13b08176e419fa96a8c8ff68acfc298938645ca8e12f3ce53d46a65e81e4df332a0312b6ad2d36308fa23d04ffa221e0c5d3c925852c86050a8b011eebae0a5fd60a460e70b4facfa6b7bdd372be52a7520aeeab81e48385b0cee5da23e2e29fc3e62ec8b97d5d684c5c3b6bda530c06bdcf7dab2f3e9dbc02a0931955beb55c00fc01aa715d8110ebfe88223b97b73a63a163d579b0b8b1b88197fb1d57867dfa01b0cf962ec128efcf9c7ebb7672a8b7e376bb4ca2f881ead01ef57b58ffcc29b2d9da657d62dbf103a4c86ce42adc07dfd9ab27978f09cac00b5085b4456f818f1195bd99b5b70c89379687d38104a6bb9332071cd4cc288db3c03ef603fac674bfa9ba24d171540aa17cf20432669375a7f583ec22584de06242f602745064a5096f964d860e469104d96197232b2b266b7206792b9e0f3d946e0668fc2e7783ebe769a06f79490ea6d0dd7418f105f703e468fc318cfddb16560f0744666b72574dc3f5135e14b8bb2bea15c691c20f3f7325b7cd6e06cfe19311f14a565906a4e63a69db2c6e2f6e08d24f26526eb43479110f63b3b600211846b27f999e4633e89334a3c01384985e16fccb5d5f60a90382a6fef763dfdbb50daf34b7d4bebad56d1e9ca78281e37d90a68a04f33b94333b43ca4cfba0a8a8a1828d7ac91772d0d846cda16e98dd1bb1af7dbcd0a91658e9c5821c162fe75d273263f525003ec6f0e1b21b997c768705b990f4981635ef014821939ccc4b4b7e6fa6c56bec0c9f864f2f9ed92068eef133e65903bc506c4d94af0c14754b3cfc1ef408aa0eeaa2e693f349c797e3388d79eeb2817c22a5d6bf785aa9d76054e2c306229eef81bcedaa083139f34734cfe100ba24084ffff5285a77ee83acb45f9533eeaf6448618a8a179837228a9022817e42cc1445d5b16a4e3ccefc6e34e148fc5efed6aef9846287fd22fd861ae92c7db0c7c30a6bc9e1b762dedc78cd08fd8976d2438863a91a443d78354ee341dd4cf611b5df90e1ac9b2277cf7733bdc634b2aa21837d4baed83ff1ed2b6101db32d29e11ee6aed336af5ba571346f2b026a99b55a2a4f6921f68e9469959357202683695971074f54a92b5e4415f0cf93024b33a3cd31939107db0c8fccd4dc0cfc07d89494aae9edb9cf3bc0be3ac7ab85a514ed96084c9bf5ee5d4c5d0151f64483a67a7edbec62ceb805e9398c90310c6ffbcdb9a4d2757b23fad8fa31c65ba572d061d66579befac229a4634d8c9964a656a32b253fe6625c93eda912cbea2cff3890c4ad39657622fe02e29dba0e1b443ce8e525f15ef9eaadab9953919572e8372e3f936c021904c2586ea764f502d6463e823db830d5a8fb6b8be7198528bdfdc15cef8601f1f5daefd3a33086a02f4fdeaad1d6f4bb5f5e605a8ed870ab6fcc49aaf675c9ab0e4c827bea10897a8ba5d478d94cef5a7025dd15c03cacdcb1a04ff1f013dca9c69ec1a7c9e72d46fbe17a0eb2f75360175e910463f8f5dc1318f0645eecd33147228a6c8860b39253b0f4b8556d6de6f6151dd772d9f1d503e71c1ecc224e0b18982414de767343fb2f77c52509796b700d8888ab6d21be8ad247457f8e17a5b558ff80399aa40c975251e161c96ff06328e8734712be9c0d11199354de0591655261b82a4cbce954d262f410cf64d7dd1b06e81e8b42680c367d1d9fb3247c4f03901b6a56eec37befb2a718d67006496f8a77033c7871a2d4ad5036a4eb57c64aa35eb4895b5ff7d3ae0baee51f97a862019f3c7f2e740bffdfde0bad10ef02953890659521a6f93552d7c3e6a3edd811e52bc2635e0a7dcd58cd5784e28618feb9fd85cbae91437dbb296ffef993208066317afe3946872e40f1a840e07278869b0c85a4f413d57d07ffa76c1c53ece69733f7efd8eebdfe2b3e037c36d979e11a34f5b75584a6db3cdaffbb86c4fc968bc066eeee7250af96824e727647820e65e97fab973d5baa46b0cb49636782f029e4918f3c951c770e2f53f900c5ec24d74fc3259a34f2c4092d84bf5643925a128ee23bfbcda44aa37f671359e213dfba34430f3b250deb192544a7079a969d3f06dc97de8fc6a75723211d78070b52c45d74b1e30a9f35af650757355f11837d382195539f179c16158552085e62be6876f4f3b376cad4d16ac854f8ca1c58ab5d21796e179de58176d5f99033f0056584e58d5b05f9fcfca3bd6e2a5879025903f1388d8b060ba28743cf3ccf9ec78505ba6d0b7d7abb90b798f36efcdb034a11e08c6e9f5651a8dd7eea55d4502963b6353178234661047aa371441def2af521ff4890af45d5f6b5ea642468f7487771656129e5c4437e36e8ecf6f7af98eb93ae62b993a1d0497e294f5e273366bbff17e23271b542eac335fb4a1eeb519ae5f066c6c41e4ea7ef314adbf01f0d067c3c4bcc643f075491062d52c47f7829373bae243b5dc5d1d3223f2b24672a01593dbd1add680a52a6d2ace18164f8bbfce05963b261c04d4fcf76d2bf011b0043d4fac683b29fc6d8cd996de4ad60d124a4e785ce898532013e91adbd03ea90eb959a95a2e78d65b1dd95101dad3166d80031a552c86ca6dc1937f4db01d487fc3c041a27630189addc813af0d1076070c12ec3be4be4bb75b5844f61ba01d98322db6003e46dd33627b21bdbe341cb758486e1991b212b58e5408bf95775c89ef7e24279328e167d796a68217bf86e1e4ec78e875ae1745e07747174dcda0edc4194107104a4193004159797e84792a527bcbbdb68a6fa793289bdf2c267f22359b77d102afb0f16693b9813c99ab76ff9129cdaa95e0a7e037d10bcdaba48307057da22474c25745bd3f0ffb786df249b3dcd2c2ca26a20f6d423e2af4b2a1337aa140d7546b1e14a4b70007088395de02a8ce2ce0c9faef59090c4e742f65e2f389c3b4dcd14fb718c0df8f1c4c458456b1daceddc4a71fd31c57797ad70a93ff1b0cf6725b74d1ba5cd9ac04e0bd596d3fdf8b13b85e1fa98d505807a6803267c8f5ef579d4d2f153fcd34d219f644b8daabfb368097e26ee902af4bddeb78a828fd32982852db1afb0fb7fa8526dfae44e54aca0b510c6ff02e9837c2d63f1ba30cacf80a48f2e835a86a696c775bd34507f1fbcab7bafc303b4bbca0fd8336a20eba0b35370c47901ca9945ca35fd416253ff40b6a3e4172b17db11b901b9907725e8d6042c3ee6c296d076d51c9e4051e2919c1e915b4bbf32bc3f40d2ac9a75be9e99ffdcf0021ccedc463646254bf139dbb753bcab66b5e7ba023b22054beda32bc5ccb3b32a87dad12b926cede18089ef30c9b37a48fa6749f29682df1eb18fe8bf62197b46d0097ed13f7377e93ae52f92993243ab14fc184e19d672281d723fc61afbe56809643eb69cb88ed809a4630d200fb9527e4939e0923310c149eed828cd3da7aa5a63243e6d5c391501e89d4c8243a5dbb80413240236e56dc1faafdd900d2eb42e0e72f819a9e9376bcf3eb6f84778960187cf61f8a739949a15ef9ed347e484cc2d29906da548653951dd193f004a816c51b2e071c739986d73cf310a0d1a5e86191b101783fec644173947bde8f71e4ea5356c0e4371b0100ee72335b310f5c40af71ca025745376d5b496e2b2818649655a29b09d77e436c587b0a7f4c727a2885915a9ff40d92f5c573dce77d7010585c299541d7699a41877aafd3894c747f1ae851d8abde6575c1310b4087ea260f7e1faabf03f06dbf5fa221cf60a8ee4e73085138e050cae90342ec75f88c74f4e201de57626e49bba51ab5260889e37c776e205c5741418c521478d713822afa8d438cc06f42fa76d490308c61e46116915469d69f5c03b2ab5b5a92bde3b1eef4211c75b5a77cbf80004125a4226164e8bb83a04a15f67829531b3e9ef26f1cdeab55aa8d4dedd58e9ec633019ea58dd81e8aedb8bfac42d5ca37ec1ed165e370e6a6c02d1ec1063c69601cf099c20970f5c362496ae95a01b25f7c7ac1df40e8f7bacfc02324f3c915bb328831cd0b77b8f131bffbcb3d01d77e32db0e4a750f78c47fd87e5720d627ad5e12741817d5d5e05a58f0775fade252e174a81f395cb75c5514512818ca26bcd4dd84aeb57f8745551fc62703a492f4847c3a9e45dc643b6172012ace0dc40cf6e9d0018f03eb8f66419b0fc2e165f8b9c6bdba1e2006cab626520d97a35fc394e4ed5c9923bac6f77c0938087102fe7f773db6ada06386bbd98aa4d1a69175dd1d99539e295372fb8c27eb693a583bc66efe7155a3cce0d8e27423f7e9f544f6365081a5875ec3ed4d2cd1c624bc60ce42b49f8a5b41a5da0bfbaadc1b9b68a7f289c4cf42b3c4a46d6f61649d7d27662055b54ed64549fa7227e584a57db981144aeaaab7f412e4fee1e8b4a57aa8e0701ba11f37b09b68faa8b1605072b914c2124b481d93506227b2ff35b8403126c43f0a568390e87ec4d2a139b210bfb563696b2ef8dd139dffab4fd18199464d48f33a0f171d6c271a89df4ef83951c196dc18f45c8e67c919be1a2cdffe45ab950466c0c982e60b442537542bdb39e378e9e0785e740b40a138e7aa6f7e6e52cd24eeda63ceee69a26b18d17c6de925bb5130d1f710455db8f1693ae0c52e8cfbc589b7410f0dc824f9fe14d5dd8cc60356022258a90007e08c9d07bbe77bcae837c9938475bb96a716cd36098a14e0898f2ba7d9382349a933794385661b831061093a028ac4d300b4363a6f6bb8359a8aa7321bb855a8ba888b7a136e2bd09b9e97df46ed93ec154f702ef2cf0e56ff5ac0a5e743beb3f676d5a9678971982a60bffad77392a11998e4c384a3494387400007fd15e57ecec343c2e157223207b3b7d9b59522d47aa19570a71ae8e2df9b9547996f856df7fea868a59f107cfef678d3d07eb637d99b49de8c278c77c57ff62c1acbd6094e30329c1ca28a6a9bea4939208b94ea21764eebe3f78b2733713a49b9c911b08d49c0a049a75436665b169b20fbd49bcb18ac92d899b7787c6a140467e798715768643f6825c592db48a27738b4176e602f93cf4b04f37b90a519e6cb4c86850bbbe7a00d71a7e043901ef8a21a7569ae7cd15c249fe2e4ebf8d7805ddda99cbf377f54037c498b7c5d07fffcbbc7075802ac2aedbdc59d94d0c3822a74e46d662b4c740648d171042a635b2a7f74174db35b554dfe1f9000fb80c160c18b9e691729bb3b6837048d4cf9cb70074fe4c0d37df4dd784465b73b70fd9272ed7e6e749c060820c72ee47404dcf344d446544b3e0fde251c6fa581e92ccc6d1a42fd003a242598d97c330d74e1ae67f11ff9c59577d20c13fefc5b40a128040747975cf145e4fb5abab5691d3e0a411807e4f5339932e67944e131fa1bccf8ccd60e877b83d56999044b59c9eb6127f88e223006cdb3a3e89a6a76a43bd9f5918c338b814a61b89990d590ce25870fff497e522a16f6eaa0e66d50f7988a1cc76d6ed8f313503b2f571ab39299d56a6ae35d994a88556b56f3bfe61a2241a98226b4e51ea6ea106d9cea5b166d16b09b22da28be683c0a321bbd560b736b4cea333c35b122ef7ed04ba99e4d14b5b027f4803ab8ba4c5ab98f3a5e63caaae5ebc1826588870b2d8a1aa5897f86cdffb2dec91a7e662f689570ecbe15c29ba2f298b445f16502df1b7a4e4181bca195d96a7d4b8eb1320ca86bc0d460f9cffaf3f39562f9a1db0173a1aa7ff28e2a89f422c8a9e5a85285f93251ad88a05f3f67407832c8aa9b143b0e788e82ddc5094fae7af29b9eec23f4b27f27f832d6502caf33e188f9b7a265caa23d5b5104d900f3b516a551e8abc26978611afed1270e77c333240a6a4c5f3d2d50015d858584242b4132df37123a9274b7cfa6c6da0a35b128254e4548812fd85ed157f573304fff916d87dbfbbdc51864752615efd51492a2c71fa3a6d0cb671164781897c49674b187dd88ffd2c662fd05bf7bd52ade76e497ddecf78775189047c7bf23574baa8e44a7ea102d9aa079f01d7e87c73660ede7ac0e61406da01ce2d9aca0bda12b587b0aff93776810daf89c928e12bfb26c455b33e2420cf06dae68e6cdd93cd0bfc440d80f087128ec8afa9e540ba5d4dfb6a33cf50c71629d5931ec13864ea5936bbf6ed1374d87266623da68601655af8d8fa7e4d250c3fd3a90ba2393a468c54101413b569058d5aac40b49105b25a322e9946a926331be043d6c46402c32de4c20573dad36ef5d585caee26e6bd862bf1c1a596719a5b69f96a5c629aba910a859e163a73830d311c57d88bfba958b553dd16cef4acc07d191f3d0434f86ce8aea2b67b23d51b00ebdd8543e4c9f9b4fc6e5b5c326c60e1a602a1ce483249cd51326765ab10c85d714295ff5c8a814198ae3b2c511e74c6d9b9535d94162097e0ad245db6f2f83df366fb02b0579243e5568a65e6d6b30bfd95073b3704bf6b5d541627c6996e5c806eb68292960edfda4f769189116f1d474a1dcbfc5a1ca6bc2f146665d5284b76a210709b94abe3c492ab6d75d613e72080a16c5948e17651c80772c9ae47a2003dfdd5393a1e0cb151da228ce2b49055ef5644330a200e4618fd35063b10053e529a17b7e79334bdbda8150837979ab7d7ea604db5db9be2edc3a9cb4d30272784c04094ba9c384a664363e1bcf9eb7093d9d79b6a1aa2531357e12ed94a67d8421e32f5d7c3a7d68a1e2d653ababb7d3a31479f58d020d2a1069f8115084c44cd81459a1ae0a052ff6324f576a2292ee60d17376635e2cbd442b953f091320544ccfa5fc742e32becd88dd6fc167e48aff34f9e7ae8d32f5148460026d6c011f0a0dbe871ccc6a192a5e097afb73d99f1c9f7209bb36592240dee59e4e5746f920a15125578fa83b02615d0edd0a00e1b2a056102506d14978cda2d4518e1999eec1c965eb194cdf6af3c1a4179d1fff9cf679b22c9c93d7a3175065375a207d49a8d97bc8b8bbb16d18e2bf6339ea4f92e7347ad4075747a8eac72f06ccc78ca6cc66f217aad6e9c9dae110c159e219e905cbb4644a69dcf14ac153a7897313719b48de6847f68c6ca191a4334ede889f6546b473ddb346a1395787f8a6d485bde06aafcd4294baccace6cb61f5058c8e03f7a89042edcc54b3489b87b10685bee73c4ee7fd3e452d44d4f22c7f1302ae8a7cec4976109d7954de7dd6847455a118a30279bd7a6c1789980d18b1afcb394c06e59b038028a7be25bf7d91cff176c3a7bdecd5080c0ce755543876524497ed21dbac54e20969059a72b8c6e4b2b145aa313460751a164be8aea63112ca26681289113d68120a9bb456c6665aefe46e7eb2555d5901d455f23bbc5d21d95c9eefb4fd1087140c9f9b92a1f2f293138d927821ea25d8570ccf582c890efbd01acc27943482998c2af7ec854eb3c2a29685594313c9ade5b04a8bd4a200e27baf399e907e238be2534f1a73b022f2a309371000c9136e459e5bf12c76e665d2f8d99e44c7515fb1b1b9ce829c8c797af9ab5f4a87d6ff3d003d6b54e1eb75be00705c0b5ec77b7d69bc7e4fb4581b3d057978589e61572bdda825288a0517dc4e9a8a674a8f759fa420a09bb04085206352ca0117f78f675b0b1f5cc1f2b1a95375cd92418caf8339ed616efd5d83bfbdd41de32ae1cef87515ec57f29e059ab8b12e2f326b6663b6f4cb1db1a869d759d5a6850f5039fa3277ac11ca1e06b2fa884d8e6e234b24845d78701ae672709ed401a304216dd108f5d3369f1aefb54b989f9ccf3c861e4c30197a69441e283d6ba881bb9db6df371bcc9c7774cf6ff599c5d0f206c083b0997a78cec7c677e4d61fd2a4952c1e46556f65845da20ad5211c6efc9f09ffdbd6f174f50726d643e50a72d0404a4d0ad650a57dfbadd285e9574a3c8741bbf0eb776242690ebfef3c6fca0fc29d08f48bc4596e2e4da6511d98e98bdeffcac57ca7e966ccac3af3652c3800f9be8ffc09d01e12b562766b094bc748ba86464b42c59b1e6518aff4c86e2b9a237c1f88f5e883e18540f457d48f6e3fa920bfa9ec05d9e0ed95e51bf9eea10acf2bc7f311828bbd58a7c69be4ebc9e6cb3e13997e02508a06924128ee9b1c799144addb3e0ecd4d9b3f4a8524d19b5dfb264b28c83db7ae34d3310fdec197fedc81cc2fd11378d0e6226e6d0cf6a780aea920d6f8c1447bb27a7d20e6a4115fa54cf1385244ba1c534538d587733df305826d193c1f78c418a44bbb07586daaf39c6b565891fc27cab8230fce92d1f6853cbd091f6de2ac85ee298c040f50d1f59b5592384d146242ad08024995070613dddaa704a658a102614484665814960b1bf5b546169968ea069082a23f23d5b835732e41d84592d3f778a5f179190c7c267eaf9eafc6288d67a8ec63ff31299985c596011a8f0989382957c3a20d3e0d3711c4c65e61bb9e45c2eb326eac3cdcc6d0502e6c1047f627b9e4a8408b271a15c00c63c6614691d5f5891ca5a8413a960f8edc09062af09364e6a7b9098fafa56646a2127d3343fc5c77355e137e18ebca1bf41162e4d4fe75bce757131846585a698fcecb5cea65a0a4380e755758838d37af68320b586117d6da14b0a6dc6290ad8f87da9c593603df3ba1308bb3b5a03b1b8bd778a9bea9b86f325a131e0eb9d3f30ff75bf1ab3b125b9c916c3a6596f2a7c3f619efe6bccdbe6deb271beda794417c97ed4804621ced184135f00d96bc430a7f25cd3c71613f33842682d70231e6f4261ed47123909eca055802e0c1e6a6253b3f995371f2c09f23c982886cb6e9c3e93e4c7352afb31e4c4d7e83189f5467d7f70b86845aa68c3c4226cc37b66f774d53a158442bcfa92bc6099431455853780483b48759a5c0a5b3ac4ac7d7fb0abf4d68084a13efe46abdaac57d3341fdffaeb490dd43c562fc2e452e701869b12d69b93d0796d0f5a036f271ba352c70fb148e3a1c987107ffdd76b4aab26f7956d2c8cb007292ed80fef2c5b47c9b46e4a05898a1c732ee92a0967d2c1dd3618e06e652325b41005109578577e3b8bc051e9d86b3dada95bfa76b73a171b1c51736ae7c9d61c5578f695b7c5e106639243484823d2619f0da1d85f0b407226c39365318a021c31b9240f3e1a101ba1e9a4f69cf8bd3c5ba9b3ef2adf7ad465f941b1f79c9283b0c1adb14ca6a2c22d4e271a9c20ae38c938f2804f1ae7aef59c2a04e6430d1afda16dd721a7006b4b8c3c18fe015146334106e81590105da05f33fdc0842982c67c325b48528b21ede41753d7d31da4149eafebddb6bbb3eedbf1de1d917cc5cae1873cd18c8062a7c4b15b229cf7650996a6f70bd8ab8d48d91ce1a45859112cc1b226c38516eab33b5090f8ededecb8ae88171a50de4af75088de76f4f840389bad104cb636e722a0db56a1878e06ff0208ca22e22950b7efc65b0c1a97b2c1645da75acc921586eae02b4d24aad6b90b7cdc2b989874ac9163497e969da45ba10a0d2a17440126c97f0fbe5a7fb0784adc054e940de652a4715054cf3855360ced851882bf12b1e0cbb72ed509d5764d82fdbaf837a9e2653fa0f3c6484e632c4858007aa21f505520838968ca47db70e7c3d0df5fd8005f7a982902456b0616de9fd8e78a03af434d319d2fa0e145a9ffb04496bc0f21295df4236485ec11f095c8b94ccd6d3295db8051c32ebf738607d7223ecbd3725518e6efb65d11242c7561b4c6161a04fc733efbd140cfd540d4e3d0e907a15e963f8b1b42bbe60a43e79c638bfcada654fb6e1370a38aae6301e7963d53a02c421ba8e4f6840b9fc935bb17e48c1ddec8506fc0a6d9075ddd4025aae57f5ac05d3200f963ede6597038459497d953da84a713ae979a014554fc090755839ec14767cc77eace221ae872482269bed3c8af7713cc994dd1b0488b121209b76a87063d4c38844d1b8489ddc9664c26d6c70c770272cff902eb3d66488e634af7b4e68837310a2b835ec20d9038960cff7abb2ccf771debfe2552cd2eed04942197df37fa640f3a07ddeb03e0e9ad3667bfe1164dc117efce10682ccc720acf8512081c55d65c6a9bb1f50c12dbd1f7ac9746763cb902f4290bd9aa4f5d4d669c486c85def64c01e4896a1452eb06621ebab0a5833393446a440ba4d606de35cd5938ee775678648bd7870876a4ab048608e80e834f5fcc2a7ce6b602c0c4ca63c50411d1491e579e5a11302a2aeb8d290d5a4641c1099e0cda48170e27a00a9c885bed29ff6bcc9994eb1e2ff50f040724ab35db264bf78541bca8cbefb200b510842f5e6493ff24ed32b7b957250988d18807b0025c81d44dcc66821c8012469da0a6413c2e676be0df992d73ab104588d46b97c8347afe507b68613fe7a225d4c105782597c89115c2d875494d9b50bcdbccb423ac3c530c3063fd5be0fc147cb7255b112fd92ec74e3d4d28041fbb3db7b6ca685317f4ea870fb56daa7d720977534df8d54d5055d84893f939179d86ed24f014a997bf34f69f76cb0dbd946d5bcd6f2b2e97dfbe9def25d6c6a65549b28ec8a4cd1aa5254f43f230e5cc6a75f332be3add72035d9544e5cc68a7873fc72ffc3d889b326959a047d7db08f54fa2b3aac8aaa4785f31272e2cb6efe09564c9be888804ba1b777bcb0a310b498403f2a8cbe8f0aa2b789af2613f132a70e8e45b434abc469e615e4dd50119dce02ac8f24ef7900a95be9b2464e0e6a9b1c7317b1f67a2e640b1a21069fd5169cb7bc4c30829aa0f5aa314ea1f337e4c8244bc065819a652c283a000e6e1eb027e7bc6301718474b0e8c44a0da7cfa3002044c9211722c378f0351239ec78701b3be9dc8b1ebc10687da226dd89faca9f388e0ac2b274659104b28e35e02edc44a11d5ea9d19b183735edc0d19b61843ce0186f4b763a6936fd41dbe64bc1085951eff36e1a510b6bb414328f798d6d6c5d712188fda87359618b6273871a87edd51b75b8b7d3c2a1ac3b2880d31d91f3e1f1f2cb151daf0b529732c3308da789ecc2c125ce1863d64c7ded09e3f8683425cf056ab021659340b69ce205dbc09a41637b0a52fb318e5d7db6a1914caf0cb13748b2904ce749855355e41405b875f156267c22eb136761bc48f0d84504bcd9e8abc74b665c0d1166ae5f3f7ff7cba4856a7d4cd23142260c5b5384d642e8751d1f03043a32823d4cf57f3e6ca5bce330ece96a88e3e813cc826b0ff9376be1e4361a1e8743fed8cf33260135756df92b7892cbbc9f082b489a6263c598dd11d5ea841950e7a6eaa945b64f8fad9c0069b631750d44872fb07ee24f9b891c807e5752198f73afa4381453a31f6dc0bf621ab4cbfbcc2cf32e1f54e0bea3b015131c26adb1483342f29e1a483f71d28a8c1f0caf1339d80ec57d355bdf59cbaab0a4261b06bd024bc8eacd82468b0184bcf1c0c3b8ea02053dfd0da5d288f019f49b7aeb1492828034f393bc27dd19d07efda1318a785ebd58a296c51d273e4c8f87511155cc8c80d18ddccd33465e37064e55cf98b1b94fdba04b27ad81fbbd5b8333bcc199a2aa1080d33151f1c6d5194defc42a71a33e05e658be949fe37268485bcb191003efe7ccb169e17f9a432578e88c4fa588b2abb9c51a5671d76afda91e7cffe6101f62ccb09e6224450070959ba7ad5e556eb59eb80cbf49380328069da085af87bc15abef733ba5d712b783b7dd37d2abbe3178bac4740b21a068ca5c8f7eeb000889caae14271f2eef9297b918e6cbbd25e91f2fa3e9037362a2dfb96af1d79ee944de68214eb6e624a10dfffe5108405353f680cf258e0343206ced227d9e47e71495fbda1f423ef7c736fd1575bdd663a87504f9bbd7fbd99950b3dabd05605d9893aee62c9d1db4393c797c15b401a39515fe4b33d879faee534a6481088d65830012093e07704b079b1ecfb2326f79a92ae0f401ad9f33a4afe84f27805b5c11adef465a85c74df4d9282944530c465705b6a050220ad4654125928c20d11646ba33d0119a820a739474a9230daef327a937c3f2de991e745963830941b97edcd42b9e3593ad4fa78b8393a7ebe89c14fccc8e092d6d4ca79007382eccb923114b9cbc16b34497af4523a634167c06e3531c64f2438ec019b8db50833764b402d79a3d634208fda67850a83160890ce8a9e62baeff045122f66e2d1f52abedc3ee3cfcebd7b6a2f91b26d9f870fa51f687d3bcb1e8ae2436fbc030a08e793e0285b02e7b5577b0da87fd8e543d54fac9997bbb9e5045539a603093138a61393282f94ae4ea81f957ec335f589c10d907215f30aa43c87bcf0a34c2a904a0e4a6035c25f907ae736ebb3a6a0cd39308bdbec77e59fb4b983b9ed687c754c232d6bf9c79e1b2a6c25ecf2a117abc786eb89d3ed4fb955c63d42ce3e5a8139e42bf23e2156bcadd298b7b1b0f7412064894e94f0fb9df86bd3ca63719b6103dfa1c467e86390a48e4b96e7b15d9a63c2378d8b579b03f5b6c288038077162ae5e9224cf7ac90b61cea644c5869fb5a1daf94d8cfc7825239f4d804f0123608dcecd06281aff228ee8ee8b89654ef8c3d5e9af4a31b3d18f656948beec3f736e23c8fe15a7fea4646415f4ec50048c517d0676dcc0aeff843f40db13f9f10ead04bb0745d99d6e003c42205f4e231754bf3dcc696ddb56369ab33a3c835933f0cbbaa56abd1e0ee20a2f820d958bb1dd907234b0976ea240a12cccc09df382fc7fb10ac3c3692d538f8b20ecde45a56af4a5af4d1b95145904c224ce92d8a2d4e5f0efc62f14eab5c1539de4db53255a358e59535f0c462f9f3c8bfb06ccded34cec1bb0f97a0c868ac56887edb56bee94c92b415d666f69e1cb0808cb38742384a718f9a495c4d61ec6247f2f258162b3758c7ff10bf390bed9d88dac3e1f0a0fc6102f2a337ee2fa48c0e04312da4b60a4297dd91f2bbc6814bea6ff1a0dff2307be6647e489e9de0d13298868d6a0ace5b69fa73cd41c926114fb7c0358f8dc09c8639d596ca6cf9fa9dd25cedb3a0441394ca63ec626ab4dd64dc1d66e755617923422dc7a4fa384d942089ab41f335b87ff530df98a4ad5ba6dcc9116991283177a1bf77649ed9625aeb97f0b6a71a95e071174f51db43f8f250f4d3ab43b7c59df3bff0bbb435cfa106321c93456b8608abb2c02aebe08be8eed1603a3405331827354f43438cfa530b5ae02a90921993d53f631eb230f5de16e0e50f06a649bbd6db5351f3eca785da5eed10f761ffca3b54f02f13f3ac1201efda74c890facf41906a3e7ff4a323670d5ac577c067c6224cedd70ddab7f572d9565ecd4faf16d8b94acf1901431b6897d6e3f01993bbe771a8a96596f65cd197b57dfd2b58cc30e30b68d621103c720bec4a5dec23edbd887fabe9154bd7bae61f71f2bdf46ece42c8a3e6ceb941ef9280f1adfe8e59b36242ad7131a92c36c548d5213332c3d5a116e74d465309d537bdfedd499432e2354d748050d55a40ee7843a56d4ca2dde31c008ed443fb5a844d8bf55f2b86621453b0dfd24091dd22907b1b6fec0ae6667db1315d0aebee88f43c4f96c4519dbac91d5de855a151a7f54f7730af6dd821a5d83f900c2b39820f8cd67581291ce3c46eaf2637240b8362385ab7b2825b73a78c1028153d98d89400aeb7b6b46bd41a882b5b222a470a9e1423e7968a1bb987b1efadc3e4418d38ad6d9c69445632194e9d653719e62a07ae60b25f7ecea563e551dd15b59b4c943bd4d55cb4d60f738bc50d39f119caedc6e21314c8c2f57f65fa6fa8b3af302f408cad53e4905ada4c92fb5f683069edc9db0a063947aac8914853285196a448c368255e41192bdfc075a479e721763c8c2bf1d865fb839073dffd1df2e30fd4f7ad3aeb9342deaae2a1de8940d64682159c65bc6761e60490db9ba5d2c54f02bcaee755fa4e6e8dfc6972c77f192136bf193b0cefb17587367c00a977ec2075b03175dccc8c61515c7abed8a21d0818e5af1620727f5869407dc3e41cf782a70472263e30fea36a4796752a3489220bea76f9a913d9381b8fdf3268d1d950b93232e8d838f19b99723c047980fc4837146c65bd1a98d363d108923323eb1a1b6670fb69e5a76d6c332205484704326cf679b5a3c55145a8d5df778b7dc2c7e14b303b73ad6168e08360702e7c930ca4e95b3ea5b4cb9ad515b72b4f0ebb7dbd9a38895cf4005d3165bc22343ca8f39a4296694530d03d2350edd3c1f44093ed308e0488b84eeed3cfcea5e0a61e36e26681e6ba977ceeeb10ee15900f8de349d078f5c5655878fb059c35bae9efe8fc6a59cdbf1c95266eea66e6a3da3d47d1321c7b7e7139774a0b5ab12dec3a71da4788c45471e9caf329e43b92a6f414d0072efdddc9c976bf353e78c2d463746ae6c7a65d97ca621028cfc7c060d4946f79e62861405e354834a0061270330b888a675192da175de47bfbc47c351f13d2a61e6c7fbf66ad561e2efeb3ba6cd397d12e086e3ffa2d6b23805e6398e8a4e2bf864b53babeb35a614b595359166f5cd69f2d18df3009d518e976281c436c494837627abf14153c6f92a0608b8f4e517b8af918162018b0c542c4230499c05ca659fe906e163c39c3141bb7dd7b3b788ec10ef25441a8673e6a0541ba695a5bf44141b3ac017a40cb932cee1b0c3f0cc65954097c3a0ec9e05164a71f9a9753611c4d1f7195623478340e62423d8131f77db41f7a9e4757eb18874e48025b324f2dffae0d7a420b0d9ac3a74f90b4a233ddc7e8ad914d74df10471d58e98c4942cd55e0b3bbcad073daccafe4410306c92233d16de091fdb47e2ba7e41bd9fbdfee872d37a98385679263b0669f21994dac120cde5e85693389249eb42e75653c8f0252391c5706682a31cba2afc96bb582080f47ee5a4e12b40101d904bcb6c0fde4a1b3e96e60970f7fccfaea2891e19b1f308358c441dc53d79f4a31a12cd574f34f9e6562457fcd307d345952adab0fe93b8f2c95d1267a2cd19cf1ea82e6e6f836aec824a7f3713e13904a349cf5cf739d7d643e3b88380a44ab30dc6772dce1876f483f998636e27ec0916295c4bbd51980bcec9588fddd566b69217bfed0b170bdbc90a4f8ad96b0956ca6ecc7408c74d15ea8f2847849dd9ae3b71f04c2947511b025736c718b1574c2ad327be2b45595bb1488c6e0ff9e76c94c2ee0afa9b4f8377e1dfc23a3c88060e84a9fa241afdb9a93f3000f29423e993d3e80c5f88a5f71851a5044003d166c56a4481d1a9378612e25fb185e67e25e5006c226351c93e1d8485cfb0d6263d2bcfe3c24b70d0bce4fe48d41814d2de6381ccae041b16111150a0639cba1fcc99c5e77541ea8f1d341ee16212f13494282855d12ad25ad3e8910590383812aa8ffa29722e027f4a7ceb22d1b6f66ebb7788e1169df8a58d76700f7d5513ba205cbb279e2463753c04ea65f45c233b23aa8b6650101bf738d34b2335c72ed6062a421abae1f11b4fe9f2d87791dfb92bff43ed8f54341e88fc4841456206bd87aa27e3645a7185086b5c1c18d98b5dde68d5a2d2e16a6a7c9d021b6eebaaa939bb8cd6ac411e2d90ff08ded61a79c967e77b4eac081a98b8cdea9ba9f2b1794912f11f0e9671df9d7e6023852591fd428027bfa7c93ea4c79e1f73daeb4d0ad819975ec869b8692c11d1d49f20f75ccfa67006c2902e0bc7d73f48f42dedefa927a490988847daf5947cc35d270d58343fb712cdb39e162db9fc6a27a4ff4ef23205ead3212eb7640722c33ac76668ab667dac51ef38d433c9041c638f8bd5f3736eaeb9e3953cc38bfbaa168988c10aac3877e560e4c726cf4057bace3b15b35ebd54e7e66ab0b41b01225de5642fe2b88caee7cdf4f6da598fa23892e76dbe4c7c95c7c3e0fe37cc151a174a0b550e41df939fe22f09efe1cffc2c318d3f47b77bf5ddf5b1616995755bc1396dbe11e23f92afad6a9a2f8e83f62d6eeb88f6836b10650bed9fa7b698478ffe9311c8526b5d72110fa4311b645d0971f4a5a61d3666324a4b4d6acb27a51eb52d9181b77d1b4d2a6483cd6ee4b8c0d954bd74346e30a54fd5cf743786a6a5ff9231e982f524c0fc929c96be3220c324fb82a965179a25ce08f1aa7e0f2abdc6dc9414d706733ca39e171905f713f807a4f3c3f440723d0b4001fe227fa85992570642763a598e9f30b50c1f51370634161454f8ae27c017f5987c6e662ed04a6c5cd294f875241a9e43ff84af818d5c58e225592f00fe9fa829a6f5826294ac72f02295040379ff152e4ee59f1e1dbf6e4165ceeaac4d01282ea2110c1e5e9de046d0482bdbc4abe51925512c2f55b1c8a0eaa8c41e4393e8d7b2feb4d4210f059eb349921afe1900e2aefb0fa5275937eed9cf79371dc1eb77599ee87c32c88a427bf96f1c3659436c5422711808ca618288cc8970da3dff0b980f40368fdbc37869f906c0fd6a393d3c7a4a7e9a2e1ea0de7bac90d62c787097bc4d736bb0c9505da0e9495dce0f0404b200e0719fd8763f0069b989f255f3bd6942e872424c3868a6caea964af525d1a4cddaf509878d7ad24828f819971acce08725f8897e1569139190d6e3c75e49b403c8155072eaedc1bcf3323b50d798f750cdedcdbe874d0d6f1950d6187a3b7fd824eb1014e0d474050bae5d45b118f0b0a28a4b43aaa8d752edabf9e8f4bf7ce496b2b02bbed5963e9e205748ed9ebf5c5ccd052dee43c13a071553d86bf09bb89292bc42bf0888f76492574ef91b3e13d83a5ab5b05543fd98e4937ca2133947c696d782cd229a9850644d1ad0563058c3851c9d032ec5776182045e589229bd2a454f78a84cdb747d6a3d2781a8299d2b24a4960f87942adeefd0baa70f71d99dc1277adc0de9a1f7dd238c7537f48bd44926e209801f176d6bee576688da23aeea8e04da640d7b2ead0dc3392fedddce0dcf025cb3cd640f9ad3a3f2d5891b2438e96c118a23354355f4d6b888508695b0f138741a1bb712a8fd56053492a37fbf3c7b295f1d077eedaaab7ea2ac50280ce417b86e688b8be31de5bbb94608</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">輸入密碼查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> CSS特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS之變量如何賦值</title>
      <link href="/JS-post03.html"/>
      <url>/JS-post03.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS之變量如何賦值"><a href="#JS之變量如何賦值" class="headerlink" title="JS之變量如何賦值"></a>JS之變量如何賦值</h1><h2 id="變量有甚麼類型"><a href="#變量有甚麼類型" class="headerlink" title="變量有甚麼類型"></a>變量有甚麼類型</h2><ol><li><p>基本類型</p><blockquote><p>Undefine，String，Boolean，Null，Number</p></blockquote></li><li><p>引用類型</p><blockquote><p>Object包括它的延伸</p></blockquote></li></ol><h2 id="探討的問題"><a href="#探討的問題" class="headerlink" title="探討的問題"></a>探討的問題</h2><blockquote><p>當我們給變量賦值另一個變量，會發生發生甚麼</p></blockquote><p>注意: </p><p>​    在JS裡面，一個變量的值絕對不會指向另一個變量，而是指向內存</p><a id="more"></a><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="情況一-基本類型"><a href="#情況一-基本類型" class="headerlink" title="情況一: 基本類型"></a>情況一: 基本類型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br></pre></td></tr></table></figure><p>我們用num1這個變量初始化了num2，技術上來說會指向同一個內存地址</p><p><img src="/images/JS03/1.png" alt=""></p><p>如果今天對num2 進行操作，num1會因此改變嗎? </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br><span class="line">num2 + <span class="string">'bar'</span></span><br></pre></td></tr></table></figure><p>答案是不會的，因為基本類型是不可變的，所以num2會自行指向自身的內存地址</p><p><img src="/images/JS03/2.png" alt=""></p><p>這時候可以打印看看num1是否真的不會變</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br><span class="line">num2 + <span class="string">'bar'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num1:'</span>,num1)</span><br></pre></td></tr></table></figure><p>結果: </p><p><img src="/images/JS03/3.png" alt=""></p><h3 id="情況二-引用類型"><a href="#情況二-引用類型" class="headerlink" title="情況二: 引用類型"></a>情況二: 引用類型</h3><h4 id="預先知識"><a href="#預先知識" class="headerlink" title="預先知識"></a>預先知識</h4><p>引用類型賦值時的情況比較特別，會先引用到stack的某一個地址，再透過那個地址的值(heap的地址)查找到heap的值，比方說下面這樣</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">// false</span></span><br><span class="line">obj1.bar = <span class="number">2</span> <span class="comment">// 為了證明那兩個是不同(相同的話obj2會被obj1影響)</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123;foo: 1&#125;</span></span><br></pre></td></tr></table></figure><p>示意圖: </p><p><img src="/images/JS03/4.png" alt=""></p><h4 id="正題"><a href="#正題" class="headerlink" title="正題"></a>正題</h4><p>假如把一個變量用另一個變量賦值會怎麼樣?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1 <span class="comment">// 把obj1的內存地址給了他</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">// 這個就變成true</span></span><br><span class="line">obj1.bar = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// 這個也會受到obj1的操作影響</span></span><br></pre></td></tr></table></figure><h4 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h4><p><img src="/images/JS03/5.png" alt=""></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p>上面之所以沒變，是因為我們都是對heap進行操作，所以obj2當然會被影響，假設我對下面對象這樣操作結果就會不一樣!!!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  foo: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1 <span class="comment">// 內存複製</span></span><br><span class="line"></span><br><span class="line">obj1.bar = <span class="number">2</span> <span class="comment">// 將heap內的值改變(因為obj2指向的stack部變所以也會受到影響)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 這裡非常關鍵，obj2在stack裡指向的地址發生改變，所以之後假設對這個對象操作，已經不是obj1指向的那個對象，obj1理所當然不會改變</span></span><br><span class="line">obj2 = &#123;  </span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj2.baz = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//&#123;foo: 1, bar: 2&#125; 沒有baz!!</span></span><br></pre></td></tr></table></figure><h4 id="示意圖-1"><a href="#示意圖-1" class="headerlink" title="示意圖"></a>示意圖</h4><ol><li><p>內存賦值完成(  let obj2 = obj1  )</p><p><img src="/images/JS03/6.png" alt=""></p></li><li><p>將heap內的值改變(  obj1.bar = 2  )</p><p><img src="/images/JS03/7.png" alt=""></p></li><li><p>obj2被賦予新的值(  obj2= {foo: 1,bar: 2}  )</p><p><img src="/images/JS03/8.png" alt=""></p></li><li><p>操作obj2對應的對象(  obj2.baz = 3  )</p><p><img src="/images/JS03/9.png" alt=""></p></li><li><p>結論</p><p>所以最後打印obj1的時候跑出來的是{foo:1, bar: 2} !!!!!</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP緩存</title>
      <link href="/HTTP-post06.html"/>
      <url>/HTTP-post06.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP緩存"><a href="#HTTP緩存" class="headerlink" title="HTTP緩存"></a>HTTP緩存</h1><ol><li><p>原因: </p><blockquote><p>頻繁請求非常類費流量，且一直刷新使用者體驗相當不佳</p></blockquote></li><li><p>緩存內容</p><blockquote><p>主要是一些靜態資源(比如CSS，JS)</p></blockquote></li></ol><h2 id="HTTP緩存頭部-後面會詳談"><a href="#HTTP緩存頭部-後面會詳談" class="headerlink" title="HTTP緩存頭部(後面會詳談)"></a>HTTP緩存頭部(後面會詳談)</h2><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>請求/響應頭，緩存控制<br><img src="/images/HTTP06/1.png" alt=""></p><a id="more"></a><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>表資源過期時間，與max-age共存情況下優先級較低</p><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><p>資源最新修改時間，由服務器響應給瀏覽器</p><h3 id="if-Modified-Since"><a href="#if-Modified-Since" class="headerlink" title="if-Modified-Since"></a>if-Modified-Since</h3><p>與Last-Modified一組，瀏覽器請求服務器協帶，服務器會比對這個確認版本是否更新</p><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><p>資源標籤，服務器響應給瀏覽器</p><h3 id="if-None-Match"><a href="#if-None-Match" class="headerlink" title="if-None-Match"></a>if-None-Match</h3><p>與Etag一組，瀏覽器請求服務器協帶，服務器會比對這個確認版本是否更新</p><h2 id="HTTP-緩存工作方式"><a href="#HTTP-緩存工作方式" class="headerlink" title="HTTP 緩存工作方式"></a>HTTP 緩存工作方式</h2><p>現在開始假設服務器在跟瀏覽器對話</p><h2 id="情境一-服務器與瀏覽器約定一個文件過期時間-Expires"><a href="#情境一-服務器與瀏覽器約定一個文件過期時間-Expires" class="headerlink" title="情境一 服務器與瀏覽器約定一個文件過期時間(Expires)"></a>情境一 服務器與瀏覽器約定一個文件過期時間(Expires)</h2><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧!</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><blockquote><p>Expires(透過響應頭)主要是約定一個過期時間，在過期時間前客戶端不會向服務器要資源</p></blockquote><h3 id="延伸情況二"><a href="#延伸情況二" class="headerlink" title="延伸情況二"></a>延伸情況二</h3><blockquote><p>上面情況，假如文件過期後，該文件在服務器端沒有更新，就代表客戶端請求道的文件不就一模一樣，因此出了情境二</p></blockquote><h2 id="情境二-在Expires基礎上再加上Last-Modified以及if-Modified-Since"><a href="#情境二-在Expires基礎上再加上Last-Modified以及if-Modified-Since" class="headerlink" title="情境二 在Expires基礎上再加上Last-Modified以及if-Modified-Since"></a>情境二 在Expires基礎上再加上Last-Modified以及if-Modified-Since</h2><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧! 啊還有我怕到時候文件沒更新你又要我找給你，所以我回傳一個Last-Modified喔</span><br></pre></td></tr></table></figure></li><li><p>瀏覽器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">好，那等文件過期後我再回傳if-Modified-Since給你喔，方便你核對版本</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結-1"><a href="#總結-1" class="headerlink" title="總結:"></a>總結:</h3><p>if-Modified-Since與Last-Modified回傳樣子是</p><p><img src="/images/HTTP06/2.png" alt=""></p><blockquote><ol><li>如果Expires還沒過期，則瀏覽器聰明的使用緩存</li><li>過期了之後，瀏覽器請求時附上if-Modified-Since， 假如文件在服務器端有更新，服務器回傳304 Not Modified</li></ol></blockquote><h3 id="延伸情況三"><a href="#延伸情況三" class="headerlink" title="延伸情況三"></a>延伸情況三</h3><blockquote><p>情況二可以發現，if-Modified-Since與Last-Modified這兩個最小單位是秒，如果今天更新的時間與那兩個相差不到1秒文件就不會更新。假如今天我服務器的平台過大，比方說FB，總是會有這個情況發生</p></blockquote><h2 id="情況三-在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match-然後在加入max-age"><a href="#情況三-在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match-然後在加入max-age" class="headerlink" title="情況三 在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match, 然後在加入max-age"></a>情況三 在情況二的基礎上，增加一個文件內容唯一標示Etag與if-None-Match, 然後在加入max-age</h2><ol><li>max-age優先度比Expires高，因此這裡expires會被取代，單位是秒，表幾秒後緩存過期</li><li>Etag與if-None_Match的關係就像是Last-Modified以及if-Modified-Since</li><li>所以在這個情況Expires與Last-Modified其實沒啥用</li></ol><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OKOK，可是我怕你跟一直跟我要，所以給你一個Expires，等過了這個時間你再跟我要吧! 啊還有我怕到時候文件沒更新你又要我找給你，所以我回傳一個Last-Modified喔，但好像不夠精準，算了我再傳一個Etag以及max-age給你好了</span><br></pre></td></tr></table></figure></li><li><p>瀏覽器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">好，既然有更精準的Etag以及max-age那我當然看這個囉，那我之後再回傳if-None-Match給你做核對版本</span><br></pre></td></tr></table></figure></li></ul><h3 id="總結-2"><a href="#總結-2" class="headerlink" title="總結:"></a>總結:</h3><blockquote><p>到這裡瀏覽器已經可以精準確定緩存時間以及緩存文件是否相同</p></blockquote><h2 id="CDN緩存"><a href="#CDN緩存" class="headerlink" title="CDN緩存"></a>CDN緩存</h2><p>CDN自己也有緩存，並將緩存的靜態資源傳給瀏覽器，跟瀏覽器的行為也很像</p><ul><li><p>瀏覽器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ㄟㄟ，服務器，你的文件找一下有沒有一個叫做main.js的文件，找到後再給我</span><br></pre></td></tr></table></figure></li><li><p>服務器: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">別找我，找我老弟CDN吧</span><br></pre></td></tr></table></figure></li></ul><h2 id="瀏覽器對緩存的影響"><a href="#瀏覽器對緩存的影響" class="headerlink" title="瀏覽器對緩存的影響"></a>瀏覽器對緩存的影響</h2><p><img src="/images/HTTP06/3.png" alt=""></p><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP代理</title>
      <link href="/HTTP-post05.html"/>
      <url>/HTTP-post05.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-代理"><a href="#HTTP-代理" class="headerlink" title="HTTP 代理"></a>HTTP 代理</h1><p>像是中間人的概念，對待裡來說既可以當服務端也可以當客戶端</p><h2 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h2><p><img src="/images/HTTP05/1.png" alt=""></p><a id="more"></a><h2 id="為何需要代理"><a href="#為何需要代理" class="headerlink" title="為何需要代理"></a>為何需要代理</h2><h3 id="1-抓包"><a href="#1-抓包" class="headerlink" title="1. 抓包"></a>1. 抓包</h3><p>能更好分析請求與安全測試</p><h3 id="2-FQ"><a href="#2-FQ" class="headerlink" title="2. FQ"></a>2. FQ</h3><p>俗稱的翻牆</p><p><img src="/images/HTTP05/2.png" alt=""></p><h3 id="3-匿名訪問"><a href="#3-匿名訪問" class="headerlink" title="3. 匿名訪問"></a>3. 匿名訪問</h3><p>刪除客戶端HTTP報文中的私人資料，比方說Cookie或是IP地址，</p><h3 id="4-過濾器"><a href="#4-過濾器" class="headerlink" title="4. 過濾器"></a>4. 過濾器</h3><p>比方說不希望孩童從網路上看到非該年齡層的內容，因此可以透過代理過慮服務端回傳的內容</p><p><img src="/images/HTTP05/3.png" alt=""></p><h2 id="補充-網關"><a href="#補充-網關" class="headerlink" title="補充(網關)"></a>補充(網關)</h2><p>又稱作協議轉換器，為資源與應用程序的黏合器</p><h3 id="示意圖-1"><a href="#示意圖-1" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="/images/HTTP05/4.png" alt=""></p><h3 id="講解"><a href="#講解" class="headerlink" title="講解"></a>講解</h3><p>從上圖可以發現和代理很類似，最關鍵的一點就是我們可以透過網關轉換協議，比方說上圖客戶端向網關發起HTTP協議，而後經過網觀象服務器端發起POP。</p><h3 id="分類"><a href="#分類" class="headerlink" title="分類"></a>分類</h3><p>Web在一端使用HTTP，另一端採用另一種協議可以這樣標示</p><ol><li><p>(/HTTP) 客戶端網關: 與客戶端採用其他協議，與服務端採用HTTP</p><p>記憶點: 叫客戶端網關可想像成他是幫客戶端轉換成HTTP協議的方式</p></li><li><p>(HTTP/) 服務端網關: 與服務端端採用其他協議，與客戶端採用HTTP</p><p>記憶點: 與客戶端相反</p></li></ol><h3 id="常見網關"><a href="#常見網關" class="headerlink" title="常見網關"></a>常見網關</h3><ol><li><p>(HTTP/ *) 服務器端Web網關</p></li><li><p>(HTTP/HTTPS) 服務器端安全網關</p><p> (將客戶端傳來的HTTP協議加密成HTTPS)</p></li><li><p>(HTTPS/HTTP) 客戶端安全網關 </p></li></ol><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS靜態與動態作用域</title>
      <link href="/JS-post02.html"/>
      <url>/JS-post02.html</url>
      
        <content type="html"><![CDATA[<h2 id="JS靜態與動態作用域"><a href="#JS靜態與動態作用域" class="headerlink" title="JS靜態與動態作用域"></a>JS靜態與動態作用域</h2><p>JavaScript使用的是靜態作用域，非動態這件事要先提前知道</p><h3 id="靜態作用域"><a href="#靜態作用域" class="headerlink" title="靜態作用域"></a>靜態作用域</h3><ol><li><p>懶人包 : </p><blockquote><p>會主動去尋找函數與變量定義時的狀況</p></blockquote></li><li><p>例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'靜態作用域'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">'動態作用域'</span></span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// '靜態作用域'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>分析 :</p><p>如果沒有作用域鏈的概念可以參考下面思維</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 前面都很正常的順順執行下來直到bar()</span><br><span class="line"><span class="number">2.</span> 當執行bar時候，會從全局作用域(因為bar執行的地方在全局作用域)裡面尋找bar聲明的地方</span><br><span class="line"><span class="number">3.</span> 進到bar函數作用域裡面(壓棧) <span class="comment">// 所在第六行</span></span><br><span class="line"><span class="number">4.</span> 在bar函數作用域裡面執行foo()，但在該函數作用域裡面沒有聲明foo，因此跑到上一層尋找，就是全局作用域</span><br><span class="line"><span class="number">5.</span> 找到foo聲明的地方，並進入foo作用域裡面</span><br><span class="line"><span class="number">5.</span> 試圖打印出a <span class="comment">// 此時所在是第四行</span></span><br><span class="line"><span class="number">6.</span> 因為foo作用域裡面沒有聲明變量a，因此又跑到全局作用域</span><br><span class="line"><span class="number">7.</span> 找到a(靜態作用域)並打印出來</span><br></pre></td></tr></table></figure></li></ol><h3 id="動態作用域"><a href="#動態作用域" class="headerlink" title="動態作用域"></a>動態作用域</h3><ol><li><p>懶人包: </p><blockquote><p>會到執行時的環境尋找</p></blockquote></li><li><p>例子(跟靜態相同): </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'靜態作用域'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">'動態作用域'</span></span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// '動態作用域'</span></span><br></pre></td></tr></table></figure><p>分析: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">前面五點都一模一樣直到第六點</span><br><span class="line"><span class="number">1.</span> 前面都很正常的順順執行下來直到bar()</span><br><span class="line"><span class="number">2.</span> 當執行bar時候，會從全局作用域(因為bar執行的地方在全局作用域)裡面尋找bar聲明的地方</span><br><span class="line"><span class="number">3.</span> 進到bar函數作用域裡面(壓棧) <span class="comment">// 所在第六行</span></span><br><span class="line"><span class="number">4.</span> 在bar函數作用域裡面執行foo()，但在該函數作用域裡面沒有聲明foo，因此跑到上一層尋找，就是全局作用域</span><br><span class="line"><span class="number">5.</span> 找到foo聲明的地方，並進入foo作用域裡面</span><br><span class="line"><span class="number">5.</span> 試圖打印出a </span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 這時候找不到a並不會跑到上一層作用域鏈查找，而是回到執行時的環境也就是第八行所在的作用域查找</span><br><span class="line"><span class="number">7.</span> 這時候就會發現a是動態作用域並打印出</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP的長連接與短連接</title>
      <link href="/HTTP-post04.html"/>
      <url>/HTTP-post04.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP的長連接與短連接"><a href="#HTTP的長連接與短連接" class="headerlink" title="HTTP的長連接與短連接"></a>HTTP的長連接與短連接</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote><p>其實HTTP的長連接與短連接是在講TCP的長連接與短連接</p></blockquote><h2 id="實際案例"><a href="#實際案例" class="headerlink" title="實際案例"></a>實際案例</h2><p>打開台大的網站按F12，可以發現有一個Connection: Keep-Alive，那個就是長連結</p><p><img src="/images/HTTP04/1.png" alt=""></p><a id="more"></a><h2 id="差別"><a href="#差別" class="headerlink" title="差別"></a>差別</h2><p>短連接 </p><blockquote><p>建立連結 =&gt; 數據傳輸 =&gt; 關閉連結 =&gt; ….  =&gt; 建立連結 =&gt; 數據傳輸 =&gt; 關閉連結 =&gt;</p></blockquote><p>長連結(可以省去TCP連接與關閉的時間)</p><p>​    通常關閉連結會是服務端，因為隨著連結的客戶端越來越多，服務端會有撐不下去的時候</p><blockquote><p>建立連結 =&gt; 數據傳輸 =&gt; …. (保持連結) …. =&gt;  數據傳輸 =&gt; 關閉連結</p></blockquote><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>具體誰好誰壞沒有一定，當然還是要視情況而定</p><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP之身分認證</title>
      <link href="/HTTP-post03.html"/>
      <url>/HTTP-post03.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP之身分認證"><a href="#HTTP之身分認證" class="headerlink" title="HTTP之身分認證"></a>HTTP之身分認證</h1><p>有以下四種認證</p><ol><li>BASIC認證 (基本認證)</li><li>DIGEST認證 (摘要認證)</li><li>SSL客戶端認證</li><li>FormBase認證 (基於表單驗證)</li></ol><a id="more"></a><h2 id="BASIC認證"><a href="#BASIC認證" class="headerlink" title="BASIC認證"></a>BASIC認證</h2><p>HTTP 1.0 即存在</p><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="/images/HTTP03/1.png" alt=""></p><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><p>因為沒有加密，如果不小心被其他有心人士獲取，則帳號密碼經Base64解碼即獲得相當不安全，因此又有了DIGEST認證</p><h2 id="DIGEST-認證"><a href="#DIGEST-認證" class="headerlink" title="DIGEST 認證"></a>DIGEST 認證</h2><p>HTTP1.1存在</p><h3 id="示意圖-1"><a href="#示意圖-1" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="/images/HTTP03/2.png" alt=""></p><p>這種方法雖然解決加密，但沒有解決用戶可能被冒充的問題(只要用戶名與密碼正確就認為你是本人)</p><h2 id="SSL-客戶端認證"><a href="#SSL-客戶端認證" class="headerlink" title="SSL 客戶端認證"></a>SSL 客戶端認證</h2><p>藉由HTTPS 客戶端憑證，服務器可確認訪問是否來自已登入瘩客戶端</p><h2 id="基於表單驗證明"><a href="#基於表單驗證明" class="headerlink" title="基於表單驗證明"></a>基於表單驗證明</h2><ol><li>不是在HTTP協議定義的</li><li>使用web各自實現表單認證方式</li><li>通過cookie與session</li></ol><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP協議編碼與解碼</title>
      <link href="/HTTP-post02.html"/>
      <url>/HTTP-post02.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP協議編碼與解碼"><a href="#HTTP協議編碼與解碼" class="headerlink" title="HTTP協議編碼與解碼"></a>HTTP協議編碼與解碼</h1><p>在講解編碼之前我們率先了解一下甚麼是碼</p><h2 id="字符集與編碼"><a href="#字符集與編碼" class="headerlink" title="字符集與編碼"></a>字符集與編碼</h2><h3 id="計算機如何顯示文字"><a href="#計算機如何顯示文字" class="headerlink" title="計算機如何顯示文字"></a>計算機如何顯示文字</h3><p>有些人應該已經知道計算機系統是利用二進制保存操作，那我們就要思考如何把這種二進制系統轉換成我們的畫面</p><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="/images/HTTP02/1.png" alt=""></p><a id="more"></a><p>現在想像計算機是一個人，如果我們今天想要找水壺的英文，那我們是不是會打開字典開始尋找。對計算機來說字符集就是他看得懂的語言，而字庫表就是他查找水壺這個英文的字典</p><ol><li>字符集: 某一個電腦看得懂的二進制代碼(地址的集合)</li><li>字庫表: 儲存所有二進制代碼的具體內容(那一本字典)</li><li>編碼方式: 算法，因為二進制樹又臭又長很難搞</li></ol><h3 id="具體流程"><a href="#具體流程" class="headerlink" title="具體流程"></a>具體流程</h3><blockquote><p>一個二進制樹經過一個編碼方式得到字符集對應的地址，在字庫表找到對應的字符，最後顯示給用戶</p></blockquote><h2 id="常見編碼規範"><a href="#常見編碼規範" class="headerlink" title="常見編碼規範"></a>常見編碼規範</h2><p><img src="/images/HTTP02/2.png" alt=""></p><h2 id="為何會亂碼"><a href="#為何會亂碼" class="headerlink" title="為何會亂碼"></a>為何會亂碼</h2><p>不管是在編碼或者解碼的過程中，假如我們解析的過程沒有找到一一對應的字符集或者字符表，就會產生亂碼。比方說ASCII不支持中文，如果我們在解碼過程發現中文字就會產生亂碼。</p><h2 id="URL的編碼以及解碼"><a href="#URL的編碼以及解碼" class="headerlink" title="URL的編碼以及解碼"></a>URL的編碼以及解碼</h2><ol><li><p>採用ASCII字符集進行編碼，假如有非ASCII的字符要對其進行編碼</p></li><li><p>URL 有一些保留字(比如&amp;)，如果要在URL使用也要進行編碼</p></li></ol><h3 id="百分號編碼規範"><a href="#百分號編碼規範" class="headerlink" title="百分號編碼規範"></a>百分號編碼規範</h3><ol><li>屬於ASCII字符集的非保留字不做編碼</li><li>屬於ASCII字符集的保留字取得ASCII的內碼，再加上%前綴後進行編碼</li><li>非ASCII則取Unicode內碼，加上%前綴後進行編碼</li></ol><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP_詳解Cookie與Session</title>
      <link href="/HTTP-post01.html"/>
      <url>/HTTP-post01.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-狀態管理-cookie與session"><a href="#HTTP-狀態管理-cookie與session" class="headerlink" title="HTTP 狀態管理: cookie與session"></a>HTTP 狀態管理: cookie與session</h1><p>大家先來想想一個例子，如果我今天要開一間咖啡館，然後有一個滿10點送50元飲料，我該怎麼去紀錄?</p><ol><li>集點蓋章</li><li>老闆自備簽名章</li></ol><p>一般人可能會講上面那兩點，但事實上上面那兩個方法有點問題，我們無法知道雙方會部會造假，因此得出了第三個方法，你有自己的會員蓋章，老闆也準備自己的系統紀錄，假如要兌換，就核對一下即可頒發。cookie與session就是為了解決第三個辦法的蓋章卡以及老闆的系統。</p><a id="more"></a><h2 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h2><h3 id="是甚麼"><a href="#是甚麼" class="headerlink" title="是甚麼"></a>是甚麼</h3><p>一小段文本訊息，客戶端請求服務器，服務器就頒發一個cookie給客戶端瀏覽器(蓋章卡) ， 客戶端瀏覽器就把它保留下來，假設下次再請求，瀏覽器會把cookie跟網址提交給服務器，讓服務器辨別用戶狀態。</p><h3 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h3><p><img src="/images/HTTP01/1.png" alt=""></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/images/HTTP01/2.png" alt=""></p><h2 id="如何獲取"><a href="#如何獲取" class="headerlink" title="如何獲取"></a>如何獲取</h2><blockquote><p>可以在瀏覽器打網址的地方輸入下面這行javascript:alert(document.cookie)</p></blockquote><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="是甚麼-1"><a href="#是甚麼-1" class="headerlink" title="是甚麼"></a>是甚麼</h3><blockquote><p>服務器端紀錄用戶訊息的機制(老闆的紀錄器)</p></blockquote><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p><img src="/images/HTTP01/3.png" alt=""></p><h3 id="有效期"><a href="#有效期" class="headerlink" title="有效期"></a>有效期</h3><p>基本上cookie有效時間會非常非常久，而session因為視服務端，會有大量的session紀錄，可能會內存溢出，因此會有失效，又分成下面幾種</p><ol><li>自動失效: session超時</li><li>主動失效: 調用HttpSession.invalidate( ) </li><li>服務器進程被停止</li></ol><h2 id="兩者比較"><a href="#兩者比較" class="headerlink" title="兩者比較"></a>兩者比較</h2><ol><li><p>存放位置不同 (一個存在服務器，一個存在客戶端)</p></li><li><p>安全性不同 </p><p>cookie可能會被其他程式窺視，因此cookie盡量不要放帳號密碼</p></li><li><p>有效期不同 (session會自動清理，cookie基本上不會消失因為通常沒有像session有內存溢出的問題)</p></li></ol><blockquote><p>以上為<a href="https://coding.imooc.com/class/395.html#Anchor" target="_blank" rel="noopener">https://coding.imooc.com/class/395.html#Anchor</a> 整理下來的筆記</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript偽數組</title>
      <link href="/JS_post01.html"/>
      <url>/JS_post01.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript之類數組完全攻略"><a href="#JavaScript之類數組完全攻略" class="headerlink" title="JavaScript之類數組完全攻略"></a>JavaScript之類數組完全攻略</h2><p>今天幫大家整理偽數組的概念，我們先來從題目開始分析</p><p>先來打造一個很酷的對象如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'length'</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">'push'</span>: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時候來打印obj看會長怎樣</p><a id="more"></a><p><img src="/images/JS01/1.jpeg" alt=""></p><p>乍看之下他還只是一個平常的對象，但其實這個對象這時候已經變成一個類數組了! 我們來對他做以下操作可以更明白</p><p><img src="/images/JS01/2.jpeg" alt=""></p><p>可以發現到這時候他多了一個 3: “d” ，對象原本是不能這樣做的，但是在這邊卻可以實現，因此才對他取名叫做類數組。</p><h3 id="如何打造一個類數組對象"><a href="#如何打造一個類數組對象" class="headerlink" title="如何打造一個類數組對象:"></a>如何打造一個類數組對象:</h3><p>要打造出一個類數組有要打造出一個類數組有幾個條件</p><ol><li>他必須要是一個對象</li><li>屬性要為索引(數字)值</li><li>一定要有length存在</li><li>最好可以加push</li><li>附註: 如果想讓它變得更像數組可以加上splice，如下圖</li></ol><p><img src="/images/JS01/3.jpeg" alt=""></p><h3 id="出問題考考大家"><a href="#出問題考考大家" class="headerlink" title="出問題考考大家"></a>出問題考考大家</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">"2"</span>: <span class="string">"c"</span>,</span><br><span class="line">    <span class="string">"3"</span>: <span class="string">"d"</span>,</span><br><span class="line">    <span class="string">"length"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"push"</span>: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.push(<span class="string">"f"</span>)</span><br><span class="line">obj.push(<span class="string">"g"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><h3 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h3><p><img src="/images/JS01/4.jpeg" alt=""></p><p>3的 “d” 居然被 “f” 覆蓋掉了，而且多了一個4 : “g” ，我們來講解一下實現原理!!</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h3><ol><li>在講這個之前我們要先觀察Array.prototype.push的實現方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是push的偽代碼</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayPush</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = TO_UNIT32(<span class="keyword">this</span>.length) <span class="comment">// 被push的數組長度(類數組採用的length就是這個)</span></span><br><span class="line">  <span class="keyword">var</span> m = %_AraumentsLength() <span class="comment">// push的總長度</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>[i + n] = %_Arauments(i)  <span class="comment">// 複製給原數組</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">this</span>.length = n + m <span class="comment">// 修正最終數組長度</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.length </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從第18行可以得知為甚麼Obj一定要有length，再來第20到22行就能知道他push的觀點全是在length上，也就是說在obj對象最該觀察的不是其他元素而是length!</p><ol start="2"><li>原題目: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">"2"</span>: <span class="string">"c"</span>,</span><br><span class="line">    <span class="string">"3"</span>: <span class="string">"d"</span>,</span><br><span class="line">    <span class="string">"length"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"push"</span>: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.push(<span class="string">"f"</span>)</span><br><span class="line">obj.push(<span class="string">"g"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><p><img src="/images/JS01/5.jpeg" alt=""></p><p>到這邊就能很明瞭，為甚麼 3會變f ，4會變 g</p><h3 id="關鍵代碼"><a href="#關鍵代碼" class="headerlink" title="關鍵代碼"></a>關鍵代碼</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">  <span class="keyword">this</span>[i + n] = %_Arauments(i)  <span class="comment">// 複製給原數組</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以想一下i = 0 的情況下會發生甚麼事，是不是this[0 + n]會被push的第一個元素取代，那這裡他的n代表的不就是Obj的 length，那就表示說Obj [3] 會被 f 取代，並且length變4 ，然後Obj[4]再被 g取代，length變5!!這就是這題的實現原理。</p><h3 id="感謝觀看-歡迎分享"><a href="#感謝觀看-歡迎分享" class="headerlink" title="感謝觀看~歡迎分享"></a><strong>感謝觀看<del>~</del>歡迎分享</strong></h3>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
